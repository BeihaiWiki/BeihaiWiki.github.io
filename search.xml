<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java集合</title>
      <link href="/posts/4509351.html"/>
      <url>/posts/4509351.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、单列集合"><a href="#一、单列集合" class="headerlink" title="一、单列集合"></a>一、单列集合</h1><h2 id="1-Collection集合"><a href="#1-Collection集合" class="headerlink" title="1.Collection集合"></a>1.Collection集合</h2><h3 id="1-1数组和集合的区别"><a href="#1-1数组和集合的区别" class="headerlink" title="1.1数组和集合的区别"></a>1.1数组和集合的区别</h3><ul><li><p>相同点</p><p>都是容器,可以存储多个数据</p></li><li><p>不同点</p><ul><li><p>数组的长度是不可变的,集合的长度是可变的</p></li><li><p>数组可以存基本数据类型和引用数据类型</p><p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p></li></ul></li></ul><h3 id="1-2集合类体系结构"><a href="#1-2集合类体系结构" class="headerlink" title="1.2集合类体系结构"></a>1.2集合类体系结构</h3><p><img src="/images/img/01_集合类体系结构图.png" alt="01_集合类体系结构图"></p><h3 id="1-3Collection-集合概述和使用"><a href="#1-3Collection-集合概述和使用" class="headerlink" title="1.3Collection 集合概述和使用"></a>1.3Collection 集合概述和使用</h3><ul><li><p>Collection集合概述</p><ul><li>是单例集合的顶层接口,它表示一组对象,这些对象也称为Collection的元素</li><li>JDK 不提供此接口的任何直接实现.它提供更具体的子接口(如Set和List)实现</li></ul></li><li><p>创建Collection集合的对象</p><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul></li><li><p>Collection集合常用方法</p><p>| 方法名                     | 说明                               |<br>| :————————————- | :————————————————- |<br>| boolean add(E e)           | 添加元素                           |<br>| boolean remove(Object o)   | 从集合中移除指定的元素             |<br>| boolean removeIf(Object o) | 根据条件进行移除                   |<br>| void   clear()             | 清空集合中的元素                   |<br>| boolean contains(Object o) | 判断集合中是否存在指定的元素       |<br>| boolean isEmpty()          | 判断集合是否为空                   |<br>| int   size()               | 集合的长度，也就是集合中元素的个数 |</p></li></ul><h3 id="1-4Collection集合的遍历"><a href="#1-4Collection集合的遍历" class="headerlink" title="1.4Collection集合的遍历"></a>1.4Collection集合的遍历</h3><h4 id="1-4-1-迭代器遍历"><a href="#1-4-1-迭代器遍历" class="headerlink" title="1.4.1 迭代器遍历"></a>1.4.1 迭代器遍历</h4><ul><li><p>迭代器介绍</p><ul><li>迭代器,集合的专用遍历方式</li><li>Iterator<E> iterator(): 返回此集合中元素的迭代器,通过集合对象的iterator()方法得到</li></ul></li><li><p>Iterator中的常用方法</p><p>​    boolean hasNext(): 判断当前位置是否有元素可以被取出<br>​    E next(): 获取当前位置的元素,将迭代器对象移向下一个索引位置</p></li><li><p>Collection集合的遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用while循环改进元素的判断和获取</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器中删除的方法</p><p>​    void remove(): 删除迭代器对象当前指向的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;b&quot;</span>.equals(s))&#123;</span><br><span class="line">                <span class="comment">//指向谁,那么此时就删除谁.</span></span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-4-2-增强for"><a href="#1-4-2-增强for" class="headerlink" title="1.4.2 增强for"></a>1.4.2 增强for</h4><ul><li><p>介绍</p><ul><li>它是JDK5之后出现的,其内部原理是一个Iterator迭代器</li><li>实现Iterable接口的类才可以使用迭代器和增强for</li><li>简化数组和Collection集合的遍历</li></ul></li><li><p>格式</p><p>​    for(集合/数组中元素的数据类型 变量名 :  集合/数组名) {</p><p>​        // 已经将当前遍历到的元素封装到变量中了,直接使用变量即可</p><p>​    }</p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCollectonDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1,数据类型一定是集合或者数组中元素的类型</span></span><br><span class="line">        <span class="comment">//2,str仅仅是一个变量名而已,在循环的过程中,依次表示集合或者数组中的每一个元素，仅仅是第三方变量，修改之后不改变集合原本的数据</span></span><br><span class="line">        <span class="comment">//3,list就是要遍历的集合或者数组</span></span><br><span class="line">        <span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>细节点注意：</p></li></ul><p>1.报错NoSuchElementException       </p><p> 2.迭代器遍历完毕，指针不会复位      </p><p>3.循环中只能用一次next方法        </p><p>4.迭代器遍历时，不能用集合的方法进行增加或者删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A04_CollectionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        迭代器的细节注意点：</span></span><br><span class="line"><span class="comment">            1.报错NoSuchElementException</span></span><br><span class="line"><span class="comment">            2.迭代器遍历完毕，指针不会复位</span></span><br><span class="line"><span class="comment">            3.循环中只能用一次next方法</span></span><br><span class="line"><span class="comment">            4.迭代器遍历时，不能用集合的方法进行增加或者删除</span></span><br><span class="line"><span class="comment">            暂时当做一个结论先行记忆，在今天我们会讲解源码详细的再来分析。</span></span><br><span class="line"><span class="comment">                如果我实在要删除：那么可以用迭代器提供的remove方法进行删除。</span></span><br><span class="line"><span class="comment">                如果我要添加，暂时没有办法。(只是暂时)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取迭代器对象</span></span><br><span class="line">        <span class="comment">//迭代器就好比是一个箭头，默认指向集合的0索引处</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">        <span class="comment">//3.利用循环不断的去获取集合中的每一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//4.next方法的两件事情：获取元素并移动指针</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当上面循环结束之后，迭代器的指针已经指向了最后没有元素的位置</span></span><br><span class="line">        <span class="comment">//System.out.println(it.next());//NoSuchElementException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器遍历完毕，指针不会复位</span></span><br><span class="line">        System.out.println(it.hasNext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果我们要继续第二次遍历集合，只能再次获取一个新的迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it2 = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it2.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-3-lambda表达式"><a href="#1-4-3-lambda表达式" class="headerlink" title="1.4.3 lambda表达式"></a>1.4.3 lambda表达式</h4><p>​    利用forEach方法，再结合lambda表达式的方式进行遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A07_CollectionDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* </span></span><br><span class="line"><span class="comment">        lambda表达式遍历：</span></span><br><span class="line"><span class="comment">                default void forEach(Consumer&lt;? super T&gt; action):</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        <span class="comment">//2.利用匿名内部类的形式</span></span><br><span class="line">        <span class="comment">//底层原理：</span></span><br><span class="line">        <span class="comment">//其实也会自己遍历集合，依次得到每一个元素</span></span><br><span class="line">        <span class="comment">//把得到的每一个元素，传递给下面的accept方法</span></span><br><span class="line">        <span class="comment">//s依次表示集合中的每一个数据</span></span><br><span class="line">       <span class="comment">/* coll.forEach(new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void accept(String s) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(s);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        coll.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h2><h3 id="2-1List集合的概述和特点"><a href="#2-1List集合的概述和特点" class="headerlink" title="2.1List集合的概述和特点"></a>2.1List集合的概述和特点</h3><ul><li>List集合的概述<ul><li>有序集合,这里的有序指的是存取顺序</li><li>用户可以精确控制列表中每个元素的插入位置,用户可以通过整数索引访问元素,并搜索列表中的元素</li><li>与Set集合不同,列表通常允许重复的元素</li></ul></li><li>List集合的特点<ul><li>存取有序</li><li>可以重复</li><li>有索引</li></ul></li></ul><h3 id="2-2List集合的特有方法"><a href="#2-2List集合的特有方法" class="headerlink" title="2.2List集合的特有方法"></a>2.2List集合的特有方法</h3><ul><li><p>方法介绍</p><p>| 方法名                          | 描述                                   |<br>| ———————————————- | ——————————————————— |<br>| void add(int index,E   element) | 在此集合中的指定位置插入指定的元素     |<br>| E remove(int   index)           | 删除指定索引处的元素，返回被删除的元素 |<br>| E set(int index,E   element)    | 修改指定索引处的元素，返回被修改的元素 |<br>| E get(int   index)              | 返回指定索引处的元素                   |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        <span class="comment">//method1(list);</span></span><br><span class="line">        <span class="comment">//method2(list);</span></span><br><span class="line">        <span class="comment">//method3(list);</span></span><br><span class="line">        <span class="comment">//method4(list);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//        E get(int index)返回指定索引处的元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//        E set(int index,E element)修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line">        <span class="comment">//被替换的那个元素,在集合中就不存在了.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> list.set(<span class="number">0</span>, <span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//        E remove(int index)删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">        <span class="comment">//在List集合中有两个删除的方法</span></span><br><span class="line">        <span class="comment">//第一个 删除指定的元素,返回值表示当前元素是否删除成功</span></span><br><span class="line">        <span class="comment">//第二个 删除指定索引的元素,返回值表示实际删除的元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//        void add(int index,E element)在此集合中的指定位置插入指定的元素</span></span><br><span class="line">        <span class="comment">//原来位置上的元素往后挪一个索引.</span></span><br><span class="line">        list.add(<span class="number">0</span>,<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3List集合的五种遍历方式"><a href="#2-3List集合的五种遍历方式" class="headerlink" title="2.3List集合的五种遍历方式"></a>2.3List集合的五种遍历方式</h3><ol><li>迭代器</li><li>列表迭代器</li><li>增强for</li><li>Lambda表达式</li><li>普通for循环</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建集合并添加元素</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.迭代器</span></span><br><span class="line"><span class="comment">/*Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">     while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">        String str = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(str);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.增强for</span></span><br><span class="line"><span class="comment">//下面的变量s，其实就是一个第三方的变量而已。</span></span><br><span class="line"><span class="comment">//在循环的过程中，依次表示集合中的每一个元素</span></span><br><span class="line"><span class="comment">/* for (String s : list) &#123;</span></span><br><span class="line"><span class="comment">       System.out.println(s);</span></span><br><span class="line"><span class="comment">   &#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Lambda表达式</span></span><br><span class="line"><span class="comment">//forEach方法的底层其实就是一个循环遍历，依次得到集合中的每一个元素</span></span><br><span class="line"><span class="comment">//并把每一个元素传递给下面的accept方法</span></span><br><span class="line"><span class="comment">//accept方法的形参s，依次表示集合中的每一个元素</span></span><br><span class="line"><span class="comment">//list.forEach(s-&gt;System.out.println(s) );</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.普通for循环</span></span><br><span class="line"><span class="comment">//size方法跟get方法还有循环结合的方式，利用索引获取到集合中的每一个元素</span></span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; list.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">            //i:依次表示集合中的每一个索引</span></span><br><span class="line"><span class="comment">            String s = list.get(i);</span></span><br><span class="line"><span class="comment">            System.out.println(s);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.列表迭代器</span></span><br><span class="line"><span class="comment">//获取一个列表迭代器的对象，里面的指针默认也是指向0索引的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//额外添加了一个方法：在遍历的过程中，可以添加元素</span></span><br><span class="line">ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;bbb&quot;</span>.equals(str))&#123;</span><br><span class="line">        <span class="comment">//qqq</span></span><br><span class="line">        it.add(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><h3 id="2-4-细节点注意："><a href="#2-4-细节点注意：" class="headerlink" title="2.4 细节点注意："></a>2.4 细节点注意：</h3><p>List系列集合中的两个删除的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>直接删除元素</span><br><span class="line"><span class="number">2.</span>通过索引进行删除</span><br></pre></td></tr></table></figure><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List系列集合中的两个删除的方法</span></span><br><span class="line"><span class="comment">//1.直接删除元素</span></span><br><span class="line"><span class="comment">//2.通过索引进行删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.删除元素</span></span><br><span class="line"><span class="comment">//请问：此时删除的是1这个元素，还是1索引上的元素？</span></span><br><span class="line"><span class="comment">//为什么？</span></span><br><span class="line"><span class="comment">//因为在调用方法的时候，如果方法出现了重载现象</span></span><br><span class="line"><span class="comment">//优先调用，实参跟形参类型一致的那个方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//list.remove(1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//手动装箱，手动把基本数据类型的1，变成Integer类型</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">list.remove(i);</span><br><span class="line"></span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-List集合的实现类"><a href="#3-List集合的实现类" class="headerlink" title="3.List集合的实现类"></a>3.List集合的实现类</h2><h3 id="3-1ArrayList"><a href="#3-1ArrayList" class="headerlink" title="3.1ArrayList"></a>3.1ArrayList</h3><p><strong>ArrayList集合</strong></p><p>​    底层是数组结构实现，查询快、增删慢</p><ul><li><p>构造方法</p><p>| <strong>构造方法摘要</strong>                                             |<br>| —————————————————————————————— |<br>| <code>**[ArrayList](../../java/util/ArrayList.html#ArrayList())**()</code>        构造一个初始容量为 10 的空列表。 |<br>| <code>**[ArrayList](../../java/util/ArrayList.html#ArrayList(java.util.Collection))**(Collection&lt;? extends E&gt; c)</code>       构造一个包含指定  collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的。 |<br>| <code>**[ArrayList](../../java/util/ArrayList.html#ArrayList(int))**(int initialCapacity)</code>        构造一个具有指定初始容量的空列表。 |</p></li><li><p>成员方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">增：<span class="keyword">add</span></span><br><span class="line">删：remove</span><br><span class="line">改：<span class="keyword">set</span></span><br><span class="line">查：<span class="keyword">get</span></span><br><span class="line">获取集合长度，元素个数：size</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">ArrayList&lt;String&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list.size());</span><br><span class="line">list.<span class="keyword">add</span>(&quot;11&quot;);</span><br><span class="line">list.<span class="keyword">add</span>(&quot;111&quot;);</span><br><span class="line">list.<span class="keyword">add</span>(&quot;11&quot;);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list);</span><br><span class="line">list.remove(&quot;111&quot;);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(list.size());</span><br><span class="line">list.<span class="keyword">set</span>(<span class="number">0</span>,&quot;22&quot;);</span><br><span class="line">String s = list.<span class="keyword">get</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.pr8intln(list.<span class="keyword">get</span>(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-1-1ArrayList业务场景"><a href="#3-1-1ArrayList业务场景" class="headerlink" title="3.1.1ArrayList业务场景"></a>3.1.1ArrayList业务场景</h4><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名: &quot;</span>);</span><br><span class="line">        s.setName(sc.next());</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄&quot;</span>);</span><br><span class="line">        s.setAge(sc.nextInt());</span><br><span class="line">        list.add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;, &quot;</span> + stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.arraylist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;a1&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;a2&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;1234567&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;a3&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;1234568&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(getIndex(list, <span class="string">&quot;a1&quot;</span>)); <span class="comment">//0</span></span><br><span class="line">        System.out.println(getIndex(list, <span class="string">&quot;a4&quot;</span>)); <span class="comment">//-1</span></span><br><span class="line">        System.out.println(contains(list, <span class="string">&quot;a1&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(contains(list, <span class="string">&quot;a4&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找list集合中是否有该用户id如果有就返回索引，没有就返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> user.getId();</span><br><span class="line">            <span class="keyword">if</span>(uid.equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找list集合中是否有改用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(ArrayList&lt;User&gt; list, String id)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">String</span> <span class="variable">uid</span> <span class="operator">=</span> user.getId();</span><br><span class="line">            <span class="keyword">if</span>(uid.equals(id))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接写这个也可以</span></span><br><span class="line">        <span class="comment">//return getIndex(list,id) &gt;= 0;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="生成26个英文字母"><a href="#生成26个英文字母" class="headerlink" title="生成26个英文字母"></a>生成26个英文字母</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span>&#123;</span><br><span class="line">       ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">           list.add((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + i));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2LinkedList集合"><a href="#3-2LinkedList集合" class="headerlink" title="3.2LinkedList集合"></a>3.2LinkedList集合</h3><p><strong>LinkedList集合</strong></p><p>​    底层是链表结构实现，查询慢、增删快</p><ul><li><p>特有方法</p><p>| 方法名                    | 说明                             |<br>| ————————————- | ———————————————— |<br>| public void addFirst(E e) | 在该列表开头插入指定的元素       |<br>| public void addLast(E e)  | 将指定的元素追加到此列表的末尾   |<br>| public E getFirst()       | 返回此列表中的第一个元素         |<br>| public   E getLast()      | 返回此列表中的最后一个元素       |<br>| public E removeFirst()    | 从此列表中删除并返回第一个元素   |<br>| public   E removeLast()   | 从此列表中删除并返回最后一个元素 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLinkedListDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//        public void addFirst(E e)在该列表开头插入指定的元素</span></span><br><span class="line">        <span class="comment">//method1(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public void addLast(E e)将指定的元素追加到此列表的末尾</span></span><br><span class="line">        <span class="comment">//method2(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public E getFirst()返回此列表中的第一个元素</span></span><br><span class="line"><span class="comment">//        public E getLast()返回此列表中的最后一个元素</span></span><br><span class="line">        <span class="comment">//method3(list);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        public E removeFirst()从此列表中删除并返回第一个元素</span></span><br><span class="line"><span class="comment">//        public E removeLast()从此列表中删除并返回最后一个元素</span></span><br><span class="line">        <span class="comment">//method4(list);</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">(LinkedList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> list.removeFirst();</span><br><span class="line">        System.out.println(first);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> list.removeLast();</span><br><span class="line">        System.out.println(last);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(LinkedList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> list.getFirst();</span><br><span class="line">        <span class="type">String</span> <span class="variable">last</span> <span class="operator">=</span> list.getLast();</span><br><span class="line">        System.out.println(first);</span><br><span class="line">        System.out.println(last);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(LinkedList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.addLast(<span class="string">&quot;www&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(LinkedList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.addFirst(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-List实现类源码分析"><a href="#4-List实现类源码分析" class="headerlink" title="4. List实现类源码分析"></a>4. List实现类源码分析</h2><h3 id="4-1-ArrayList源码分析："><a href="#4-1-ArrayList源码分析：" class="headerlink" title="4.1 ArrayList源码分析："></a>4.1 ArrayList源码分析：</h3><p>核心步骤：</p><ol><li><p>创建ArrayList对象的时候，他在底层先创建了一个长度为0的数组。</p><p>数组名字：elementDate，定义变量size。</p><p>size这个变量有两层含义：<br>①：元素的个数，也就是集合的长度<br>②：下一个元素的存入位置</p></li><li><p>添加元素，添加完毕后，size++</p></li></ol><p>扩容时机一：</p><ol><li>当存满时候，会创建一个新的数组，新数组的长度，是原来的1.5倍，也就是长度为15.再把所有的元素，全拷贝到新数组中。如果继续添加数据，这个长度为15的数组也满了，那么下次还会继续扩容，还是1.5倍。</li></ol><p>扩容时机二：</p><ol><li><p>一次性添加多个数据，扩容1.5倍不够，怎么办呀？</p><p>如果一次添加多个元素，1.5倍放不下，那么新创建数组的长度以实际为准。</p></li></ol><p>举个例子：<br>在一开始，如果默认的长度为10的数组已经装满了，在装满的情况下，我一次性要添加100个数据很显然，10扩容1.5倍，变成15，还是不够，</p><p>怎么办？</p><p>此时新数组的长度，就以实际情况为准，就是110</p><p>具体分析过程可以参见视频讲解。</p><p><strong>添加一个元素时的扩容：</strong></p><p><img src="\images\img\第一次添加数据.png" alt="第一次添加数据"  /></p><p><strong>添加多个元素时的扩容：</strong></p><p><img src="\images\img\第11次添加数据.png" alt="第11次添加数据"></p><h3 id="4-2-LinkedList源码分析："><a href="#4-2-LinkedList源码分析：" class="headerlink" title="4.2 LinkedList源码分析："></a>4.2 LinkedList源码分析：</h3><p>底层是双向链表结构</p><p>核心步骤如下：</p><ol><li>刚开始创建的时候，底层创建了两个变量：一个记录头结点first，一个记录尾结点last，默认为null</li><li>添加第一个元素时，底层创建一个结点对象，first和last都记录这个结点的地址值</li><li>添加第二个元素时，底层创建一个结点对象，第一个结点会记录第二个结点的地址值，last会记录新结点的地址值</li></ol><p>具体分析过程可以参见视频讲解。</p><p><img src="\images\img\LinkedList源码分析.png" alt="LinkedList源码分析"></p><h3 id="4-3-迭代器源码分析："><a href="#4-3-迭代器源码分析：" class="headerlink" title="4.3 迭代器源码分析："></a>4.3 迭代器源码分析：</h3><p>迭代器遍历相关的三个方法：</p><ul><li><p>Iterator<E> iterator()  ：获取一个迭代器对象</p></li><li><p>boolean hasNext()       ：判断当前指向的位置是否有元素</p></li><li><p>E next()                ：获取当前指向的元素并移动指针</p></li></ul><p><img src="images\img\迭代器源码分析.png" alt="迭代器源码分析"></p><hr><h2 id="5-Set集合"><a href="#5-Set集合" class="headerlink" title="5.Set集合"></a>5.Set集合</h2><p><strong>无序、不重复、无索引</strong></p><h3 id="2-1Set集合概述和特点"><a href="#2-1Set集合概述和特点" class="headerlink" title="2.1Set集合概述和特点"></a>2.1Set集合概述和特点</h3><ul><li>不可以存储重复元素</li><li>没有索引,不能使用普通for循环遍历</li></ul><h3 id="2-2Set集合的使用"><a href="#2-2Set集合的使用" class="headerlink" title="2.2Set集合的使用"></a>2.2Set集合的使用</h3><p>存储字符串并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySet1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//创建集合对象</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; set.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">//            //Set集合是没有索引的，所以不能使用通过索引获取元素的方法</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//遍历集合</span></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-TreeSet集合"><a href="#6-TreeSet集合" class="headerlink" title="6.TreeSet集合"></a>6.TreeSet集合</h2><p><strong>底层红黑树的数据结构实现排序</strong></p><ul><li><p>数值类型：从小到大</p></li><li><p>字符、字符串类型：按照ASCII码表中的数字升序排序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串是按照先首字母，首字母如果相同就按照第二个字母</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-1TreeSet集合概述和特点"><a href="#6-1TreeSet集合概述和特点" class="headerlink" title="6.1TreeSet集合概述和特点"></a>6.1TreeSet集合概述和特点</h3><ul><li>不可以存储重复元素</li><li>没有索引</li><li>可以将元素按照规则进行排序<ul><li>TreeSet()：根据其元素的自然排序进行排序</li><li>TreeSet(Comparator comparator) ：根据指定的比较器进行排序</li></ul></li></ul><h3 id="6-2TreeSet集合基本使用"><a href="#6-2TreeSet集合基本使用" class="headerlink" title="6.2TreeSet集合基本使用"></a>6.2TreeSet集合基本使用</h3><p>存储Integer类型的整数并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        ts.add(<span class="number">10</span>);</span><br><span class="line">        ts.add(<span class="number">40</span>);</span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line">        ts.add(<span class="number">50</span>);</span><br><span class="line">        ts.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : ts) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3自然排序Comparable的使用"><a href="#6-3自然排序Comparable的使用" class="headerlink" title="6.3自然排序Comparable的使用"></a>6.3自然排序Comparable的使用</h3><p><img src="E:\JAVA\笔记\JAVASE\images\img\默认排序Comparable使用.png" alt="image-20240413121537329"></p><ul><li><p>案例需求</p><ul><li>存储学生对象并遍历，创建TreeSet集合使用无参构造方法</li><li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li></ul></li><li><p>实现步骤</p><ol><li>使用空参构造创建TreeSet集合<ul><li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li></ul></li><li>自定义的Student类实现Comparable接口<ul><li>自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(T o)方法</li></ul></li><li>重写接口中的compareTo方法<ul><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul></li></ol></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">//按照对象的年龄进行排序</span></span><br><span class="line">        <span class="comment">//主要判断条件: 按照年龄从小到大排序</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.age - o.age;</span><br><span class="line">        <span class="comment">//次要判断条件: 年龄相同时，按照姓名的字母顺序排序</span></span><br><span class="line">        result = result == <span class="number">0</span> ? <span class="built_in">this</span>.name.compareTo(o.getName()) : result;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTreeSet2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">28</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">27</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">29</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhaoliu&quot;</span>,<span class="number">28</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;qianqi&quot;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">//把学生添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student student : ts) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-4比较器排序Comparator的使用"><a href="#6-4比较器排序Comparator的使用" class="headerlink" title="6.4比较器排序Comparator的使用"></a>6.4比较器排序Comparator的使用</h3><ul><li><p>案例需求</p><ul><li>存储老师对象并遍历，创建TreeSet集合使用带参构造方法</li><li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li></ul></li><li><p>实现步骤</p><ul><li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li><li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul></li><li><p>代码实现</p><p>老师类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTreeSet4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Teacher&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Teacher&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Teacher o1, Teacher o2)</span> &#123;</span><br><span class="line">                <span class="comment">//o1表示现在要存入的那个元素</span></span><br><span class="line">                <span class="comment">//o2表示已经存入到集合中的元素</span></span><br><span class="line">              </span><br><span class="line">                <span class="comment">//主要条件</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                result = result == <span class="number">0</span> ? o1.getName().compareTo(o2.getName()) : result;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//创建老师对象</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;zhaoliu&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="comment">//把老师添加到集合</span></span><br><span class="line">        ts.add(t1);</span><br><span class="line">        ts.add(t2);</span><br><span class="line">        ts.add(t3);</span><br><span class="line">        ts.add(t4);</span><br><span class="line"><span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Teacher teacher : ts) &#123;</span><br><span class="line">            System.out.println(teacher);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-5两种比较方式总结"><a href="#6-5两种比较方式总结" class="headerlink" title="6.5两种比较方式总结"></a>6.5两种比较方式总结</h3><ul><li>两种比较方式小结<ul><li>自然排序: 自定义类实现Comparable接口,重写compareTo方法,根据返回值进行排序</li><li>比较器排序: 创建TreeSet对象的时候传递Comparator的实现类对象,重写compare方法,根据返回值进行排序</li><li>在使用的时候,默认使用自然排序,当自然排序不满足现在的需求时,必须使用比较器排序</li></ul></li><li>两种方式中关于返回值的规则<ul><li>如果返回值为负数，表示当前存入的元素是较小值，存左边</li><li>如果返回值为0，表示当前存入的元素跟集合中元素重复了，不存</li><li>如果返回值为正数，表示当前存入的元素是较大值，存右边</li></ul></li></ul><h2 id="7-HashSet集合"><a href="#7-HashSet集合" class="headerlink" title="7.HashSet集合"></a>7.HashSet集合</h2><h3 id="7-1HashSet集合概述和特点"><a href="#7-1HashSet集合概述和特点" class="headerlink" title="7.1HashSet集合概述和特点"></a>7.1HashSet集合概述和特点</h3><ul><li>底层数据结构是哈希表</li><li>存取无序</li><li>不可以存储重复元素</li><li>没有索引,不能使用普通for循环遍历</li></ul><h3 id="7-2HashSet集合的基本应用"><a href="#7-2HashSet集合的基本应用" class="headerlink" title="7.2HashSet集合的基本应用"></a>7.2HashSet集合的基本应用</h3><p>存储字符串并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//不包含重复元素的集合</span></span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3哈希值"><a href="#7-3哈希值" class="headerlink" title="7.3哈希值"></a>7.3哈希值</h3><ul><li><p>哈希值简介</p><p>​    是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</p></li><li><p>如何获取哈希值</p><p>​    Object类中的public int hashCode()：返回对象的哈希码值</p></li><li><p>哈希值的特点</p><ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li><li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li></ul></li></ul><h3 id="7-4哈希表结构"><a href="#7-4哈希表结构" class="headerlink" title="7.4哈希表结构"></a>7.4哈希表结构</h3><ul><li><p>JDK1.8以前</p><p>​    数组 + 链表</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="keyword">index</span> = （数组长度 - <span class="number">1</span>） &amp; 哈希值;</span><br><span class="line"></span><br><span class="line">新元素存入数组，老元素挂再新元素下面</span><br></pre></td></tr></table></figure><p><img src="images\img\14_JKD8以前哈希表.png" alt="14_JKD8以前哈希表"></p></li><li><p>JDK1.8以后</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">新元素直接挂在老元素下面</span><br><span class="line"></span><br><span class="line">加载因子是哈希的扩容机制 <span class="number">16</span> * <span class="number">0.75</span> <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">当链表长度大于<span class="number">8</span>而且数组长度大于<span class="number">64</span>时候链表会自动转成红黑树</span><br><span class="line">从Java <span class="number">11</span>开始，这个阈值增加到了<span class="number">16</span>。需要注意的是，这个阈值是指同一个槽位中的元素数量，而不是 HashMap 中的总元素数量。</span><br></pre></td></tr></table></figure><ul><li><p>节点个数少于等于8个</p><p>​    数组 + 链表</p></li><li><p>节点个数多于8个</p><p>​    数组 + 红黑树</p></li></ul><p><img src="images\img\15_JKD8以后哈希表.png" alt="15_JKD8以后哈希表"></p></li></ul><h3 id="7-5HashSet集合存储学生对象并遍历"><a href="#7-5HashSet集合存储学生对象并遍历" class="headerlink" title="7.5HashSet集合存储学生对象并遍历"></a>7.5HashSet集合存储学生对象并遍历</h3><ul><li><p>案例需求</p><ul><li>创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</li><li>要求：学生对象的成员变量值相同，我们就认为是同一个对象</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(student.name) : student.name == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;Student&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hs.add(s1);</span><br><span class="line">        hs.add(s2);</span><br><span class="line">        hs.add(s3);</span><br><span class="line">        hs.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合(增强for)</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : hs) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总结</p><p>​    HashSet集合存储自定义类型元素,要想实现元素的唯一,要求必须重写hashCode方法和equals方法</p></li></ul><h2 id="8-LinkedHashSet"><a href="#8-LinkedHashSet" class="headerlink" title="8.LinkedHashSet"></a>8.LinkedHashSet</h2><ul><li><p><strong>有序、不重复、无索引</strong></p></li><li><p><strong>父类是HashSet</strong></p></li><li><strong>原理：底层是哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序</strong></li><li><strong>当添加元素的时候，添加第二个元素的时候会记录第一个数据的地址值</strong></li></ul><p><img src="E:\JAVA\笔记\JAVASE\images\img\LinkedHashSet.png" alt="LinkedHashSet.png"></p><h2 id="9-star-使用场景"><a href="#9-star-使用场景" class="headerlink" title="9. :star: 使用场景"></a>9. :star: 使用场景</h2><p><strong>如果想要集合中的元素可重复</strong></p><ul><li>使用ArrayList集合，基于数组的</li></ul><p>==<strong>如果想要集合中的元素可重复，而且当前的增删操作明显多于查询</strong>==</p><ul><li>使用LinkedList集合，基于链表的</li></ul><p>==<strong>如果想要对集合中的元素去重</strong>==</p><ul><li>使用HashSet集合，基于哈希表</li></ul><p>==<strong>如果相对集合中的元素去重，而且保证存取顺序</strong>==</p><ul><li>使用LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet</li></ul><p>==<strong>如果想对集合中的元素进行排序</strong>==</p><ul><li>使用TreeSet集合，基于红黑树。后续也可以使用List集合实现排序</li></ul><hr><hr><h1 id="二、双列集合"><a href="#二、双列集合" class="headerlink" title="二、双列集合"></a>二、双列集合</h1><p><strong>双列集合的特点</strong></p><ul><li>双列集合一次需要存一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键 + 值这个整体 我们称为“键值对” 或 “键值对对象”，在Java中称为 “Entry对象”</li></ul><h2 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1.Map集合"></a>1.Map集合</h2><h3 id="1-1Map集合概述和特点"><a href="#1-1Map集合概述和特点" class="headerlink" title="1.1Map集合概述和特点"></a>1.1Map集合概述和特点</h3><ul><li><p>Map集合概述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K,V&gt;  K：键的类型；V：值的类型</span><br></pre></td></tr></table></figure></li><li><p>Map集合的特点</p><ul><li>双列集合,一个键对应一个值</li><li>键不可以重复,值可以重复</li></ul></li><li><p>Map集合的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span></span><br><span class="line">        map.put(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2Map集合的基本功能"><a href="#1-2Map集合的基本功能" class="headerlink" title="1.2Map集合的基本功能"></a>1.2Map集合的基本功能</h3><ul><li><p>方法介绍</p><p>| 方法名                              | 说明                                                         |<br>| —————————————————- | —————————————————————————————— |<br>| V   put(K key,V   value)            | 添加元素，并且当数据被覆盖时候会返回被覆盖的数据value，如果是第一次添加则返回null，所以存在 <strong>添加</strong> 和 <strong>覆盖</strong> 操作 |<br>| V   remove(Object key)              | 根据键删除键值对元素                                         |<br>| void   clear()                      | 移除所有的键值对元素                                         |<br>| boolean containsKey(Object key)     | 判断集合是否包含指定的键                                     |<br>| boolean containsValue(Object value) | 判断集合是否包含指定的值                                     |<br>| boolean isEmpty()                   | 判断集合是否为空                                             |<br>| int size()                          | 集合的长度，也就是集合中键值对的个数                         |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key,V value)：添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>,<span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>,<span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V remove(Object key)：根据键删除键值对元素</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void clear()：移除所有的键值对元素</span></span><br><span class="line"><span class="comment">//        map.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：判断集合是否包含指定的键</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean isEmpty()：判断集合是否为空</span></span><br><span class="line"><span class="comment">//        System.out.println(map.isEmpty());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：集合的长度，也就是集合中键值对的个数</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3Map集合的获取功能"><a href="#1-3Map集合的获取功能" class="headerlink" title="1.3Map集合的获取功能"></a>1.3Map集合的获取功能</h3><ul><li><p>方法介绍</p><p>| 方法名                           | 说明                     |<br>| ———————————————— | ———————————— |<br>| V   get(Object key)              | 根据键获取值             |<br>| Set<K>   keySet()                | 获取所有键的集合         |<br>| Collection<V>   values()         | 获取所有值的集合         |<br>| Set<Map.Entry<K,V>&gt;   entrySet() | 获取所有键值对对象的集合 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V get(Object key):根据键获取值</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张无忌&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张三丰&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;K&gt; keySet():获取所有键的集合</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; keySet = map.keySet();</span></span><br><span class="line"><span class="comment">//        for(String key : keySet) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collection&lt;V&gt; values():获取所有值的集合</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(String value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4Map集合的遍历-方式1"><a href="#1-4Map集合的遍历-方式1" class="headerlink" title="1.4Map集合的遍历(方式1)"></a>1.4Map集合的遍历(方式1)</h3><ul><li><p>遍历思路</p><ul><li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul><li>把所有的丈夫给集中起来</li><li>遍历丈夫的集合，获取到每一个丈夫</li><li>根据丈夫去找对应的妻子</li></ul></li></ul></li><li><p>步骤分析</p><ul><li>获取所有键的集合。用keySet()方法实现</li><li>遍历键的集合，获取到每一个键。用增强for实现  </li><li>根据键去找值。用get(Object key)方法实现</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键的集合。用keySet()方法实现</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="comment">//遍历键的集合，获取到每一个键。用增强for实现</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//根据键去找值。用get(Object key)方法实现</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-5Map集合的遍历-方式2"><a href="#1-5Map集合的遍历-方式2" class="headerlink" title="1.5Map集合的遍历(方式2)"></a>1.5Map集合的遍历(方式2)</h3><ul><li><p>遍历思路</p><ul><li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul><li>获取所有结婚证的集合</li><li>遍历结婚证的集合，得到每一个结婚证</li><li>根据结婚证获取丈夫和妻子</li></ul></li></ul></li><li><p>步骤分析</p><ul><li>获取所有键值对对象的集合<ul><li>Set<Map.Entry<K,V>&gt; entrySet()：获取所有键值对对象的集合</li></ul></li><li>遍历键值对对象的集合，得到每一个键值对对象<ul><li>用增强for实现，得到每一个Map.Entry</li></ul></li><li>根据键值对对象获取键和值<ul><li>用getKey()得到键</li><li>用getValue()得到值</li></ul></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键值对对象的集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="comment">//遍历键值对对象的集合，得到每一个键值对对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;</span><br><span class="line">            <span class="comment">//根据键值对对象获取键和值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> me.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> me.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-HashMap集合"><a href="#2-HashMap集合" class="headerlink" title="2.HashMap集合"></a>2.HashMap集合</h2><p><strong>键：无序、不重复、无索引</strong></p><h3 id="2-1HashMap集合概述和特点"><a href="#2-1HashMap集合概述和特点" class="headerlink" title="2.1HashMap集合概述和特点"></a>2.1HashMap集合概述和特点</h3><ul><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li>如果键要存储的是自定义对象，需要重写hashCode和equals方法</li></ul><h3 id="2-2HashMap集合应用案例"><a href="#2-2HashMap集合应用案例" class="headerlink" title="2.2HashMap集合应用案例"></a>2.2HashMap集合应用案例</h3><ul><li><p>案例需求</p><ul><li>创建一个HashMap集合，键是学生对象(Student)，值是居住地 (String)。存储多个元素，并遍历。</li><li>要求保证键的唯一性：如果学生对象的成员变量值相同，我们就认为是同一个对象</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="literal">null</span> ? name.equals(student.name) : student.name == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> name != <span class="literal">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        HashMap&lt;Student, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Student, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hm.put(s1, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        hm.put(s2, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        hm.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">        hm.put(s4, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Student&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keySet) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> hm.get(key);</span><br><span class="line">            System.out.println(key.getName() + <span class="string">&quot;,&quot;</span> + key.getAge() + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3HashMap综合案例"><a href="#2-3HashMap综合案例" class="headerlink" title="2.3HashMap综合案例"></a>2.3HashMap综合案例</h3><p>现在需要统计A、B、C、D景点最喜欢的人数，并给出最最喜欢的景点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.hashmap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">80</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            list.add(arr[index]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hm.containsKey(s)) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> hm.get(s);</span><br><span class="line">                count++;</span><br><span class="line">                hm.put(s, count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hm.put(s, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(hm);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loveSport</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = hm.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">love</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">                loveSport = love;</span><br><span class="line">                max = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;最喜欢的景点: &quot;</span> + loveSport + <span class="string">&quot;, 人数: &quot;</span> + max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-LinkedHashMap"><a href="#3-LinkedHashMap" class="headerlink" title="3.LinkedHashMap"></a>3.LinkedHashMap</h2><ul><li><strong>由键决定：有序、不重复、无索引</strong></li><li><strong>这里的有序指的是保证存储和取出的元素顺序一致</strong></li><li><strong>原理：底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序</strong></li></ul><h2 id="4-TreeMap集合"><a href="#4-TreeMap集合" class="headerlink" title="4.TreeMap集合"></a>4.TreeMap集合</h2><h3 id="4-1TreeMap集合概述和特点"><a href="#4-1TreeMap集合概述和特点" class="headerlink" title="4.1TreeMap集合概述和特点"></a>4.1TreeMap集合概述和特点</h3><ul><li>TreeMap底层是红黑树结构</li><li>依赖自然排序或者比较器排序,对键进行排序</li><li>如果键存储的是自定义对象,需要实现Comparable接口或者在创建TreeMap对象时候给出比较器排序规则</li></ul><h3 id="4-2TreeMap集合应用案例"><a href="#4-2TreeMap集合应用案例" class="headerlink" title="4.2TreeMap集合应用案例"></a>4.2TreeMap集合应用案例</h3><ul><li><p>案例需求</p><ul><li>创建一个TreeMap集合,键是学生对象(Student),值是籍贯(String),学生属性姓名和年龄,按照年龄进行排序并遍历</li><li>要求按照学生的年龄进行排序,如果年龄相同则按照姓名进行排序</li></ul></li><li><p>代码实现</p><p>学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">//按照年龄进行排序</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> o.getAge() - <span class="built_in">this</span>.getAge();</span><br><span class="line">        <span class="comment">//次要条件，按照姓名排序。</span></span><br><span class="line">        result = result == <span class="number">0</span> ? o.getName().compareTo(<span class="built_in">this</span>.getName()) : result;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建TreeMap集合对象</span></span><br><span class="line">        TreeMap&lt;Student,String&gt; tm = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xiaohei&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;dapang&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;xiaomei&quot;</span>,<span class="number">22</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 将学生对象添加到TreeMap集合中</span></span><br><span class="line">        tm.put(s1,<span class="string">&quot;江苏&quot;</span>);</span><br><span class="line">        tm.put(s2,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        tm.put(s3,<span class="string">&quot;天津&quot;</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 遍历TreeMap集合,打印每个学生的信息</span></span><br><span class="line">        tm.forEach(</span><br><span class="line">                (Student key, String value)-&gt;&#123;</span><br><span class="line">                    System.out.println(key + <span class="string">&quot;---&quot;</span> + value);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-star2-双列集合底层原理"><a href="#5-star2-双列集合底层原理" class="headerlink" title="5. :star2: 双列集合底层原理"></a>5. :star2: 双列集合底层原理</h2><h3 id="5-1-star-HashMap"><a href="#5-1-star-HashMap" class="headerlink" title="5.1 :star: HashMap"></a>5.1 :star: HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>看源码之前需要了解的一些内容</span><br><span class="line"></span><br><span class="line">Node&lt;K,V&gt;[] table   哈希表结构中数组的名字，存放地址值</span><br><span class="line"></span><br><span class="line">DEFAULT_INITIAL_CAPACITY：   数组默认长度<span class="number">16</span></span><br><span class="line"></span><br><span class="line">DEFAULT_LOAD_FACTOR：        默认加载因子<span class="number">0.75</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashMap里面每一个对象包含以下内容：</span><br><span class="line"><span class="number">1.1</span> 链表中的键值对对象</span><br><span class="line">    包含：  </span><br><span class="line"><span class="type">int</span> hash;         <span class="comment">//键的哈希值</span></span><br><span class="line">            <span class="keyword">final</span> K key;      <span class="comment">//键</span></span><br><span class="line">            V value;          <span class="comment">//值</span></span><br><span class="line">            Node&lt;K,V&gt; next;   <span class="comment">//下一个节点的地址值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.2</span> 红黑树中的键值对对象</span><br><span class="line">包含：</span><br><span class="line"><span class="type">int</span> hash;         <span class="comment">//键的哈希值</span></span><br><span class="line">            <span class="keyword">final</span> K key;      <span class="comment">//键</span></span><br><span class="line">            V value;          <span class="comment">//值</span></span><br><span class="line">            TreeNode&lt;K,V&gt; parent;  <span class="comment">//父节点的地址值</span></span><br><span class="line">TreeNode&lt;K,V&gt; left;<span class="comment">//左子节点的地址值</span></span><br><span class="line">TreeNode&lt;K,V&gt; right;<span class="comment">//右子节点的地址值</span></span><br><span class="line"><span class="type">boolean</span> red;<span class="comment">//节点的颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>添加元素</span><br><span class="line">HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hm.put(<span class="string">&quot;aaa&quot;</span> , <span class="number">111</span>);</span><br><span class="line">hm.put(<span class="string">&quot;bbb&quot;</span> , <span class="number">222</span>);</span><br><span class="line">hm.put(<span class="string">&quot;ccc&quot;</span> , <span class="number">333</span>);</span><br><span class="line">hm.put(<span class="string">&quot;ddd&quot;</span> , <span class="number">444</span>);</span><br><span class="line">hm.put(<span class="string">&quot;eee&quot;</span> , <span class="number">555</span>);</span><br><span class="line"></span><br><span class="line">添加元素的时候至少考虑三种情况：</span><br><span class="line"><span class="number">2.1</span>数组位置为<span class="literal">null</span></span><br><span class="line"><span class="number">2.2</span>数组位置不为<span class="literal">null</span>，键不重复，挂在下面形成链表或者红黑树</span><br><span class="line"><span class="number">2.3</span>数组位置不为<span class="literal">null</span>，键重复，元素覆盖</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数一：键</span></span><br><span class="line"><span class="comment">//参数二：值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：被覆盖元素的值，如果没有覆盖，返回null</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用键计算出对应的哈希值，再把哈希值进行一些额外的处理</span></span><br><span class="line"><span class="comment">//简单理解：返回值就是返回键的哈希值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数一：键的哈希值</span></span><br><span class="line"><span class="comment">//参数二：键</span></span><br><span class="line"><span class="comment">//参数三：值</span></span><br><span class="line"><span class="comment">//参数四：如果键重复了是否保留</span></span><br><span class="line"><span class="comment">//   true，表示老元素的值保留，不会覆盖</span></span><br><span class="line"><span class="comment">//   false，表示老元素的值不保留，会进行覆盖</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个局部变量，用来记录哈希表中数组的地址值。</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line"></span><br><span class="line"><span class="comment">//临时的第三方变量，用来记录键值对对象的地址值</span></span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//表示当前数组的长度</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示索引</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把哈希表中数组的地址值，赋值给局部变量tab</span></span><br><span class="line">tab = table;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//1.如果当前是第一次添加数据，底层会创建一个默认长度为16，加载因子为0.75的数组</span></span><br><span class="line"><span class="comment">//2.如果不是第一次添加数据，会看数组中的元素是否达到了扩容的条件</span></span><br><span class="line"><span class="comment">//如果没有达到扩容条件，底层不会做任何操作</span></span><br><span class="line"><span class="comment">//如果达到了扩容条件，底层会把数组扩容为原先的两倍，并把数据全部转移到新的哈希表中</span></span><br><span class="line">tab = resize();</span><br><span class="line"><span class="comment">//表示把当前数组的长度赋值给n</span></span><br><span class="line">            n = tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿着数组的长度跟键的哈希值进行计算，计算出当前键值对对象，在数组中应存入的位置</span></span><br><span class="line">i = (n - <span class="number">1</span>) &amp; hash;<span class="comment">//index</span></span><br><span class="line"><span class="comment">//获取数组中对应元素的数据</span></span><br><span class="line">p = tab[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//底层会创建一个键值对对象，直接放到数组当中</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等号的左边：数组中键值对的哈希值</span></span><br><span class="line"><span class="comment">//等号的右边：当前要添加键值对的哈希值</span></span><br><span class="line"><span class="comment">//如果键不一样，此时返回false</span></span><br><span class="line"><span class="comment">//如果键一样，返回true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> p.hash == hash;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b1 &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))&#123;</span><br><span class="line">                e = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)&#123;</span><br><span class="line"><span class="comment">//判断数组中获取出来的键值对是不是红黑树中的节点</span></span><br><span class="line"><span class="comment">//如果是，则调用方法putTreeVal，把当前的节点按照红黑树的规则添加到树当中。</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果从数组中获取出来的键值对不是红黑树中的节点</span></span><br><span class="line"><span class="comment">//表示此时下面挂的是链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//此时就会创建一个新的节点，挂在下面形成链表</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//判断当前链表长度是否超过8，如果超过8，就会调用方法treeifyBin</span></span><br><span class="line"><span class="comment">//treeifyBin方法的底层还会继续判断</span></span><br><span class="line"><span class="comment">//判断数组的长度是否大于等于64</span></span><br><span class="line"><span class="comment">//如果同时满足这两个条件，就会把这个链表转成红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">//e：  0x0044  ddd  444</span></span><br><span class="line"><span class="comment">//要添加的元素： 0x0055   ddd   555</span></span><br><span class="line"><span class="comment">//如果哈希值一样，就会调用equals方法比较内部的属性值是否相同</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))&#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果e为null，表示当前不需要覆盖任何元素</span></span><br><span class="line"><span class="comment">//如果e不为null，表示当前的键是一样的，值会被覆盖</span></span><br><span class="line"><span class="comment">//e:0x0044  ddd  555</span></span><br><span class="line"><span class="comment">//要添加的元素： 0x0055   ddd   555</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等号的右边：当前要添加的值</span></span><br><span class="line"><span class="comment">//等号的左边：0x0044的值</span></span><br><span class="line">e.value = value;</span><br><span class="line">&#125;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//threshold：记录的就是数组的长度 * 0.75，哈希表的扩容时机  16 * 0.75 = 12</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)&#123;</span><br><span class="line"> resize();</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//表示当前没有覆盖任何元素，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-star-TreeMap"><a href="#5-2-star-TreeMap" class="headerlink" title="5.2 :star: TreeMap"></a>5.2 :star: TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>TreeMap中每一个节点的内部属性</span><br><span class="line">K key;             <span class="comment">//键</span></span><br><span class="line">V value;            <span class="comment">//值</span></span><br><span class="line">Entry&lt;K,V&gt; left;      <span class="comment">//左子节点</span></span><br><span class="line">Entry&lt;K,V&gt; right;     <span class="comment">//右子节点</span></span><br><span class="line">Entry&lt;K,V&gt; parent;    <span class="comment">//父节点</span></span><br><span class="line"><span class="type">boolean</span> color;       <span class="comment">//节点的颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>TreeMap类中中要知道的一些成员变量</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//比较器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//集合的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>空参构造</span><br><span class="line">   <span class="comment">//空参构造就是没有传递比较器对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span>带参构造</span><br><span class="line">   <span class="comment">//带参构造就是传递了比较器对象。</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="number">5.</span>添加元素</span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> put(key, value, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">参数一：键</span><br><span class="line">参数二：值</span><br><span class="line">参数三：当键重复的时候，是否需要覆盖值</span><br><span class="line">      <span class="literal">true</span>：覆盖</span><br><span class="line">      <span class="literal">false</span>：不覆盖</span><br><span class="line">      </span><br><span class="line">   <span class="keyword">private</span> V <span class="title function_">put</span><span class="params">(K key, V value, <span class="type">boolean</span> replaceOld)</span> &#123;</span><br><span class="line">      <span class="comment">//获取根节点的地址值，赋值给局部变量t</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">      <span class="comment">//判断根节点是否为null</span></span><br><span class="line">      <span class="comment">//如果为null，表示当前是第一次添加，会把当前要添加的元素，当做根节点</span></span><br><span class="line">      <span class="comment">//如果不为null，表示当前不是第一次添加，跳过这个判断继续执行下面的代码</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">//方法的底层，会创建一个Entry对象，把他当做根节点</span></span><br><span class="line">            addEntryToEmptyMap(key, value);</span><br><span class="line">         <span class="comment">//表示此时没有覆盖任何的元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//表示两个元素的键比较之后的结果</span></span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">      <span class="comment">//表示当前要添加节点的父节点</span></span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//表示当前的比较规则</span></span><br><span class="line">      <span class="comment">//如果我们是采取默认的自然排序，那么此时comparator记录的是null，cpr记录的也是null</span></span><br><span class="line">      <span class="comment">//如果我们是采取比较去排序方式，那么此时comparator记录的是就是比较器</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">      <span class="comment">//表示判断当前是否有比较器对象</span></span><br><span class="line">      <span class="comment">//如果传递了比较器对象，就执行if里面的代码，此时以比较器的规则为准</span></span><br><span class="line">      <span class="comment">//如果没有传递比较器对象，就执行else里面的代码，此时以自然排序的规则为准</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> t.value;</span><br><span class="line">                    <span class="keyword">if</span> (replaceOld || oldValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.value = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> oldValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//把键进行强转，强转成Comparable类型的</span></span><br><span class="line">         <span class="comment">//要求：键必须要实现Comparable接口，如果没有实现这个接口</span></span><br><span class="line">         <span class="comment">//此时在强转的时候，就会报错。</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//把根节点当做当前节点的父节点</span></span><br><span class="line">                parent = t;</span><br><span class="line">            <span class="comment">//调用compareTo方法，比较根节点和当前要添加节点的大小关系</span></span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="comment">//如果比较的结果为负数</span></span><br><span class="line">               <span class="comment">//那么继续到根节点的左边去找</span></span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">               <span class="comment">//如果比较的结果为正数</span></span><br><span class="line">               <span class="comment">//那么继续到根节点的右边去找</span></span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果比较的结果为0，会覆盖</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> t.value;</span><br><span class="line">                    <span class="keyword">if</span> (replaceOld || oldValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                        t.value = value;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> oldValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//就会把当前节点按照指定的规则进行添加</span></span><br><span class="line">        addEntry(key, value, parent, cmp &lt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(K key, V value, Entry&lt;K, V&gt; parent, <span class="type">boolean</span> addToLeft)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (addToLeft)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">      <span class="comment">//添加完毕之后，需要按照红黑树的规则进行调整</span></span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">      <span class="comment">//因为红黑树的节点默认就是红色的</span></span><br><span class="line">        x.color = RED;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//按照红黑规则进行调整</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//parentOf:获取x的父节点</span></span><br><span class="line">      <span class="comment">//parentOf(parentOf(x)):获取x的爷爷节点</span></span><br><span class="line">      <span class="comment">//leftOf:获取左子节点</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">//判断当前节点的父节点是爷爷节点的左子节点还是右子节点</span></span><br><span class="line">         <span class="comment">//目的：为了获取当前节点的叔叔节点</span></span><br><span class="line">            <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">            <span class="comment">//表示当前节点的父节点是爷爷节点的左子节点</span></span><br><span class="line">            <span class="comment">//那么下面就可以用rightOf获取到当前节点的叔叔节点</span></span><br><span class="line">                Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">               <span class="comment">//叔叔节点为红色的处理方案</span></span><br><span class="line">               </span><br><span class="line">               <span class="comment">//把父节点设置为黑色</span></span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">               <span class="comment">//把叔叔节点设置为黑色</span></span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">               <span class="comment">//把爷爷节点设置为红色</span></span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">//把爷爷节点设置为当前节点</span></span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">//叔叔节点为黑色的处理方案</span></span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">               <span class="comment">//表示判断当前节点是否为父节点的右子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                  </span><br><span class="line">                  <span class="comment">//表示当前节点是父节点的右子节点</span></span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                  <span class="comment">//左旋</span></span><br><span class="line">                        rotateLeft(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateRight(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//表示当前节点的父节点是爷爷节点的右子节点</span></span><br><span class="line">            <span class="comment">//那么下面就可以用leftOf获取到当前节点的叔叔节点</span></span><br><span class="line">                Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateRight(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//把根节点设置为黑色</span></span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="number">6.</span>课堂思考问题：</span><br><span class="line"><span class="number">6.</span>1TreeMap添加元素的时候，键是否需要重写hashCode和equals方法？</span><br><span class="line">此时是不需要重写的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>2HashMap是哈希表结构的，JDK8开始由数组，链表，红黑树组成的。</span><br><span class="line">既然有红黑树，HashMap的键是否需要实现Compareable接口或者传递比较器对象呢？</span><br><span class="line">不需要的。</span><br><span class="line">因为在HashMap的底层，默认是利用哈希值的大小关系来创建红黑树的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>3TreeMap和HashMap谁的效率更高？</span><br><span class="line">如果是最坏情况，添加了<span class="number">8</span>个元素，这<span class="number">8</span>个元素形成了链表，此时TreeMap的效率要更高</span><br><span class="line">但是这种情况出现的几率非常的少。</span><br><span class="line">一般而言，还是HashMap的效率要更高。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.4</span>你觉得在Map集合中，java会提供一个如果键重复了，不会覆盖的put方法呢？</span><br><span class="line">此时putIfAbsent本身不重要。</span><br><span class="line">传递一个思想：</span><br><span class="line">   代码中的逻辑都有两面性，如果我们只知道了其中的A面，而且代码中还发现了有变量可以控制两面性的发生。</span><br><span class="line">   那么该逻辑一定会有B面。</span><br><span class="line">   </span><br><span class="line">   习惯：</span><br><span class="line">      <span class="type">boolean</span>类型的变量控制，一般只有AB两面，因为<span class="type">boolean</span>只有两个值</span><br><span class="line">      <span class="type">int</span>类型的变量控制，一般至少有三面，因为<span class="type">int</span>可以取多个值。</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.5</span>三种双列集合，以后如何选择？</span><br><span class="line">   HashMap LinkedHashMap TreeMap</span><br><span class="line">   </span><br><span class="line">   默认：HashMap（效率最高）</span><br><span class="line">   如果要保证存取有序：LinkedHashMap</span><br><span class="line">   如果要进行排序：TreeMap</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="6-Properties"><a href="#6-Properties" class="headerlink" title="6. Properties"></a>6. Properties</h2><p><strong>常用作配置文件properties，和IO操作有关，可以方便的读取和存储properties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">propertiesDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;222&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;333&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;444&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;io\\src\\all\\a.properties&quot;</span>);</span><br><span class="line">        prop.store(fos,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="三、集合嵌套"><a href="#三、集合嵌套" class="headerlink" title="三、集合嵌套"></a>三、集合嵌套</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, ArrayList&lt;String&gt;&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h1 id="四、不可变集合"><a href="#四、不可变集合" class="headerlink" title="四、不可变集合"></a>四、不可变集合</h1><p>不可以修改、添加、删除集合中的内容，只可以查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">Map.of()  -&gt; 不可以重复、键值对数量最多十个</span><br><span class="line">Map.ofEntries() -&gt; 键值对数量多个</span><br><span class="line">Set.of() -&gt; 元素不能重复    </span><br></pre></td></tr></table></figure><h2 id="1-1-什么是不可变集合"><a href="#1-1-什么是不可变集合" class="headerlink" title="1.1 什么是不可变集合"></a>1.1 什么是不可变集合</h2><p>​    是一个长度不可变，内容也无法修改的集合</p><h2 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h2><p>​    如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</p><p>​    当集合对象被不可信的库调用时，不可变形式是安全的。</p><p>简单理解：</p><p>​    不想让别人修改集合中的内容</p><p>比如说：</p><p>1，斗地主的54张牌，是不能添加，不能删除，不能修改的</p><p>2，斗地主的打牌规则：单张，对子，三张，顺子等，也是不能修改的</p><p>3，用代码获取的操作系统硬件信息，也是不能被修改的</p><h2 id="1-3-不可变集合分类"><a href="#1-3-不可变集合分类" class="headerlink" title="1.3 不可变集合分类"></a>1.3 不可变集合分类</h2><ul><li>不可变的list集合</li><li>不可变的set集合</li><li>不可变的map集合</li></ul><h2 id="1-4-不可变的list集合"><a href="#1-4-不可变的list集合" class="headerlink" title="1.4 不可变的list集合"></a>1.4 不可变的list集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            创建不可变的List集合</span></span><br><span class="line"><span class="comment">            &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(list.get(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list.remove(&quot;李四&quot;);</span></span><br><span class="line">        <span class="comment">//list.add(&quot;aaa&quot;);</span></span><br><span class="line">        list.set(<span class="number">0</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-不可变的Set集合"><a href="#1-5-不可变的Set集合" class="headerlink" title="1.5 不可变的Set集合"></a>1.5 不可变的Set集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           创建不可变的Set集合</span></span><br><span class="line"><span class="comment">           &quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;, &quot;赵六&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           细节：</span></span><br><span class="line"><span class="comment">                当我们要获取一个不可变的Set集合时，里面的参数一定要保证唯一性</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//set.remove(&quot;王五&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-不可变的Map集合"><a href="#1-6-不可变的Map集合" class="headerlink" title="1.6 不可变的Map集合"></a>1.6 不可变的Map集合</h2><h3 id="1-6-1：键值对个数小于等于10"><a href="#1-6-1：键值对个数小于等于10" class="headerlink" title="1.6.1：键值对个数小于等于10"></a>1.6.1：键值对个数小于等于10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建Map的不可变集合</span></span><br><span class="line"><span class="comment">            细节1：</span></span><br><span class="line"><span class="comment">                键是不能重复的</span></span><br><span class="line"><span class="comment">            细节2：</span></span><br><span class="line"><span class="comment">                Map里面的of方法，参数是有上限的，最多只能传递20个参数，10个键值对</span></span><br><span class="line"><span class="comment">            细节3：</span></span><br><span class="line"><span class="comment">                如果我们要传递多个键值对对象，数量大于10个，在Map接口中还有一个方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一旦创建完毕之后，是无法进行修改的，在下面的代码中，只能进行查询操作</span></span><br><span class="line">        Map&lt;String, String&gt; map = Map.of(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>,</span><br><span class="line">                <span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>,</span><br><span class="line">                <span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>, <span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>, <span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>,</span><br><span class="line">                <span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-2：键值对个数大于10"><a href="#1-6-2：键值对个数大于10" class="headerlink" title="1.6.2：键值对个数大于10"></a>1.6.2：键值对个数大于10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImmutableDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            创建Map的不可变集合,键值对的数量超过10个</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个普通的Map集合</span></span><br><span class="line">        HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hm.put(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;南京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;王五&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;赵六&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;孙七&quot;</span>, <span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;周八&quot;</span>, <span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;吴九&quot;</span>, <span class="string">&quot;宁波&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;郑十&quot;</span>, <span class="string">&quot;苏州&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;刘一&quot;</span>, <span class="string">&quot;无锡&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;陈二&quot;</span>, <span class="string">&quot;嘉兴&quot;</span>);</span><br><span class="line">        hm.put(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用上面的数据来获取一个不可变的集合</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        //获取到所有的键值对对象（Entry对象）</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = hm.entrySet();</span></span><br><span class="line"><span class="comment">        //把entries变成一个数组</span></span><br><span class="line"><span class="comment">        Map.Entry[] arr1 = new Map.Entry[0];</span></span><br><span class="line"><span class="comment">        //toArray方法在底层会比较集合的长度跟数组的长度两者的大小</span></span><br><span class="line"><span class="comment">        //如果集合的长度 &gt; 数组的长度 ：数据在数组中放不下，此时会根据实际数据的个数，重新创建数组</span></span><br><span class="line"><span class="comment">        //如果集合的长度 &lt;= 数组的长度：数据在数组中放的下，此时不会创建新的数组，而是直接用</span></span><br><span class="line"><span class="comment">        Map.Entry[] arr2 = entries.toArray(arr1);</span></span><br><span class="line"><span class="comment">        //不可变的map集合</span></span><br><span class="line"><span class="comment">        Map map = Map.ofEntries(arr2);</span></span><br><span class="line"><span class="comment">        map.put(&quot;bbb&quot;,&quot;222&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map&lt;Object, Object&gt; map = Map.ofEntries(hm.entrySet().toArray(new Map.Entry[0]));</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = Map.copyOf(hm);</span><br><span class="line">        map.put(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流 &amp;&amp; 方法引用</title>
      <link href="/posts/156ca839.html"/>
      <url>/posts/156ca839.html</url>
      
        <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><iframe src="//player.bilibili.com/player.html?aid=242580037&bvid=BV14e411x7Sh&cid=172706100&p=1&autoplay=0&mute=1"         scrolling="no"        border="0"         frameborder="no"         framespacing="0"         allowfullscreen="true"        width="100%"        height="500"        > </iframe><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EnumMap;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">UserState</span>&#123;</span><br><span class="line">        NORMAL(<span class="string">&quot;ADMIN&quot;</span>, <span class="number">1001</span>),</span><br><span class="line">        LOCKED(<span class="string">&quot;USER&quot;</span>, <span class="number">1002</span>),</span><br><span class="line">        DISABLE(<span class="string">&quot;OTHER&quot;</span>, <span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义属性值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String roleName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer stateCode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义构造方法</span></span><br><span class="line">        UserState(String roleName, Integer stateCode) &#123;</span><br><span class="line">            <span class="built_in">this</span>.roleName = roleName;</span><br><span class="line">            <span class="built_in">this</span>.stateCode = stateCode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义成员方法</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRoleName</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.roleName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1、为什么使用枚举</span></span><br><span class="line"><span class="comment">            使用枚举的地方会有更强的类型约束，编译器帮我们检查入参类型，规避潜在的风险</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2、枚举的常用方法</span></span><br><span class="line"><span class="comment">            ordinal 序数</span></span><br><span class="line"><span class="comment">            name 名称</span></span><br><span class="line"><span class="comment">            valueOf 根据字符获取枚举对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3、枚举的扩展</span></span><br><span class="line"><span class="comment">            在枚举类里面可以声明属性、构造函数、方法等</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        4、专用于枚举的集合类</span></span><br><span class="line"><span class="comment">            EnumSet\EnumMap</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        5、单例模式、策略模式</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">UserState</span> <span class="variable">normal</span> <span class="operator">=</span> UserState.NORMAL;</span><br><span class="line">        <span class="type">UserState</span> <span class="variable">locked</span> <span class="operator">=</span> UserState.LOCKED;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取在枚举中的相对位置</span></span><br><span class="line">        System.out.println(normal.ordinal());</span><br><span class="line">        System.out.println(locked.ordinal());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取枚举中的名字</span></span><br><span class="line">        System.out.println(normal.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个枚举对象</span></span><br><span class="line">        <span class="type">UserState</span> <span class="variable">normal1</span> <span class="operator">=</span> UserState.valueOf(<span class="string">&quot;NORMAL&quot;</span>);</span><br><span class="line">        System.out.println(normal1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义枚举的集合类</span></span><br><span class="line">        <span class="type">EnumSet</span> <span class="variable">enumSet</span> <span class="operator">=</span> EnumSet.of(UserState.NORMAL, UserState.DISABLE, UserState.LOCKED);</span><br><span class="line">        System.out.println(enumSet.contains(UserState.LOCKED));</span><br><span class="line"></span><br><span class="line">        <span class="type">EnumMap</span> <span class="variable">enumMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnumMap</span>(UserState.class);</span><br><span class="line">        enumMap.put(UserState.NORMAL, <span class="number">1</span>);</span><br><span class="line">        enumMap.put(UserState.LOCKED, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleState</span><span class="params">(UserState state)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/posts/79666db.html"/>
      <url>/posts/79666db.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据结构是计算机底层存储、组织数据的方式</p><p>为了更加方便的管理和使用数据，结合具体的业务场景</p><ul><li>每种数据结构长什么样子</li><li>怎么添加数据</li><li>怎么删除数据</li></ul><blockquote><p>常见数据结构：</p><ol><li>栈</li><li>队列</li><li>数组</li><li>链表</li><li>二叉树</li><li>二叉查找树</li><li>平衡二叉树</li><li>红黑树</li></ol></blockquote><h2 id="1-栈"><a href="#1-栈" class="headerlink" title="1.栈"></a>1.栈</h2><ul><li><p>先进后出，后进先出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以理解为打枪</span><br><span class="line">吃东西吐出来🤮</span><br></pre></td></tr></table></figure></li><li><p>数据进栈/压栈</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">栈顶/栈底</span><br></pre></td></tr></table></figure></li><li><p>弹栈/出栈 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>方法最后出栈</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h2><ul><li><p>先进先出，后进后出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">前端/后端 两端都是开口的</span><br><span class="line"></span><br><span class="line">可以理解为排队买票</span><br><span class="line">吃东西拉出来💩</span><br></pre></td></tr></table></figure></li><li><p>数据从后端进入队列模型：入队列</p></li><li><p>数据从前端离开队列模型：出队列</p></li></ul><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><ul><li><p>查询快，增删慢的模型</p></li><li><p>查询速度快：通过地址值和索引定位，查询任意数据耗时相同（元素在内存中是连续存储的）</p></li><li>删除效率低：将原始数据删除，同时后面每个数据前移</li><li>添加效率低：添加位置后的每个数据后移，再添加元素</li></ul><h2 id="4-链表"><a href="#4-链表" class="headerlink" title="4.链表"></a>4.链表</h2><ul><li><p>链表中的结点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址值</p></li><li><p>结点的存储位置（地址）</p></li><li><p>结点的数据：结点的真实数据值+下一个数据的地址值</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">下面数字是下一个结点的地址 字母是真实数据 ^是空地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">head 11</span> <span class="literal">-----</span>&gt; <span class="comment">A 37</span> <span class="literal">-----</span>&gt; <span class="comment">C 96</span> <span class="literal">------</span>&gt; <span class="comment">D ^</span></span><br></pre></td></tr></table></figure></li><li><p>链表中元素是游离的，查询慢，无论查询哪个数据都要从头开始找，但首尾操作快</p></li><li><p>链表增删快</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只需要修改指定位置的地址值</span><br></pre></td></tr></table></figure></li><li><p>单向链表</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">值 下一个结点地址</span> <span class="literal">------</span>&gt; <span class="comment">值 下一个结点地址</span> <span class="literal">------</span>&gt; <span class="comment">值 下一个结点地址</span></span><br></pre></td></tr></table></figure></li><li><p>双向链表：提高了查询的效率</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">------</span>&gt; <span class="comment">^ 值 下一个结点地址</span> <span class="literal">------</span>&gt; <span class="comment">前一个结点地址 值 下一个结点地址</span> <span class="literal">------</span>&gt; <span class="comment">前一个结点地址 值 下一个结点地址</span> <span class="literal">------</span>&gt; <span class="comment">前一个结点地址 值 下一个结点地址</span> <span class="literal">------</span>&gt; </span><br></pre></td></tr></table></figure></li></ul><h2 id="5-二叉树"><a href="#5-二叉树" class="headerlink" title="5.二叉树"></a>5.二叉树</h2><p>存入数据是没有规则的</p><ul><li>父节点</li><li>右子节点</li><li>左子节点</li><li>度：每一个节点的子节点数量称之为度</li><li>节点: 在树结构中,每一个元素称之为节点</li><li>树高：树的总层数</li><li>根节点：最顶层的节点</li><li>根节点的左子树</li><li>根节点的右子树</li></ul><h2 id="6-二叉查找树"><a href="#6-二叉查找树" class="headerlink" title="6.二叉查找树"></a>6.二叉查找树</h2><p>==<strong>二叉查找树的特点</strong>==</p><ul><li>二叉查找树,又称二叉排序树或者二叉搜索树</li><li>每一个节点上最多有两个子节点</li><li>左子树上所有节点的值都小于根节点的值</li><li>右子树上所有节点的值都大于根节点的值</li></ul><p>==<strong>二叉查找树结构图</strong>==</p><p><img src=".\images\img\02_二叉查找树结构图.png" alt="02_二叉查找树结构图"></p><p>==<strong>二叉查找树添加节点规则</strong>==</p><ul><li>小的存左边</li><li>大的存右边</li><li>一样的不存</li></ul><p><img src=".\images\img\04_二叉查找树添加节点规则.png" alt="04_二叉查找树添加节点规则"></p><p>==<strong>查找规则</strong>==</p><p>查找5在7的左子树在4的右子树</p><p>==<strong>遍历规则</strong>==</p><p>前中后都看当前的Node获取顺序</p><ul><li><p>前序遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从根节点开始，然后按照当前节点，左子节点，右子节点的顺序遍历</span><br></pre></td></tr></table></figure></li><li><p>中序遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从最左边的子节点开始，然后按照左子节点，当前节点，右子节点的顺序遍历</span><br></pre></td></tr></table></figure></li><li><p>后序遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从最左边的子节点开始，然后按照左子节点，右子节点，当前节点的顺序遍历</span><br></pre></td></tr></table></figure></li><li><p>层序遍历</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一层一层的去遍历，从左往右</span><br></pre></td></tr></table></figure></li></ul><p>==<strong>二叉查找树的弊端</strong>==</p><p>高低腿 即 左右长度差距太大 比如 左子树 只有一个数据 右子树 100条数据</p><h2 id="7-平衡二叉树"><a href="#7-平衡二叉树" class="headerlink" title="7.平衡二叉树"></a>7.平衡二叉树</h2><p>计院研究生考题</p><p>规则：<strong>任意</strong>节点左右子树高度差不超过1</p><p>机制：旋转机制</p><p>==<strong>旋转机制</strong>==</p><ul><li>规则1：左旋</li><li>规则2：右旋</li><li>触发时机：当添加一个节点之后，该树不再是一颗平衡二叉树</li></ul><p>==<strong>左旋</strong>==</p><ul><li><p>确认支点：从添加的节点开始，不断往父节点找不平衡的节点</p></li><li><p>步骤：</p><p>1) 例一</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 以不平衡的点作为支点</span><br><span class="line"><span class="bullet">2.</span> 把支点左旋降级，变成左子节点</span><br><span class="line"><span class="bullet">3.</span> 晋升原来的右子节点</span><br></pre></td></tr></table></figure><p>   <img src=".\images\img\左旋01.png" alt="左旋01" style="zoom:67%;" /></p><p>   <img src=".\images\img\左旋02.png" alt="左旋02" style="zoom:67%;" /></p><p>2) 例二</p><p>   <img src=".\images\img\左旋02_01.png" alt="image-20240412102716236" style="zoom:67%;" /></p><p>   <img src=".\images\img\左旋02_02.png" alt="image-20240412103008152" style="zoom:67%;" /></p></li></ul><p>==<strong>右旋</strong>==</p><p>在右侧添加节点的时候破坏了平衡规则</p><p>就是将根节点的左侧往右拉,左子节点变成了新的父节点,并把多余的右子节点出让,给已经降级根节点当左子节点</p><ol><li><p>例一</p><p><img src=".\images\img\右旋01_01.png" alt="image-20240412103458576" style="zoom:67%;" /></p><p><img src=".\images\img\右旋01_02.png" alt="image-20240412103752061" style="zoom: 80%;" /></p></li><li><p>例二</p><p><img src=".\images\img\右旋02_01.png" alt="image-20240412103930055"></p><p><img src=".\images\img\右旋02_02.png" alt="image-20240412104038165"></p></li></ol><p>==<strong>平衡二叉树旋转的四种情况</strong>==</p><ul><li><p>左左</p><ul><li><p>左左: 当根节点左子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 一次整体右旋</p><p><img src="\images\img\08_平衡二叉树左左.png" alt="08_平衡二叉树左左"></p></li></ul></li><li><p>左右</p><ul><li><p>左右: 当根节点左子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先局部左旋，然后整体右旋</p><p><img src=".\images\img\左右01.png" alt="image-20240412105129036" style="zoom:67%;" /></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20240412105235742.png" alt="image-20240412105235742" style="zoom:67%;" /></p><p><img src=".\images\img\左右.png" alt="image-20240412105315428"></p></li></ul></li><li><p>右右</p><ul><li><p>右右: 当根节点右子树的右子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 一次整体左旋</p><p><img src=".\images\img\10_平衡二叉树右右.png" alt="10_平衡二叉树右右"></p></li></ul></li><li><p>右左</p><ul><li><p>右左:当根节点右子树的左子树有节点插入,导致二叉树不平衡</p></li><li><p>如何旋转: 先局部右旋，然后整体左旋</p><p><img src=".\images\img\右左01.png" alt="image-20240412105925350" style="zoom:67%;" /></p></li></ul></li></ul><p><img src=".\images\img\右左02.png" alt="image-20240412110004652"></p><p><img src=".\images\img\右左.png" alt="image-20240412110030777"></p><h2 id="8-红黑树"><a href="#8-红黑树" class="headerlink" title="8.红黑树"></a>8.红黑树</h2><p>增删改查性能都很好</p><p>==<strong>起源</strong>==</p><ul><li>红黑树是一种自平衡的二叉查找树</li><li>平衡二叉B树</li><li>红黑树的每一个节点上都有存储位表示节点的颜色</li><li>每一个节点可以是红或者黑；红黑树不是高度平衡的，它的平衡是通过“红黑规则”进行实现的</li></ul><p>==<strong>红黑规则</strong>==</p><ol><li><p><strong>每一个节点或是红色的,或者是黑色的</strong></p></li><li><p><strong>根节点必须是黑色</strong></p></li><li><p><strong>如果一个节点没有子节点或者父节点,则该节点相应的指针属性值为Nil,这些Nil视为叶节点,每个叶节点(Nil)是黑色的</strong></p></li><li><p><strong>如果某一个节点是红色,那么它的子节点必须是黑色(不能出现两个红色节点相连 的情况)</strong></p></li><li><p><strong>对每一个节点,从该节点到其所有后代叶节点的简单路径上,均包含相同数目的黑色节点</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">后代：该节点下面所有的节点</span><br><span class="line">后代叶节点：所有的N<span class="function"><span class="title">il</span>   （读音-&gt;</span> 泥欧）</span><br><span class="line">简单路径：顺着大道走不返回走</span><br><span class="line"></span><br><span class="line">比如从<span class="number">17</span>开始往后代子节点的简单路径上每个路径都有两个黑</span><br></pre></td></tr></table></figure><p><img src="./images/img/12_红黑树结构图.png" alt="12_红黑树结构图"></p></li></ol><p>==<strong>添加规则</strong>==</p><p><strong>默认颜色：添加节点默认是红色（效率高）</strong></p><p><img src="./images/img/13_红黑树添加节点颜色.png" alt="13_红黑树添加节点颜色" style="zoom:67%;" /></p><p>红黑树添加节点后如何保持红黑规则</p><ul><li>根节点位置<ul><li>直接变为黑色</li></ul></li><li>非根节点位置<ul><li>父节点为黑色<ul><li>不需要任何操作,默认红色即可</li></ul></li><li>父节点为红色<ul><li>叔叔节点为红色<ol><li>将”父节点”设为黑色,将”叔叔节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>如果”祖父节点”为根节点,则将根节点再次变成黑色</li><li>如果”祖父节点”为非根节点,则将祖父设置为当前节点<strong>再进行</strong>判断</li></ol></li><li>叔叔节点为黑色当前节点是父的左孩子<ol><li>将”父节点”设为黑色</li><li>将”祖父节点”设为红色</li><li>以”祖父节点”为支点进行右旋转 （旋转的时候不需要考虑叶子节点）</li></ol></li><li>叔叔节点为黑丝当前节点是父节点的右孩子<ol><li>把父作为当前节点进行左旋</li><li><strong>再进行判断</strong></li></ol></li></ul></li></ul></li></ul><p><img src=".\images\img\红黑树规则.png" alt="image-20240412154737779"></p><p><img src=".\images\img\红黑树添加数据规则.png" alt="image-20240412154915630"></p><h2 id="9-哈希表"><a href="#9-哈希表" class="headerlink" title="9.哈希表"></a>9.哈希表</h2><ul><li>JDK8之前: 数组+链表</li><li>JDK8开始: 数组+链表+红黑树</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就按照我自己理解为什么Java中<span class="built_in">Hash</span>表为什么没有重复的数据：</span><br><span class="line">··如果<span class="built_in">Hash</span>中存入的是自定义对象必须重写hashCode、<span class="built_in">equals</span>方法，不计算地址值，而计算属性值</span><br></pre></td></tr></table></figure><p>==<strong>哈希值</strong>==</p><p><strong>对象的整数表现形式</strong></p><p>&gt;</p><blockquote><p><img src=".\images\ai.png" alt="img"></p><p>哈希值（Hash Value），也称为散列值或哈希码（Hash Code），是一个数据对象的唯一标识符，它是由哈希函数通过对数据对象进行计算而得到的。哈希值通常是一个固定大小的整数，这个整数在哈希表中用于确定数据对象的存储位置。</p><p>哈希函数的设计目标是将输入数据（通常是字符串或对象）转换为一个散列值，这个值应该具有以下特性：</p><ol><li><strong>唯一性</strong>：理想情况下，每个不同的输入数据应该产生一个不同的哈希值。然而，在实际应用中，可能会出现不同的输入数据产生相同哈希值的情况，这称为“哈希冲突”。</li><li><strong>快速计算</strong>：哈希函数应该能够快速地计算出输入数据的哈希值。</li><li><strong>分布均匀</strong>：哈希函数应该能够将输入数据均匀地映射到哈希值的整个范围内，以减少哈希冲突的可能性。</li></ol><p>哈希值在计算机科学中有多种用途，包括：</p><ul><li><strong>数据检索</strong>：在哈希表中，哈希值用于快速定位数据对象。</li><li><strong>数据完整性验证</strong>：哈希值可以用来验证数据是否在传输或存储过程中被篡改。</li><li><strong>加密</strong>：在加密算法中，哈希函数用于生成消息摘要或密钥。</li></ul><p>需要注意的是，哈希值并不总是全局唯一的。在某些情况下，不同的输入数据可能会产生相同的哈希值，这种现象称为<strong>“哈希碰撞”</strong>。为了处理这种碰撞，哈希表通常采用某种冲突解决策略，如链地址法（Chaining）或开放寻址法（Open Addressing）。</p><p>在Java中，几乎所有的对象都有一个<code>hashCode</code>方法，该方法返回对象的哈希码值。这个值是由对象的内部状态（如字段值）计算得到的，并且通常与对象的内存地址无关。<code>hashCode</code>方法在<code>Object</code>类中被定义，并在需要时被其他类重写。正确实现<code>hashCode</code>方法对于确保散列数据结构（如<code>HashSet</code>、<code>HashMap</code>等）的正确行为至关重要。</p></blockquote><p>==<strong>哈希表的数据结构</strong>==</p><p>哈希表（Hash Table）是一种高效的数据结构，它通过使用哈希函数将键（Key）映射到表中的位置来存储数据。这种结构也被称为散列表，它能够提供快速的数据访问速度。以下是哈希表的主要组成部分和工作原理：</p><p>==<strong>主要组成部分</strong>==</p><ol><li><p><strong>哈希函数（Hash Function）</strong>：<br>哈希函数是一个将输入（通常是字符串）转换为表中索引的函数。理想情况下，哈希函数应该将键均匀地分布在整个表中，以避免聚集（多个键映射到同一位置）。</p></li><li><p><strong>数组（Array）</strong>：<br>哈希表通常使用一个数组来存储数据。数组的每个位置称为一个“桶”（Bucket），它可以存储一个或多个键值对。</p></li><li><p><strong>键值对（Key-Value Pairs）</strong>：<br>数据以键值对的形式存储在哈希表中，其中键是唯一的标识符，值是与键相关联的数据。</p></li></ol><p>==<strong>工作原理</strong>==</p><ol><li><p><strong>插入（Insertion）</strong>：<br>当你向哈希表中插入一个键值对时，哈希函数计算键的哈希值，然后使用这个哈希值来确定应该将键值对存储在数组的哪个位置（桶）。</p></li><li><p><strong>查找（Lookup）</strong>：<br>查找操作与插入类似。首先使用哈希函数计算键的哈希值，然后在对应的桶中查找键值对。如果桶中有多个键值对，就需要遍历这些键值对来找到匹配的键。</p></li><li><p><strong>删除（Deletion）</strong>：<br>删除操作首先需要找到要删除的键值对，这通常通过查找操作完成。一旦找到，就可以直接从桶中删除该键值对。</p></li></ol><p>==<strong>处理冲突</strong>==</p><p>在哈希表中，可能会出现两个或多个不同的键映射到同一桶的情况，这称为“哈希冲突”（Hash Collision）。有几种常见的方法来处理哈希冲突：</p><ol><li><p><strong>链地址法（Chaining）</strong>：<br>在每个桶中使用链表来存储多个键值对。当发生冲突时，键值对被添加到链表的末尾。</p></li><li><p><strong>开放寻址法（Open Addressing）</strong>：<br>当插入时遇到冲突，开放寻址法会寻找表中的另一个空桶来存储键值对。这可能涉及到线性探测、二次探测或双重哈希等策略。</p></li><li><p><strong>再哈希（Rehashing）</strong>：<br>当哈希表变得过于拥挤时，可以通过创建一个更大的新哈希表并将所有现有键值对重新插入来减少冲突的机会。</p></li></ol><p>==<strong>优点</strong>==</p><ul><li><strong>快速访问</strong>：哈希表提供了快速的数据访问，理想情况下，插入和查找操作的时间复杂度为 O(1)。</li></ul><p>==<strong>缺点</strong>==</p><ul><li><strong>哈希冲突</strong>：需要有效的策略来处理哈希冲突。</li><li><strong>空间浪费</strong>：为了减少冲突并保持高效的操作，哈希表通常需要额外的空间来存储空桶或解决冲突的数据结构。</li><li><strong>键的分布</strong>：哈希表的性能依赖于键的分布和哈希函数的质量。</li></ul><p>==<strong>Java为String提供的<code>hashCode</code>方法会导致哈希碰撞</strong>==</p><blockquote><p> 在Java中，<code>hashCode</code>方法是用来计算对象哈希码的。字符串的哈希码是基于字符串的字符序列通过某种算法计算得到的。Java为<code>String</code>类提供了<code>hashCode</code>方法的默认实现，该实现遵循以下规则：</p><ol><li>字符串””（空字符串）的哈希码是0。</li><li>对于非空字符串<code>s</code>，其哈希码计算公式为：<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span>[<span class="number">0</span>] * <span class="number">31</span>^(n - <span class="number">1</span>) + s[<span class="number">1</span>] * <span class="number">31</span>^(n - <span class="number">2</span>) + ... + s[n - <span class="number">1</span>] * <span class="number">31</span></span><br></pre></td></tr></table></figure>其中，<code>s[i]</code>是字符串中第<code>i</code>个字符的整数ASCII值，<code>n</code>是字符串的长度，<code>^</code>表示乘方。</li></ol><p>现在，让我们应用这个规则来计算给定字符串的哈希码：</p><ul><li><p>对于字符串<code>&quot;abc&quot;</code>，其哈希码计算如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">&#x27;a&#x27;</span> * 31^2 <span class="code">+ &#x27;b&#x27; * 31^1 +</span> <span class="emphasis">&#x27;c&#x27;</span> * 31^0</span><br><span class="line">97 * 961 <span class="code">+ 98 * 31 +</span> 99 * 1</span><br><span class="line"><span class="section">= 93,059 + 3,098 + 99</span></span><br><span class="line"><span class="section">= 96,256</span></span><br></pre></td></tr></table></figure><p>因此，<code>&quot;abc&quot;.hashCode()</code>的结果是96,256。</p></li><li><p>对于字符串<code>&quot;acD&quot;</code>，其哈希码计算如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">&#x27;a&#x27;</span> * 31^1 + <span class="emphasis">&#x27;c&#x27;</span> * 31^0</span><br><span class="line">97 * 31 + 99 * 1</span><br><span class="line"><span class="section">= 2,997 + 99</span></span><br><span class="line"><span class="section">= 3,096</span></span><br></pre></td></tr></table></figure><p>但是，这里有一个错误。实际上，字符串<code>&quot;acD&quot;</code>的哈希码计算应该是：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">&#x27;a&#x27;</span> * 31^2 <span class="code">+ &#x27;c&#x27; * 31^1 +</span> <span class="emphasis">&#x27;D&#x27;</span> * 31^0</span><br><span class="line">97 * 961 <span class="code">+ 99 * 31 +</span> 68 * 1</span><br><span class="line"><span class="section">= 93,059 + 3,089 + 68</span></span><br><span class="line"><span class="section">= 96,216</span></span><br></pre></td></tr></table></figure><p>因此，<code>&quot;acD&quot;.hashCode()</code>的结果是96,216。</p></li></ul><p>从上面的计算可以看出，<code>&quot;abc&quot;</code>和<code>&quot;acD&quot;</code>的哈希码是不同的。如果你在Java程序中运行这两个<code>hashCode</code>调用，你会得到两个不同的整数值。</p><p>如果你发现两个不同的字符串有相同的哈希码，那只是偶然的哈希冲突。由于哈希码是一个有限的整数，而字符串的可能组合是无限的，所以不同的输入可能会产生相同的哈希码。这是哈希函数的一个固有特性，并且在设计哈希表时需要考虑这种可能性。在Java中，字符串的哈希码通常是唯一的，但不是绝对的，因此哈希表可能会遇到冲突。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射&amp;动态代理</title>
      <link href="/posts/5612471f.html"/>
      <url>/posts/5612471f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-反射"><a href="#1-反射" class="headerlink" title="1. 反射"></a>1. 反射</h1><p><strong>简单来说就是从类中拿东西</strong></p><p><img src="images\fanshe\反射定义.png" alt="image-20240422162145787"></p><h2 id="1-1-反射的概述："><a href="#1-1-反射的概述：" class="headerlink" title="1.1 反射的概述："></a>1.1 反射的概述：</h2><p>​    <strong>专业的解释（了解一下）：</strong></p><p>​       是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p><p>​       对于任意一个对象，都能够调用它的任意属性和方法；</p><p>​       这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><p>​    <strong>通俗的理解：（掌握）</strong></p><ul><li><p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p></li><li><p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p><p>读取到什么类，就创建什么类的对象</p><p>读取到什么方法，就调用什么方法</p><p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p></li></ul><h2 id="1-2-学习反射到底学什么？"><a href="#1-2-学习反射到底学什么？" class="headerlink" title="1.2 学习反射到底学什么？"></a>1.2 学习反射到底学什么？</h2><p>反射都是从class字节码文件中获取的内容。</p><ul><li>如何获取class字节码文件的对象</li><li>利用反射如何获取构造方法（创建对象）</li><li>利用反射如何获取成员变量（赋值，获取值）</li><li>利用反射如何获取成员方法（运行）</li></ul><h2 id="1-3-获取字节码文件对象的三种方式"><a href="#1-3-获取字节码文件对象的三种方式" class="headerlink" title="1.3 获取字节码文件对象的三种方式"></a>1.3 获取字节码文件对象的三种方式</h2><ul><li>Class这个类里面的静态方法forName（“全类名”）<strong>（最常用）</strong></li><li>通过class属性获取  </li><li>通过对象获取字节码文件对象</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Class这个类里面的静态方法forName</span></span><br><span class="line"><span class="comment">//Class.forName(&quot;类的全类名&quot;)： 全类名 = 包名 + 类名</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.reflectdemo.Student&quot;</span>);</span><br><span class="line"><span class="comment">//源代码阶段获取 --- 先把Student加载到内存中，再获取字节码文件的对象</span></span><br><span class="line"><span class="comment">//clazz 就表示Student这个类的字节码文件对象。</span></span><br><span class="line"><span class="comment">//就是当Student.class这个文件加载到内存之后，产生的字节码文件对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过class属性获取</span></span><br><span class="line"><span class="comment">//类名.class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为class文件在硬盘中是唯一的，所以，当这个文件加载到内存之后产生的对象也是唯一的</span></span><br><span class="line">System.out.println(clazz1 == clazz2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过Student对象获取字节码文件对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">System.out.println(clazz1 == clazz2);<span class="comment">//true</span></span><br><span class="line">System.out.println(clazz2 == clazz3);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="1-4-字节码文件和字节码文件对象"><a href="#1-4-字节码文件和字节码文件对象" class="headerlink" title="1.4 字节码文件和字节码文件对象"></a>1.4 字节码文件和字节码文件对象</h2><p>java文件：就是我们自己编写的java代码。</p><p>字节码文件：就是通过java文件编译之后的class文件（是在硬盘上真实存在的，用眼睛能看到的）</p><p>字节码文件对象：当class文件加载到内存之后，虚拟机自动创建出来的对象。</p><p>​                这个对象里面至少包含了：构造方法，成员变量，成员方法。</p><p>而我们的反射获取的是什么？字节码文件对象，这个对象在内存中是唯一的。</p><h2 id="1-5-获取构造方法"><a href="#1-5-获取构造方法" class="headerlink" title="1.5 获取构造方法"></a>1.5 获取构造方法</h2><p>规则：</p><p>​    get表示获取</p><p>​    Declared表示私有</p><p>​    最后的s表示所有，复数形式</p><p>​    如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>获得所有的构造（只能public修饰）</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>获得所有的构造（包含private修饰）</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>获取指定构造（只能public修饰）</td></tr><tr><td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>获取指定构造（包含private修饰）</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//1.获得整体（class字节码文件对象）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.reflectdemo.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="comment">//获取所有构造方法（public）</span></span><br><span class="line">        Constructor[] constructors1 = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors1) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有构造（带私有的）</span></span><br><span class="line">        Constructor[] constructors2 = clazz.getDeclaredConstructors();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors2) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的空参构造</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con1</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con2</span> <span class="operator">=</span> clazz.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(con2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取指定的构造(所有构造都可以获取到，包括public包括private)</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con3</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        System.out.println(con3);</span><br><span class="line">        <span class="comment">//了解 System.out.println(con3 == con1);</span></span><br><span class="line">        <span class="comment">//每一次获取构造方法对象的时候，都会新new一个。</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con4</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(con4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-获取构造方法并创建对象"><a href="#1-6-获取构造方法并创建对象" class="headerlink" title="1.6 获取构造方法并创建对象"></a>1.6 获取构造方法并创建对象</h2><p>涉及到的方法：newInstance</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要有一个javabean类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类中的代码：</span></span><br><span class="line"><span class="comment">//需求1：</span></span><br><span class="line"><span class="comment">//获取空参，并创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取整体的字节码文件对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取空参的构造方法</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"><span class="comment">//3.利用空参构造方法创建对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) con.newInstance();</span><br><span class="line">System.out.println(stu);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类中的代码：</span></span><br><span class="line"><span class="comment">//需求2：</span></span><br><span class="line"><span class="comment">//获取带参构造，并创建对象</span></span><br><span class="line"><span class="comment">//1.获取整体的字节码文件对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取有参构造方法</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="comment">//3.临时修改构造方法的访问权限（暴力反射）</span></span><br><span class="line">con.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//4.直接创建对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) con.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure><h2 id="1-7-获取成员变量"><a href="#1-7-获取成员变量" class="headerlink" title="1.7 获取成员变量"></a>1.7 获取成员变量</h2><p>规则：</p><p>​    get表示获取</p><p>​    Declared表示私有</p><p>​    最后的s表示所有，复数形式</p><p>​    如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><p>方法名：</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有成员变量对象的数组（只能拿public的）</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组，存在就能拿到</td></tr><tr><td>Field getField(String name)</td><td>返回单个成员变量对象（只能拿public的）</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象，存在就能拿到</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//获取成员变量对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.reflectdemo.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量的对象（Field对象)只能获取public修饰的</span></span><br><span class="line">        Field[] fields1 = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields1) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员变量的对象（public + private）</span></span><br><span class="line">        Field[] fields2 = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="comment">//获得单个成员变量对象</span></span><br><span class="line">        <span class="comment">//如果获取的属性是不存在的，那么会报异常</span></span><br><span class="line">        <span class="comment">//Field field3 = clazz.getField(&quot;aaa&quot;);</span></span><br><span class="line">        <span class="comment">//System.out.println(field3);//NoSuchFieldException</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        System.out.println(field4);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取单个成员变量（私有）</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(field5);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, gender = &quot;</span> + gender + <span class="string">&quot;, address = &quot;</span> + address + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-8-获取成员变量并获取值和修改值"><a href="#1-8-获取成员变量并获取值和修改值" class="headerlink" title="1.8 获取成员变量并获取值和修改值"></a>1.8 获取成员变量并获取值和修改值</h2><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj, Object value）</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">23</span>,<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">24</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：</span></span><br><span class="line">        <span class="comment">//利用反射获取成员变量并获取值和修改值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.reflectdemo.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name成员变量</span></span><br><span class="line">        <span class="comment">//field就表示name这个属性的对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//临时修饰他的访问权限</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置(修改)name的值</span></span><br><span class="line">        <span class="comment">//参数一：表示要修改哪个对象的name？</span></span><br><span class="line">        <span class="comment">//参数二：表示要修改为多少？</span></span><br><span class="line">        field.set(s,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取name的值</span></span><br><span class="line">        <span class="comment">//表示我要获取这个对象的name的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String)field.get(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.打印结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String gender, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, gender = &quot;</span> + gender + <span class="string">&quot;, address = &quot;</span> + address + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-9-获取成员方法"><a href="#1-9-获取成员方法" class="headerlink" title="1.9 获取成员方法"></a>1.9 获取成员方法</h2><p>规则：</p><p>​    get表示获取</p><p>​    Declared表示私有</p><p>​    最后的s表示所有，复数形式</p><p>​    如果当前获取到的是私有的，必须要临时修改访问权限，否则无法使用</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有成员方法对象的数组（只能拿public的）</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，存在就能拿到</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象（只能拿public的）</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象，存在就能拿到</td></tr></tbody></table></div><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.itheima.reflectdemo.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取方法</span></span><br><span class="line">        <span class="comment">//getMethods可以获取父类中public修饰的方法</span></span><br><span class="line">        Method[] methods1 = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods1) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取所有的方法（包含私有）</span></span><br><span class="line">        <span class="comment">//但是只能获取自己类中的方法</span></span><br><span class="line">        Method[] methods2 = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods2) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取指定的方法（空参）</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method3</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;sleep&quot;</span>);</span><br><span class="line">        System.out.println(method3);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method4</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        System.out.println(method4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的私有方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method5</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;playGame&quot;</span>);</span><br><span class="line">        System.out.println(method5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-10-获取成员方法并运行"><a href="#1-10-获取成员方法并运行" class="headerlink" title="1.10 获取成员方法并运行"></a>1.10 获取成员方法并运行</h2><p>方法</p><p> Object invoke(Object obj, Object… args) ：运行方法</p><p>参数一：用obj对象调用该方法</p><p>参数二：调用方法的传递的参数（如果没有就不写）</p><p>返回值：方法的返回值（如果没有就不写）</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a02reflectdemo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.获取字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.a02reflectdemo1.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个对象</span></span><br><span class="line">        <span class="comment">//需要用这个对象去调用方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.获取一个指定的方法</span></span><br><span class="line">        <span class="comment">//参数一：方法名</span></span><br><span class="line">        <span class="comment">//参数二：参数列表，如果没有可以不写</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eatMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//运行</span></span><br><span class="line">        <span class="comment">//参数一：表示方法的调用对象</span></span><br><span class="line">        <span class="comment">//参数二：方法在运行时需要的实际参数</span></span><br><span class="line">        <span class="comment">//注意点：如果方法有返回值，那么需要接收invoke的结果</span></span><br><span class="line">        <span class="comment">//如果方法没有返回值，则不需要接收</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) eatMethod.invoke(s, <span class="string">&quot;重庆小面&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(String something)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在吃&quot;</span> + something);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;学生已经吃完了，非常happy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题："><a href="#面试题：" class="headerlink" title="面试题："></a>面试题：</h2><p>​    你觉得反射好不好？好，有两个方向</p><p>​    第一个方向：无视修饰符访问类中的内容。但是这种操作在开发中一般不用，都是框架底层来用的。</p><p>​    第二个方向：反射可以跟配置文件结合起来使用，动态的创建对象，动态的调用方法。</p><h2 id="1-11-练习泛型擦除（掌握概念，了解代码）"><a href="#1-11-练习泛型擦除（掌握概念，了解代码）" class="headerlink" title="1.11 练习泛型擦除（掌握概念，了解代码）"></a>1.11 练习泛型擦除（掌握概念，了解代码）</h2><p>理解：（掌握）</p><p>​    集合中的泛型只在java文件中存在，当编译成class文件之后，就没有泛型了。</p><p>代码示例：（了解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reflectdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"><span class="comment">//        list.add(&quot;aaa&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用反射运行add方法去添加字符串</span></span><br><span class="line">        <span class="comment">//因为反射使用的是class字节码文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> list.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取add方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行方法</span></span><br><span class="line">        method.invoke(list,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-12-练习：修改字符串的内容（掌握概念，了解代码）"><a href="#1-12-练习：修改字符串的内容（掌握概念，了解代码）" class="headerlink" title="1.12 练习：修改字符串的内容（掌握概念，了解代码）"></a>1.12 练习：修改字符串的内容（掌握概念，了解代码）</h2><p>在这个练习中，我需要你掌握的是字符串不能修改的真正原因。</p><p>字符串，在底层是一个byte类型的字节数组，名字叫做value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] value;</span><br></pre></td></tr></table></figure><p>真正不能被修改的原因：final和private</p><p>final修饰value表示value记录的地址值不能修改。</p><p>private修饰value而且没有对外提供getvalue和setvalue的方法。所以，在外界不能获取或修改value记录的地址值。</p><p>如果要强行修改可以用反射：</p><p>代码示例：（了解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="comment">// private final byte[] value= &#123;97,98,99&#125;;</span></span><br><span class="line"><span class="comment">// 没有对外提供getvalue和setvalue的方法，不能修改value记录的地址值</span></span><br><span class="line"><span class="comment">// 如果我们利用反射获取了value的地址值。</span></span><br><span class="line"><span class="comment">// 也是可以修改的，final修饰的value</span></span><br><span class="line"><span class="comment">// 真正不可变的value数组的地址值，里面的内容利用反射还是可以修改的，比较危险</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取class对象</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> s.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取value成员变量（private）</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"><span class="comment">//但是这种操作非常危险</span></span><br><span class="line"><span class="comment">//JDK高版本已经屏蔽了这种操作，低版本还是可以的</span></span><br><span class="line"><span class="comment">//临时修改权限</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取value记录的地址值</span></span><br><span class="line"><span class="type">byte</span>[] bytes = (<span class="type">byte</span>[]) field.get(s);</span><br><span class="line">bytes[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(s);<span class="comment">//dbc</span></span><br><span class="line">System.out.println(ss);<span class="comment">//dbc</span></span><br></pre></td></tr></table></figure><h2 id="1-13-练习，反射和配置文件结合动态获取的练习（重点）"><a href="#1-13-练习，反射和配置文件结合动态获取的练习（重点）" class="headerlink" title="1.13 练习，反射和配置文件结合动态获取的练习（重点）"></a>1.13 练习，反射和配置文件结合动态获取的练习（重点）</h2><p>需求: 利用反射根据文件中的不同类名和方法名，创建不同的对象并调用方法。</p><p>分析:</p><p>①通过Properties加载配置文件</p><p>②得到类名和方法名</p><p>③通过类名反射得到Class对象</p><p>④通过Class对象创建一个对象</p><p>⑤通过Class对象得到方法</p><p>⑥调用方法</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件的信息</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;day14-code\\prop.properties&quot;</span>);</span><br><span class="line">        prop.load(fis);</span><br><span class="line">        fis.close();</span><br><span class="line">        System.out.println(prop);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> prop.get(<span class="string">&quot;classname&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodname</span> <span class="operator">=</span> prop.get(<span class="string">&quot;methodname&quot;</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取字节码文件对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(classname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.要先创建这个类的对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> con.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取方法的对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(methodname);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.运行方法</span></span><br><span class="line">        method.invoke(o);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">配置文件中的信息：</span><br><span class="line">classname=com.itheima.a02reflectdemo1.Student</span><br><span class="line">methodname=sleep</span><br></pre></td></tr></table></figure><h2 id="1-14-利用反射保存对象中的信息（重点）"><a href="#1-14-利用反射保存对象中的信息（重点）" class="headerlink" title="1.14 利用反射保存对象中的信息（重点）"></a>1.14 利用反射保存对象中的信息（重点）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReflectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">       <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小A&quot;</span>,<span class="number">23</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">167.5</span>,<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">       <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;播妞&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">       saveObject(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把对象里面所有的成员变量名和值保存到本地文件中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="comment">//1.获取字节码文件的对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="comment">//2. 创建IO流</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;myreflect\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//3. 获取所有的成员变量</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//获取成员变量的名字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            <span class="comment">//获取成员变量的值</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="comment">//写出数据</span></span><br><span class="line">            bw.write(name + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> height;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> gender, <span class="type">double</span> height, String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> height</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hobby</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHobby</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hobby</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, gender = &quot;</span> + gender + <span class="string">&quot;, height = &quot;</span> + height + <span class="string">&quot;, hobby = &quot;</span> + hobby + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> salary</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salary</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;name = &quot;</span> + name + <span class="string">&quot;, salary = &quot;</span> + salary + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-15-总结"><a href="#1-15-总结" class="headerlink" title="1.15 总结"></a>1.15 总结</h2><p><img src="images\fanshe\反射总结.png" alt="image-20240422164751920"></p><h1 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h1><p><strong>当我们想将一个成员方法中新增功能时，但是又怕出现异常的错误，牵一发而动其全身，所以我们使用动态代理，找一个代理他可以知道我们需要新增的方法</strong></p><p><img src="images\fanshe\鸡哥找代理.png" alt="image-20240422165407879"></p><p><img src="\images\fanshe\动态代理.png" alt="image-20240422170227598"></p><h2 id="2-1-好处："><a href="#2-1-好处：" class="headerlink" title="2.1 好处："></a>2.1 好处：</h2><p>​    无侵入式的给方法增强功能</p><h2 id="2-2-动态代理三要素："><a href="#2-2-动态代理三要素：" class="headerlink" title="2.2 动态代理三要素："></a>2.2 动态代理三要素：</h2><p>1，真正干活的对象c</p><p>2，代理对象</p><p>3，利用代理调用方法</p><p>切记一点：代理可以增强或者拦截的方法都在接口中，接口需要写在newProxyInstance的第二个参数里。</p><h2 id="2-3-代码实现："><a href="#2-3-代码实现：" class="headerlink" title="2.3 代码实现："></a>2.3 代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：</span></span><br><span class="line"><span class="comment">            外面的人想要大明星唱一首歌</span></span><br><span class="line"><span class="comment">             1. 获取代理的对象</span></span><br><span class="line"><span class="comment">                代理对象 = ProxyUtil.createProxy(大明星的对象);</span></span><br><span class="line"><span class="comment">             2. 再调用代理的唱歌方法</span></span><br><span class="line"><span class="comment">                代理对象.唱歌的方法(&quot;只因你太美&quot;);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1. 获取代理的对象</span></span><br><span class="line">        <span class="type">BigStar</span> <span class="variable">bigStar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStar</span>(<span class="string">&quot;鸡哥&quot;</span>);</span><br><span class="line">        <span class="type">Star</span> <span class="variable">proxy</span> <span class="operator">=</span> ProxyUtil.createProxy(bigStar);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 调用唱歌的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> proxy.sing(<span class="string">&quot;只因你太美&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 类的作用：</span></span><br><span class="line"><span class="comment">*       创建一个代理</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 方法的作用：</span></span><br><span class="line"><span class="comment">    *       给一个明星的对象，创建一个代理</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  形参：</span></span><br><span class="line"><span class="comment">    *       被代理的明星对象</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *  返回值：</span></span><br><span class="line"><span class="comment">    *       给明星创建的代理</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 需求：</span></span><br><span class="line"><span class="comment">    *   外面的人想要大明星唱一首歌</span></span><br><span class="line"><span class="comment">    *   1. 获取代理的对象</span></span><br><span class="line"><span class="comment">    *      代理对象 = ProxyUtil.createProxy(大明星的对象);</span></span><br><span class="line"><span class="comment">    *   2. 再调用代理的唱歌方法</span></span><br><span class="line"><span class="comment">    *      代理对象.唱歌的方法(&quot;只因你太美&quot;);</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">createProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line">       <span class="comment">/* java.lang.reflect.Proxy类：提供了为对象产生代理对象的方法：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line"><span class="comment">        参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line"><span class="comment">        参数二：指定接口，这些接口用于指定生成的代理长什么，也就是有哪些方法</span></span><br><span class="line"><span class="comment">        参数三：用来指定生成的代理对象要干什么事情*/</span></span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtil.class.getClassLoader(),<span class="comment">//参数一：用于指定用哪个类加载器，去加载生成的代理类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;,<span class="comment">//参数二：指定接口，这些接口用于指定生成的代理长什么，也就是有哪些方法</span></span><br><span class="line">                <span class="comment">//参数三：用来指定生成的代理对象要干什么事情</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        * 参数一：代理的对象</span></span><br><span class="line"><span class="comment">                        * 参数二：要运行的方法 sing</span></span><br><span class="line"><span class="comment">                        * 参数三：调用sing方法时，传递的实参</span></span><br><span class="line"><span class="comment">                        * */</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;sing&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒，收钱&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;dance&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备场地，收钱&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//去找大明星开始唱歌或者跳舞</span></span><br><span class="line">                        <span class="comment">//代码的表现形式：调用大明星里面唱歌或者跳舞的方法</span></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bigStar,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="comment">//我们可以把所有想要被代理的方法定义在接口当中</span></span><br><span class="line">    <span class="comment">//唱歌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="comment">//跳舞</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唱歌</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在唱&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;谢谢&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跳舞</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BigStar&#123;name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-额外扩展"><a href="#2-4-额外扩展" class="headerlink" title="2.4 额外扩展"></a>2.4 额外扩展</h2><p>动态代理，还可以拦截方法</p><p>比如：</p><p>​    在这个故事中，经济人作为代理，如果别人让邀请大明星去唱歌，打篮球，经纪人就增强功能。</p><p>​    但是如果别人让大明星去扫厕所，经纪人就要拦截，不会去调用大明星的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 类的作用：</span></span><br><span class="line"><span class="comment">*       创建一个代理</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">createProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span><br><span class="line">        <span class="type">Star</span> <span class="variable">star</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(</span><br><span class="line">                ProxyUtil.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;cleanWC&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;拦截，不调用大明星的方法&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果是其他方法，正常执行</span></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bigStar,args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> star;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-动态代理的练习"><a href="#2-5-动态代理的练习" class="headerlink" title="2.5 动态代理的练习"></a>2.5 动态代理的练习</h2><p>​     对add方法进行增强，对remove方法进行拦截，对其他方法不拦截也不增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProxyDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//动态代码可以增强也可以拦截</span></span><br><span class="line">        <span class="comment">//1.创建真正干活的人</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建代理对象</span></span><br><span class="line">        <span class="comment">//参数一：类加载器。当前类名.class.getClassLoader()</span></span><br><span class="line">        <span class="comment">//                 找到是谁，把当前的类，加载到内存中了，我再麻烦他帮我干一件事情，把后面的代理类，也加载到内存</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//参数二：是一个数组，在数组里面写接口的字节码文件对象。</span></span><br><span class="line">        <span class="comment">//                  如果写了List，那么表示代理，可以代理List接口里面所有的方法，对这些方法可以增强或者拦截</span></span><br><span class="line">        <span class="comment">//                  但是，一定要写ArrayList真实实现的接口</span></span><br><span class="line">        <span class="comment">//                  假设在第二个参数中，写了MyInter接口，那么是错误的。</span></span><br><span class="line">        <span class="comment">//                  因为ArrayList并没有实现这个接口，那么就无法对这个接口里面的方法，进行增强或拦截</span></span><br><span class="line">        <span class="comment">//参数三：用来创建代理对象的匿名内部类</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">proxyList</span> <span class="operator">=</span> (List) Proxy.newProxyInstance(</span><br><span class="line">                <span class="comment">//参数一：类加载器</span></span><br><span class="line">                MyProxyDemo1.class.getClassLoader(),</span><br><span class="line">                <span class="comment">//参数二：是一个数组，表示代理对象能代理的方法范围</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;List.class&#125;,</span><br><span class="line">                <span class="comment">//参数三：本质就是代理对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="comment">//invoke方法参数的意义</span></span><br><span class="line">                    <span class="comment">//参数一：表示代理对象，一般不用（了解）</span></span><br><span class="line">                    <span class="comment">//参数二：就是方法名，我们可以对方法名进行判断，是增强还是拦截</span></span><br><span class="line">                    <span class="comment">//参数三：就是下面第三步调用方法时，传递的参数。</span></span><br><span class="line">                    <span class="comment">//举例1：</span></span><br><span class="line">                    <span class="comment">//list.add(&quot;阿玮好帅&quot;);</span></span><br><span class="line">                    <span class="comment">//此时参数二就是add这个方法名</span></span><br><span class="line">                    <span class="comment">//此时参数三 args[0] 就是 阿玮好帅</span></span><br><span class="line">                    <span class="comment">//举例2：</span></span><br><span class="line">                    <span class="comment">//list.set(1, &quot;aaa&quot;);</span></span><br><span class="line">                    <span class="comment">//此时参数二就是set这个方法名</span></span><br><span class="line">                    <span class="comment">//此时参数三  args[0] 就是 1  args[1]&quot;aaa&quot;</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">//对add方法做一个增强，统计耗时时间</span></span><br><span class="line">                        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">                            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                            <span class="comment">//调用集合的方法，真正的添加数据</span></span><br><span class="line">                            method.invoke(list, args);</span><br><span class="line">                            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                            System.out.println(<span class="string">&quot;耗时时间：&quot;</span> + (end - start));</span><br><span class="line">                            <span class="comment">//需要进行返回，返回值要跟真正增强或者拦截的方法保持一致</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;remove&quot;</span>) &amp;&amp; args[<span class="number">0</span>] <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;拦截了按照索引删除的方法&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;remove&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;拦截了按照对象删除的方法&quot;</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">//如果当前调用的是其他方法,我们既不增强，也不拦截</span></span><br><span class="line">                            method.invoke(list,args);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line">        <span class="comment">//如果调用者是list，就好比绕过了第二步的代码，直接添加元素</span></span><br><span class="line">        <span class="comment">//如果调用者是代理对象，此时代理才能帮我们增强或者拦截</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//每次调用方法的时候，都不会直接操作集合</span></span><br><span class="line">        <span class="comment">//而是先调用代理里面的invoke，在invoke方法中进行判断，可以增强或者拦截</span></span><br><span class="line">        proxyList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        proxyList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        proxyList.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        proxyList.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        proxyList.remove(<span class="number">0</span>);</span><br><span class="line">        proxyList.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/posts/a2c3ad19.html"/>
      <url>/posts/a2c3ad19.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、多线程"><a href="#一、多线程" class="headerlink" title="一、多线程"></a>一、多线程</h1><p><strong>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如三条流水线，让一个人干，每个货物之间的间隔是<span class="number">10</span><span class="built_in">min</span>有充足的间隔，能够同时做多个事情，把等待的时间充分利用起来</span><br></pre></td></tr></table></figure><h2 id="1-实现多线程"><a href="#1-实现多线程" class="headerlink" title="1. 实现多线程"></a>1. 实现多线程</h2><h3 id="1-1-简单了解多线程【理解】"><a href="#1-1-简单了解多线程【理解】" class="headerlink" title="1.1 简单了解多线程【理解】"></a>1.1 简单了解多线程【理解】</h3><p>是指从软件或者硬件上实现多个线程并发执行的技术。<br>具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。</p><p><img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\01_简单了解多线程.png" alt="01_简单了解多线程"></p><h3 id="1-2-并发和并行"><a href="#1-2-并发和并行" class="headerlink" title="1.2 并发和并行"></a>1.2 并发和并行</h3><ul><li><p><strong>并行：在同一时刻，有多个指令在多个CPU上同时执行</strong></p><p><img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\02_并行.png" alt="02_并行"></p></li><li><p><strong>并发：在同一时刻，有多个指令在单个CPU上交替执行</strong></p><p><img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\03_并发.png" alt="03_并发"></p></li></ul><iframe src="//player.bilibili.com/player.html?aid=417284346&bvid=BV17V411e7Ua&cid=316175742&p=1&autoplay=0&mute=1"                 scrolling="no"        border="0"        frameborder="no"        framespacing="0"        allowfullscreen="true"        width="100%" height="500" > </iframe><h3 id="1-3-进程和线程"><a href="#1-3-进程和线程" class="headerlink" title="1.3 进程和线程"></a>1.3 进程和线程</h3><ul><li><p>进程：是正在运行的程序</p><p>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位<br>动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡的<br>并发性：任何进程都可以同其他进程一起并发执行</p></li><li><p>线程：是进程中的单个顺序控制流，是一条执行路径</p><p>​    单线程：一个进程如果只有一条执行路径，则称为单线程程序</p><p>​    多线程：一个进程如果有多条执行路径，则称为多线程程序</p><p>​    <img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\04_多线程示例.png" alt="04_多线程示例"></p></li></ul><h3 id="1-4-实现多线程方式一：继承Thread类"><a href="#1-4-实现多线程方式一：继承Thread类" class="headerlink" title="1.4 实现多线程方式一：继承Thread类"></a>1.4 实现多线程方式一：继承Thread类</h3><ul><li><p>方法介绍</p><p>| 方法名       | 说明                                        |<br>| —————— | —————————————————————- |<br>| void run()   | 在线程开启后，此方法将被调用执行            |<br>| void start() | 使此线程开始执行，Java虚拟机会调用run方法() |</p></li><li><p>实现步骤</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类的对象</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        my1.run();</span></span><br><span class="line"><span class="comment">//        my2.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void start() 导致此线程开始执行; Java虚拟机调用此线程的run方法</span></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码解释</p><blockquote><p>在Java中，当你创建一个继承自<code>Thread</code>类的对象时，你可以选择重写<code>Thread</code>类中的<code>run</code>方法来定义线程的行为。在你的<code>MyThread</code>类中，你已经通过<code>@Override</code>注解重写了<code>run</code>方法，这样当你启动线程时，就会执行你定义的<code>run</code>方法中的代码。</p><p>至于为什么没有直接调用<code>t1.run()</code>或<code>t2.run()</code>而是调用了<code>t1.start()</code>和<code>t2.start()</code>，这里有一点需要澄清：</p><ul><li><p><code>run()</code>方法：如果你直接调用<code>run()</code>方法，那么<code>run</code>方法中的代码会在同一线程（通常是主线程）中执行，而不是在新线程中。这意味着它不会并发地运行，而是会同步地执行，这通常不是你想要的线程行为。</p></li><li><p><code>start()</code>方法：<code>start()</code>方法是<code>Thread</code>类中用于启动新线程的。当你调用<code>start()</code>方法时，它实际上是在内部调用了<code>run()</code>方法，但这次是在新创建的线程中调用。这样，<code>run</code>方法中的代码就会在新线程中并发执行。</p></li></ul><p>在你的<code>MyThreadTest</code>类的<code>main</code>方法中，你创建了两个<code>MyThread</code>对象<code>t1</code>和<code>t2</code>，然后分别给它们设置了名字，并调用了它们的<code>start()</code>方法。这会导致两个新线程的创建和启动，每个线程都会调用对应的<code>run</code>方法。</p><p>因此，当你运行这段代码时，实际上是有两个线程在运行：</p><ol><li>主线程（main线程），它负责启动其他线程。</li><li>线程1（由<code>t1.start()</code>创建）。</li><li>线程2（由<code>t2.start()</code>创建）。</li></ol><p>这两个新线程会并发地执行它们各自的<code>run</code>方法中的循环，打印出它们的名字和迭代变量<code>i</code>的值。由于线程调度是由操作系统负责的，所以这两个线程会交替执行，但具体哪个线程先执行，以及它们各自执行的顺序和速度，都是不确定的，并且可能在每次运行程序时都不同。</p></blockquote></li><li><p>两个小问题</p><ul><li><p>为什么要重写run()方法？</p><p>因为run()是用来封装被线程执行的代码</p></li><li><p>run()方法和start()方法的区别？</p><p>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p><p>start()：启动线程；然后由JVM调用此线程的run()方法</p></li></ul></li></ul><h3 id="1-5-实现多线程方式二：实现Runnable接口"><a href="#1-5-实现多线程方式二：实现Runnable接口" class="headerlink" title="1.5 实现多线程方式二：实现Runnable接口"></a>1.5 实现多线程方式二：实现Runnable接口</h3><ul><li><p>Thread构造方法</p><p>| 方法名                               | 说明                   |<br>| —————————————————— | ——————————— |<br>| Thread(Runnable target)              | 分配一个新的Thread对象 |<br>| Thread(Runnable target, String name) | 分配一个新的Thread对象 |</p></li><li><p>实现步骤</p><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建MyRunnable类的对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Thread类的对象，把MyRunnable对象作为构造方法的参数</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target)</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(my);</span></span><br><span class="line"><span class="comment">//        Thread t2 = new Thread(my);</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target, String name)</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-6-实现多线程方式三-实现Callable接口"><a href="#1-6-实现多线程方式三-实现Callable接口" class="headerlink" title="1.6 实现多线程方式三: 实现Callable接口"></a>1.6 实现多线程方式三: 实现Callable接口</h3><ul><li><p>方法介绍</p><p>| 方法名                           | 说明                                               |<br>| ———————————————— | ————————————————————————— |<br>| V call()                         | 计算结果，如果无法计算结果，则抛出一个异常         |<br>| FutureTask(Callable<V> callable) | 创建一个 FutureTask，一旦运行就执行给定的 Callable |<br>| V get()                          | 如有必要，等待计算完成，然后获取其结果             |</p></li><li><p>实现步骤</p><ul><li>定义一个类MyCallable实现Callable接口</li><li>在MyCallable类中重写call()方法</li><li>创建MyCallable类的对象</li><li>创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数</li><li>创建Thread类的对象，把FutureTask对象作为构造方法的参数</li><li>启动线程</li><li>再调用get方法，就可以获取线程结束之后的结果。</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跟女孩表白&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回值就表示线程运行完毕之后的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;答应&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//线程开启之后需要执行里面的call方法</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread t1 = new Thread(mc);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以获取线程执行完毕之后的结果.也可以作为参数传递给Thread对象</span></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>三种实现方式的对比</p><ul><li>实现Runnable、Callable接口<ul><li>好处: 扩展性强，实现该接口的同时还可以继承其他的类</li><li>缺点: 编程相对复杂，不能直接使用Thread类中的方法</li></ul></li><li>继承Thread类<ul><li>好处: 编程比较简单，可以直接使用Thread类中的方法</li><li>缺点: 可以扩展性较差，不能再继承其他的类</li></ul></li></ul></li></ul><h3 id="1-7-设置和获取线程名称"><a href="#1-7-设置和获取线程名称" class="headerlink" title="1.7 设置和获取线程名称"></a>1.7 设置和获取线程名称</h3><ul><li><p>方法介绍</p><p>| 方法名                     | 说明                               |<br>| ————————————— | ————————————————— |<br>| void  setName(String name) | 将此线程的名称更改为等于参数name   |<br>| String  getName()          | 返回此线程的名称                   |<br>| Thread  currentThread()    | 返回对当前正在执行的线程对象的引用 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void setName(String name)：将此线程的名称更改为等于参数 name</span></span><br><span class="line">        my1.setName(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        my2.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread(String name)</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static Thread currentThread() 返回对当前正在执行的线程对象的引用</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-8-线程休眠"><a href="#1-8-线程休眠" class="headerlink" title="1.8 线程休眠"></a>1.8 线程休眠</h3><ul><li><p>相关方法</p><p>| 方法名                         | 说明                                             |<br>| ——————————————— | ———————————————————————— |<br>| static void sleep(long millis) | 使当前正在执行的线程停留（暂停执行）指定的毫秒数 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*System.out.println(&quot;睡觉前&quot;);</span></span><br><span class="line"><span class="comment">        Thread.sleep(3000);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;睡醒了&quot;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-9-线程优先级"><a href="#1-9-线程优先级" class="headerlink" title="1.9 线程优先级"></a>1.9 线程优先级</h3><ul><li><p>线程调度</p><ul><li><p>两种调度方式</p><ul><li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li></ul></li><li><p>Java使用的是抢占式调度模型</p></li><li><p>随机性</p><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</p><p><img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\05_多线程示例图.png" alt="05_多线程示例图"></p></li></ul></li><li><p>优先级相关方法</p><p>| 方法名                                  | 说明                                                         |<br>| ———————————————————- | —————————————————————————————— |<br>| final int getPriority()                 | 返回此线程的优先级                                           |<br>| final void setPriority(int newPriority) | 更改此线程的优先级线程默认优先级是5；线程优先级的范围是：1-10 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程执行完毕了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//优先级: 1 - 10 默认值:5</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        t1.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        t1.setPriority(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//System.out.println(t1.getPriority());//5</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; ft2 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft2);</span><br><span class="line">        t2.setName(<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//System.out.println(t2.getPriority());//5</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-10-守护线程"><a href="#1-10-守护线程" class="headerlink" title="1.10 守护线程"></a>1.10 守护线程</h3><p><strong>当主线程终止时候，守护线程就陆续结束</strong></p><p>当QQ聊天窗口，有人发送文件的时候可以将 聊天框设为线程1，发送的文件设为线程2，此时线程2就可以看出守护线程</p><ul><li><p>相关方法</p><p>| 方法名                     | 说明                                                         |<br>| ————————————— | —————————————————————————————— |<br>| void setDaemon(boolean on) | 将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;女神&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;备胎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第二个线程设置为守护线程</span></span><br><span class="line">        <span class="comment">//当普通线程执行完之后,那么守护线程也没有继续运行下去的必要了.</span></span><br><span class="line">        t2.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-11-出让-礼让线程"><a href="#1-11-出让-礼让线程" class="headerlink" title="1.11 出让/礼让线程"></a>1.11 出让/礼让线程</h3><p><code>Thread.yield()</code><strong>为了让线程分配资源更加均匀</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            System.out.println(name + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-12-插入-插队线程"><a href="#1-12-插入-插队线程" class="headerlink" title="1.12 插入/插队线程"></a>1.12 插入/插队线程</h3><p><code>join</code> <strong>放在哪个线程之前就会先执行哪个</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.mult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r1);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-13-线程的生命周期"><a href="#1-13-线程的生命周期" class="headerlink" title="1.13 线程的生命周期"></a>1.13 线程的生命周期</h3><p><img src="images\Thread\线程的生命周期.png" alt="image-20240421140613455"></p><h3 id="1-14-线程的六大状态"><a href="#1-14-线程的六大状态" class="headerlink" title="1.14 线程的六大状态"></a>1.14 线程的六大状态</h3><p><strong>注意：这里是没有运行状态的是自己加入的</strong></p><p><img src="images\Thread\线程的状态01.png" alt="image-20240421153237609"></p><p><img src="images\Thread\线程的状态02.png" alt="image-20240421153405425"></p><h2 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2. 线程同步"></a>2. 线程同步</h2><h3 id="2-1卖票【应用】"><a href="#2-1卖票【应用】" class="headerlink" title="2.1卖票【应用】"></a>2.1卖票【应用】</h3><ul><li><p>案例需求</p><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p></li><li><p>实现步骤</p><ul><li><p>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets = 100;</p></li><li><p>在SellTicket类中重写run()方法实现卖票，代码步骤如下</p></li><li><p>判断票数大于0，就卖票，并告知是哪个窗口卖的</p></li><li>卖了票之后，总票数要减1</li><li>票卖没了，线程停止</li><li>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</li><li>创建SellTicket类的对象</li><li>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</li><li>启动线程</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//在SellTicket类中重写run()方法实现卖票，代码步骤如下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//卖完了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建SellTicket类的对象</span></span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2卖票案例的问题【理解】"><a href="#2-2卖票案例的问题【理解】" class="headerlink" title="2.2卖票案例的问题【理解】"></a>2.2卖票案例的问题【理解】</h3><ul><li><p>卖票出现了问题</p><ul><li><p>相同的票出现了多次</p></li><li><p>出现了负数的票</p></li></ul></li><li><p>问题产生原因</p><p>线程执行的随机性导致的,可能在卖票过程中丢失cpu的执行权,导致出现问题</p></li></ul><h3 id="2-3-同步代码块解决数据安全问题-锁🔒"><a href="#2-3-同步代码块解决数据安全问题-锁🔒" class="headerlink" title="2.3 同步代码块解决数据安全问题(锁🔒)"></a>2.3 同步代码块解决数据安全问题(锁🔒)</h3><ul><li><p>安全问题出现的条件</p><ul><li><p>是多线程环境</p></li><li><p>有共享数据</p></li><li><p>有多条语句操作共享数据</p></li></ul></li><li><p>如何解决多线程安全问题呢?</p><ul><li>基本思想：让程序没有安全问题的环境</li></ul></li><li><p>怎么实现呢?</p><ul><li><p>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</p></li><li><p>Java提供了同步代码块的方式来解决</p></li></ul></li><li><p>同步代码块格式：</p><p><strong>这里的对象通常写 当前类的字节码文件 —-&gt; test.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象) &#123; </span><br><span class="line">多条语句操作共享数据的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁，这里的对象需要是唯一的共享的</p></li><li><p>同步的好处和弊端  </p><ul><li><p>好处：解决了多线程的数据安全问题</p></li><li><p>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123; <span class="comment">// 对可能有安全问题的代码加锁,多个线程必须使用同一把锁</span></span><br><span class="line">                <span class="comment">//t1进来后，就会把这段代码给锁起来</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        <span class="comment">//t1休息100毫秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//窗口1正在出售第100张票</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--; <span class="comment">//tickets = 99;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//t1出来了，这段代码的锁就被释放了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-同步方法解决数据安全问题【应用】"><a href="#2-4-同步方法解决数据安全问题【应用】" class="headerlink" title="2.4 同步方法解决数据安全问题【应用】"></a>2.4 同步方法解决数据安全问题【应用】</h3><ul><li><p>同步方法的格式</p><p>同步方法：就是把synchronized关键字加到方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法的锁对象是什么呢?</p><p>​    this</p></li><li><p>静态同步方法</p><p>同步静态方法：就是把synchronized关键字加到静态方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步静态方法的锁对象是什么呢?</p><p>​    类名.class</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticketCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;窗口一&quot;</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                <span class="comment">//同步方法</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> synchronizedMthod();</span><br><span class="line">                <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;窗口二&quot;</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                <span class="comment">//同步代码块</span></span><br><span class="line">                <span class="keyword">synchronized</span> (MyRunnable.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ticketCount == <span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        ticketCount--;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">synchronizedMthod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ticketCount == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticketCount--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>```java<br>  public class Demo {</p><pre><code>  public static void main(String[] args) &#123;      MyRunnable mr = new MyRunnable();      Thread t1 = new Thread(mr);  Thread t2 = new Thread(mr);  t1.setName(&quot;窗口一&quot;);  t2.setName(&quot;窗口二&quot;);  t1.start();  t2.start();</code></pre><p>  }<br>}</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">### 2.5 Lock锁【应用】</span></span><br><span class="line"></span><br><span class="line">虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</span><br><span class="line"></span><br><span class="line">Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</span><br><span class="line"></span><br><span class="line">- ReentrantLock构造方法</span><br><span class="line"></span><br><span class="line">  | 方法名          | 说明                        |</span><br><span class="line">  | --------------- | --------------------------- |</span><br><span class="line">  | ReentrantLock() | 创建一个ReentrantLock的实例 |</span><br><span class="line"></span><br><span class="line">- 加锁解锁方法</span><br><span class="line"></span><br><span class="line">  | 方法名        | 说明   |</span><br><span class="line">  | ------------- | ------ |</span><br><span class="line">  | <span class="function"><span class="keyword">void</span> <span class="title">lock</span>()   | 获得锁 |</span></span><br><span class="line"><span class="function">  | <span class="keyword">void</span> <span class="title">unlock</span>() | 释放锁 |</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">- 代码演示</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  ```java</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">class</span> Ticket implements Runnable</span> &#123;</span><br><span class="line">        <span class="comment">//票的数量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">private</span> ReentrantLock <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  </span><br><span class="line">        @Override</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">//synchronized (obj)&#123;//多个线程必须使用同一把锁.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">                    <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//卖完了</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        ticket--;</span><br><span class="line">                        System.<span class="keyword">out</span>.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Demo</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">            Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">  </span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            Thread t2 = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            Thread t3 = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">  </span><br><span class="line">            t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">            t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">            t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line">  </span><br><span class="line">            t1.start();</span><br><span class="line">            t2.start();</span><br><span class="line">            t3.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6-死锁【理解】"><a href="#2-6-死锁【理解】" class="headerlink" title="2.6 死锁【理解】"></a>2.6 死锁【理解】</h3><ul><li><p>概述</p><p>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</p></li><li><p>什么情况下会产生死锁</p><ol><li>资源有限</li><li>同步嵌套</li></ol></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (objA)&#123;</span><br><span class="line">                    <span class="comment">//线程一</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (objB)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;小康同学正在走路&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (objB)&#123;</span><br><span class="line">                    <span class="comment">//线程二</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (objA)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;小薇同学正在走路&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-生产者消费者（等待唤醒机制）"><a href="#3-生产者消费者（等待唤醒机制）" class="headerlink" title="3. 生产者消费者（等待唤醒机制）"></a>3. 生产者消费者（等待唤醒机制）</h2><h3 id="3-1-生产者和消费者模式概述【应用】"><a href="#3-1-生产者和消费者模式概述【应用】" class="headerlink" title="3.1 生产者和消费者模式概述【应用】"></a>3.1 生产者和消费者模式概述【应用】</h3><ul><li><p>概述</p><p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻。</p><p>所谓生产者消费者问题，实际上主要是包含了两类线程：</p><p>​    一类是生产者线程用于生产数据</p><p>​    一类是消费者线程用于消费数据</p><p>为了解耦生产者和消费者的关系，通常会采用共享的数据区域，就像是一个仓库</p><p>生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为</p><p>消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为</p></li><li><p>Object类的等待和唤醒方法</p><p>| 方法名           | 说明                                                         |<br>| ———————— | —————————————————————————————— |<br>| void wait()      | 导致当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法 |<br>| void notify()    | 唤醒正在等待对象监视器的单个线程                             |<br>| void notifyAll() | 唤醒正在等待对象监视器的所有线程                             |</p></li></ul><h3 id="3-2-生产者和消费者案例【应用】"><a href="#3-2-生产者和消费者案例【应用】" class="headerlink" title="3.2 生产者和消费者案例【应用】"></a>3.2 生产者和消费者案例【应用】</h3><ul><li><p>案例需求</p><ul><li><p>桌子类(Desk)：定义表示包子数量的变量,定义锁对象变量,定义标记桌子上有无包子的变量</p></li><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.判断是否有包子,决定当前线程是否执行</p><p>2.如果有包子,就进入等待状态,如果没有包子,继续执行,生产包子</p><p>3.生产包子之后,更新桌子上包子状态,唤醒消费者消费包子</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.判断是否有包子,决定当前线程是否执行</p><p>2.如果没有包子,就进入等待状态,如果有包子,就消费包子</p><p>3.消费包子后,更新桌子上包子状态,唤醒生产者生产包子</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建生产者线程和消费者线程对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!Desk.flag)&#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">true</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">            <span class="comment">//1. while(true)死循环</span></span><br><span class="line">            <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">            <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">            <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(Desk.flag)&#123;</span><br><span class="line">                        <span class="comment">//有</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">false</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                        Desk.count--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*消费者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">        3，如果有就开吃</span></span><br><span class="line"><span class="comment">        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">        汉堡包的总数量减一*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生产者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">        如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">        2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">        3，叫醒等待的消费者开吃。*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>();</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>();</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-生产者和消费者案例优化【应用】"><a href="#3-3-生产者和消费者案例优化【应用】" class="headerlink" title="3.3 生产者和消费者案例优化【应用】"></a>3.3 生产者和消费者案例优化【应用】</h3><ul><li><p>需求</p><ul><li>将Desk类中的变量,采用面向对象的方式封装起来</li><li>生产者和消费者类中构造方法接收Desk类对象,之后在run方法中进行使用</li><li>创建生产者和消费者线程对象,构造方法中传入Desk类对象</li><li>开启两个线程</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="comment">//public static boolean flag = false;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="comment">//public static int count = 10;</span></span><br><span class="line">    <span class="comment">//以后我们在使用这种必须有默认值的变量</span></span><br><span class="line">   <span class="comment">// private int count = 10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="comment">//public static final Object lock = new Object();</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>,<span class="number">10</span>); <span class="comment">// 在空参内部调用带参,对成员变量进行赋值,之后就可以直接使用成员变量了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">(<span class="type">boolean</span> flag, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Desk&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&quot;, lock=&quot;</span> + lock +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(!desk.isFlag())&#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">true</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">            <span class="comment">//1. while(true)死循环</span></span><br><span class="line">            <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">            <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">            <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(desk.isFlag())&#123;</span><br><span class="line">                        <span class="comment">//有</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">false</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                        desk.setCount(desk.getCount() - <span class="number">1</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*消费者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">        3，如果有就开吃</span></span><br><span class="line"><span class="comment">        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">        汉堡包的总数量减一*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生产者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">        如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">        2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">        3，叫醒等待的消费者开吃。*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Desk</span> <span class="variable">desk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(desk);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(desk);</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4-阻塞队列基本使用【理解】"><a href="#3-4-阻塞队列基本使用【理解】" class="headerlink" title="3.4 阻塞队列基本使用【理解】"></a>3.4 阻塞队列基本使用【理解】</h3><p><img src="images\Thread\阻塞队列.png" alt="image-20240421152219693" style="zoom:50%;" /></p><ul><li><p>阻塞队列继承结构</p><p><img src="E:\JAVA\资料\黑马JAVASE\下\day31-多线程\笔记\img\06_阻塞队列继承结构.png" alt="06_阻塞队列继承结构"></p></li></ul><ul><li><p>常见BlockingQueue:</p><p>ArrayBlockingQueue: 底层是数组,有界</p><p>LinkedBlockingQueue: 底层是链表,无界.但不是真正的无界,最大为int的最大值</p></li><li><p>BlockingQueue的核心方法:</p><p>put(anObject): 将参数放入队列,如果放不进去会阻塞</p><p>take(): 取出第一个数据,取不到会阻塞</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建阻塞队列的对象,容量为 1</span></span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储元素</span></span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取元素</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        System.out.println(arrayBlockingQueue.take()); <span class="comment">// 取不到会阻塞</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5-阻塞队列实现等待唤醒机制【理解】"><a href="#3-5-阻塞队列实现等待唤醒机制【理解】" class="headerlink" title="3.5 阻塞队列实现等待唤醒机制【理解】"></a>3.5 阻塞队列实现等待唤醒机制【理解】</h3><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环向阻塞队列中添加包子</p><p>3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环获取阻塞队列中的包子</p><p>3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建阻塞队列对象</p><p>创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bd.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;厨师放入一个汉堡包&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">        <span class="comment">//1. while(true)死循环</span></span><br><span class="line">        <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">        <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">        <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> bd.take();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货将&quot;</span> + take + <span class="string">&quot;拿出来吃了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; bd = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(bd);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(bd);</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、-线程池"><a href="#二、-线程池" class="headerlink" title="二、 线程池"></a>二、 线程池</h2><h3 id="1-1-线程状态介绍"><a href="#1-1-线程状态介绍" class="headerlink" title="1.1 线程状态介绍"></a>1.1 线程状态介绍</h3><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p><p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* 新建 */</span></span><br><span class="line">        NEW , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 可运行状态 */</span></span><br><span class="line">        RUNNABLE , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 阻塞状态 */</span></span><br><span class="line">        BLOCKED , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 无限等待状态 */</span></span><br><span class="line">        WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计时等待 */</span></span><br><span class="line">        TIMED_WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 终止 */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前线程的状态</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdk.internal.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们可以看到Java中的线程存在6种状态，每种线程状态的含义如下</p><div class="table-container"><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread()只有线程象，没有线程特征。</td></tr><tr><td>RUNNABLE</td><td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度，那么我们把这个中间状态称之为可执行状态(RUNNABLE)也就是说它具备执行的资格，但是并没有真正的执行起来而是在等待CPU的度。</td></tr><tr><td>BLOCKED</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>WAITING</td><td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td></tr><tr><td>TIMED_WAITING</td><td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td></tr><tr><td>TERMINATED</td><td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态</td></tr></tbody></table></div><p>各个状态的转换，如下图所示：</p><p><img src="E:/JAVA/笔记/JAVASE/images/img/1591163781941.png" alt="1591163781941"></p><h3 id="1-2-线程池-基本原理"><a href="#1-2-线程池-基本原理" class="headerlink" title="1.2 线程池-基本原理"></a>1.2 线程池-基本原理</h3><p><strong>概述 :</strong> </p><p>​    提到池，大家应该能想到的就是水池。水池就是一个容器，在该容器中存储了很多的水。那么什么是线程池呢？线程池也是可以看做成一个池子，在该池子中存储很多个线程。</p><p>线程池存在的意义：</p><p>​    系统创建一个线程的成本是比较高的，因为它涉及到与操作系统交互，当程序中需要创建大量生存期很短暂的线程时，频繁的创建和销毁线程对系统的资源消耗有可能大于业务处理是对系统资源的消耗，这样就有点”舍本逐末”了。针对这一种情况，为了提高性能，我们就可以采用线程池。线程池在启动时，会创建大量空闲线程，当我们向线程池提交任务的时，线程池就会启动一个线程来执行该任务。等待任务执行完毕以后，线程并不会死亡，而是再次返回到线程池中称为空闲状态。等待下一次任务的执行。</p><p><strong>线程池的设计思路 :</strong></p><ol><li>准备一个任务容器</li><li>一次性启动多个(2个)消费者线程</li><li>刚开始任务容器是空的，所以线程都在wait</li><li>直到一个外部线程向这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒</li><li>这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来</li></ol><h3 id="1-3-线程池-Executors默认线程池"><a href="#1-3-线程池-Executors默认线程池" class="headerlink" title="1.3 线程池-Executors默认线程池"></a>1.3 线程池-Executors默认线程池</h3><p>概述 : JDK对线程池也进行了相关的实现，在真实企业开发中我们也很少去自定义线程池，而是使用JDK中自带的线程池。</p><p>我们可以使用Executors中所提供的<strong>静态</strong>方法来创建线程池</p><p>​    static ExecutorService newCachedThreadPool()   创建一个默认的线程池<br>​    static newFixedThreadPool(int nThreads)        创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//static ExecutorService newCachedThreadPool()   创建一个默认的线程池 上限为21个亿的线程</span></span><br><span class="line"><span class="comment">//static newFixedThreadPool(int nThreads)    创建一个指定最多线程数量的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//Executors --- 可以帮助我们创建线程池对象</span></span><br><span class="line">        <span class="comment">//ExecutorService --- 可以帮助我们控制线程池</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(2000);</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-4-线程池-Executors创建指定上限的线程池"><a href="#1-4-线程池-Executors创建指定上限的线程池" class="headerlink" title="1.4 线程池-Executors创建指定上限的线程池"></a>1.4 线程池-Executors创建指定上限的线程池</h3><p><strong>使用Executors中所提供的静态方法来创建线程池</strong></p><p>​    static ExecutorService newFixedThreadPool(int nThreads) : 创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line"><span class="comment">//创建一个指定最多线程数量的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//参数不是初始值而是最大值</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> (ThreadPoolExecutor) executorService;</span><br><span class="line">        System.out.println(pool.getPoolSize());<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(pool.getPoolSize());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//        executorService.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-线程池-ThreadPoolExecutor"><a href="#1-5-线程池-ThreadPoolExecutor" class="headerlink" title="1.5 线程池-ThreadPoolExecutor"></a>1.5 线程池-ThreadPoolExecutor</h3><p><strong>创建线程池对象 :</strong> </p><p>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略);</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo3</span> &#123;</span><br><span class="line"><span class="comment">//    参数一：核心线程数量</span></span><br><span class="line"><span class="comment">//    参数二：最大线程数</span></span><br><span class="line"><span class="comment">//    参数三：空闲线程最大存活时间</span></span><br><span class="line"><span class="comment">//    参数四：时间单位</span></span><br><span class="line"><span class="comment">//    参数五：任务队列</span></span><br><span class="line"><span class="comment">//    参数六：创建线程工厂</span></span><br><span class="line"><span class="comment">//    参数七：任务的拒绝策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>), Executors.defaultThreadFactory(),<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-线程池-参数详解"><a href="#1-6-线程池-参数详解" class="headerlink" title="1.6 线程池-参数详解"></a>1.6 线程池-参数详解</h3><p><img src="images\img\1591165506516.png" alt="1591165506516"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span></span><br><span class="line">    </span><br><span class="line">corePoolSize：   核心线程的最大值，不能小于<span class="number">0</span></span><br><span class="line">maximumPoolSize：最大线程数，不能小于等于<span class="number">0</span>，maximumPoolSize &gt;= corePoolSize</span><br><span class="line">keepAliveTime：  空闲线程最大存活时间,不能小于<span class="number">0</span></span><br><span class="line">unit：           时间单位</span><br><span class="line">workQueue：      任务队列，不能为<span class="literal">null</span></span><br><span class="line">threadFactory：  创建线程工厂,不能为<span class="literal">null</span>      </span><br><span class="line">handler：        任务的拒绝策略,不能为<span class="literal">null</span>  </span><br></pre></td></tr></table></figure><h3 id="1-7-线程池-非默认任务拒绝策略"><a href="#1-7-线程池-非默认任务拒绝策略" class="headerlink" title="1.7 线程池-非默认任务拒绝策略"></a>1.7 线程池-非默认任务拒绝策略</h3><p>RejectedExecutionHandler是jdk提供的一个任务拒绝策略接口，它下面存在4个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:     丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：    丢弃任务，但是不抛出异常 这是不推荐的做法。</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。</span><br></pre></td></tr></table></figure><p>注：明确线程池对多可执行的任务数 = 队列容量 + 最大线程数</p><p><strong>案例演示1</strong>：演示ThreadPoolExecutor.AbortPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用AbortPolicy这个任务处理策略的时候，就会抛出异常</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示2</strong>：演示ThreadPoolExecutor.DiscardPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用DiscardPolicy这个任务处理策略的时候，控制台不会报错</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台没有报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示3</strong>：演示ThreadPoolExecutor.DiscardOldestPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            <span class="comment">// 定义一个变量，来指定指定当前执行的任务;这个变量需要被final修饰</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x ;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span> + y);</span><br><span class="line">            &#125;);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">4</span></span><br></pre></td></tr></table></figure><p>由于任务1在线程池中等待时间最长，因此任务1被丢弃。</p><p><strong>案例演示4</strong>：演示ThreadPoolExecutor.CallerRunsPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">main----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到次策略没有通过线程池中的线程执行任务，而是直接调用任务的run()方法绕过线程池直接执行。</p><h3 id="1-7-线程池多大合适"><a href="#1-7-线程池多大合适" class="headerlink" title="1.7 线程池多大合适"></a>1.7 线程池多大合适</h3><ul><li><p><strong>CPU密集型运算：最大并行数 + 1</strong></p></li><li><p><strong>I/O密集型运算：</strong></p><script type="math/tex; mode=display">最大并行数 * 期望CPU利用率 * (总时间(CPU计算时间+等待时间)/CPU计算时间)</script></li></ul><h2 id="三、多线程综合练习"><a href="#三、多线程综合练习" class="headerlink" title="三、多线程综合练习"></a>三、多线程综合练习</h2><h3 id="练习一：售票"><a href="#练习一：售票" class="headerlink" title="练习一：售票"></a>练习一：售票</h3><p>需求：</p><p>​    一共有1000张电影票,可以在两个窗口领取,假设每次领取的时间为3000毫秒,</p><p>​    请用多线程模拟卖票过程并打印剩余电影票的数量</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种方式实现多线程，测试类中MyThread会创建多次，所以需要加static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="comment">//3.判断共享数据（已经到末尾）</span></span><br><span class="line">                <span class="keyword">if</span> (ticket == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//4.判断共享数据（没有到末尾）</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket--;</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;在卖票，还剩下&quot;</span> + ticket + <span class="string">&quot;张票!!!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            一共有1000张电影票,可以在两个窗口领取,假设每次领取的时间为3000毫秒,</span></span><br><span class="line"><span class="comment">            要求:请用多线程模拟卖票过程并打印剩余电影票的数量</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习二：赠送礼物"><a href="#练习二：赠送礼物" class="headerlink" title="练习二：赠送礼物"></a>练习二：赠送礼物</h3><p>需求：</p><p>​    有100份礼品,两人同时发送，当剩下的礼品小于10份的时候则不再送出。</p><p>​    利用多线程模拟该过程并将线程的名字和礼物的剩余数量打印出来.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式实现多线程，测试类中MyRunable只创建一次，所以不需要加static</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="comment">//3.判断共享数据（已经到末尾）</span></span><br><span class="line">                <span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;礼物还剩下&quot;</span> + count + <span class="string">&quot;不再赠送&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//4.判断共享数据（没有到末尾）</span></span><br><span class="line">                    count--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在赠送礼物，还剩下&quot;</span> + count + <span class="string">&quot;个礼物!!!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有100份礼品,两人同时发送，当剩下的礼品小于10份的时候则不再送出，</span></span><br><span class="line"><span class="comment">            利用多线程模拟该过程并将线程的名字和礼物的剩余数量打印出来.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建参数对象</span></span><br><span class="line">        <span class="type">MyRunable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习三：打印数字"><a href="#练习三：打印数字" class="headerlink" title="练习三：打印数字"></a>练习三：打印数字</h3><p>需求：</p><p>​    同时开启两个线程，共同获取1-100之间的所有数字。</p><p>​    将输出所有的奇数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式实现多线程，测试类中MyRunable只创建一次，所以不需要加static</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.同步代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="comment">//3.判断共享数据（已经到末尾）</span></span><br><span class="line">                <span class="keyword">if</span> (number &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//4.判断共享数据（没有到末尾）</span></span><br><span class="line">                    <span class="keyword">if</span>(number % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;打印数字&quot;</span> + number);</span><br><span class="line">                    &#125;</span><br><span class="line">                    number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           同时开启两个线程，共同获取1-100之间的所有数字。</span></span><br><span class="line"><span class="comment">           要求：将输出所有的奇数。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建参数对象</span></span><br><span class="line">        <span class="type">MyRunable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr,<span class="string">&quot;线程B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习四：抢红包"><a href="#练习四：抢红包" class="headerlink" title="练习四：抢红包"></a>练习四：抢红包</h3><p>需求：</p><p>​    抢红包也用到了多线程。</p><p>​    假设：100块，分成了3个包，现在有5个人去抢。</p><p>​    其中，红包是共享数据。</p><p>​    5个人是5条线程。</p><p>​    打印结果如下：</p><p>​          XXX抢到了XXX元</p><p>​          XXX抢到了XXX元</p><pre><code>      XXX抢到了XXX元     XXX没抢到     XXX没抢到</code></pre><p>解决方案一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//共享数据</span></span><br><span class="line">    <span class="comment">//100块，分成了3个包</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最小的中奖金额</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">MIN</span> <span class="operator">=</span> <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//同步代码块</span></span><br><span class="line">        <span class="keyword">synchronized</span> (MyThread.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//判断，共享数据是否到了末尾（已经到末尾）</span></span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;没有抢到红包！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//判断，共享数据是否到了末尾（没有到末尾）</span></span><br><span class="line">                <span class="comment">//定义一个变量，表示中奖的金额</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">prize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//表示此时是最后一个红包</span></span><br><span class="line">                    <span class="comment">//就无需随机，剩余所有的钱都是中奖金额</span></span><br><span class="line">                    prize = money;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//表示第一次，第二次（随机）</span></span><br><span class="line">                    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                    <span class="comment">//100 元   3个包</span></span><br><span class="line">                    <span class="comment">//第一个红包：99.98</span></span><br><span class="line">                    <span class="comment">//100 - (3-1) * 0.01</span></span><br><span class="line">                    <span class="type">double</span> <span class="variable">bounds</span> <span class="operator">=</span> money - (count - <span class="number">1</span>) * MIN;</span><br><span class="line">                    prize = r.nextDouble(bounds);</span><br><span class="line">                    <span class="keyword">if</span>(prize &lt; MIN)&#123;</span><br><span class="line">                        prize = MIN;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从money当中，去掉当前中奖的金额</span></span><br><span class="line">                money = money - prize;</span><br><span class="line">                <span class="comment">//红包的个数-1</span></span><br><span class="line">                count--;</span><br><span class="line">                <span class="comment">//本次红包的信息进行打印</span></span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;抢到了&quot;</span> + prize + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            微信中的抢红包也用到了多线程。</span></span><br><span class="line"><span class="comment">            假设：100块，分成了3个包，现在有5个人去抢。</span></span><br><span class="line"><span class="comment">            其中，红包是共享数据。</span></span><br><span class="line"><span class="comment">            5个人是5条线程。</span></span><br><span class="line"><span class="comment">            打印结果如下：</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX没抢到</span></span><br><span class="line"><span class="comment">            XXX没抢到</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程的对象</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给线程设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;小A&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;小QQ&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;小哈哈&quot;</span>);</span><br><span class="line">        t4.setName(<span class="string">&quot;小诗诗&quot;</span>);</span><br><span class="line">        t5.setName(<span class="string">&quot;小丹丹&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总金额</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">BigDecimal</span> <span class="variable">money</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">100.0</span>);</span><br><span class="line">    <span class="comment">//个数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//最小抽奖金额</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BigDecimal</span> <span class="variable">MIN</span> <span class="operator">=</span> BigDecimal.valueOf(<span class="number">0.01</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MyThread.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;没有抢到红包！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//中奖金额</span></span><br><span class="line">                BigDecimal prize;</span><br><span class="line">                <span class="keyword">if</span>(count == <span class="number">1</span>)&#123;</span><br><span class="line">                    prize = money;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//获取抽奖范围</span></span><br><span class="line">                    <span class="type">double</span> <span class="variable">bounds</span> <span class="operator">=</span> money.subtract(BigDecimal.valueOf(count-<span class="number">1</span>).multiply(MIN)).doubleValue();</span><br><span class="line">                    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                    <span class="comment">//抽奖金额</span></span><br><span class="line">                    prize = BigDecimal.valueOf(r.nextDouble(bounds));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置抽中红包，小数点保留两位，四舍五入</span></span><br><span class="line">                prize = prize.setScale(<span class="number">2</span>,RoundingMode.HALF_UP);</span><br><span class="line">                <span class="comment">//在总金额中去掉对应的钱</span></span><br><span class="line">                money = money.subtract(prize);</span><br><span class="line">                <span class="comment">//红包少了一个</span></span><br><span class="line">                count--;</span><br><span class="line">                <span class="comment">//输出红包信息</span></span><br><span class="line">                System.out.println(getName() + <span class="string">&quot;抽中了&quot;</span> + prize + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            微信中的抢红包也用到了多线程。</span></span><br><span class="line"><span class="comment">            假设：100块，分成了3个包，现在有5个人去抢。</span></span><br><span class="line"><span class="comment">            其中，红包是共享数据。</span></span><br><span class="line"><span class="comment">            5个人是5条线程。</span></span><br><span class="line"><span class="comment">            打印结果如下：</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX抢到了XXX元</span></span><br><span class="line"><span class="comment">            XXX没抢到</span></span><br><span class="line"><span class="comment">            XXX没抢到</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;小A&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;小QQ&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;小哈哈&quot;</span>);</span><br><span class="line">        t4.setName(<span class="string">&quot;小诗诗&quot;</span>);</span><br><span class="line">        t5.setName(<span class="string">&quot;小丹丹&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习五：抽奖箱"><a href="#练习五：抽奖箱" class="headerlink" title="练习五：抽奖箱"></a>练习五：抽奖箱</h3><p>需求：</p><p>​    有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 {10,5,20,50,100,200,500,800,2,80,300,700}; </p><p>创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2” </p><p>随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</p><p>​               每次抽出一个奖项就打印一个(随机)</p><p>​        抽奖箱1 又产生了一个 10 元大奖</p><pre><code>      抽奖箱1 又产生了一个 100 元大奖      抽奖箱1 又产生了一个 200 元大奖      抽奖箱1 又产生了一个 800 元大奖  </code></pre><p>​        抽奖箱2 又产生了一个 700 元大奖  </p><pre><code>      .....</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.循环</span></span><br><span class="line">        <span class="comment">//2.同步代码块</span></span><br><span class="line">        <span class="comment">//3.判断</span></span><br><span class="line">        <span class="comment">//4.判断</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//继续抽奖</span></span><br><span class="line">                    Collections.shuffle(list);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prize</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">                    System.out.println(getName() + <span class="string">&quot;又产生了一个&quot;</span> + prize + <span class="string">&quot;元大奖&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span></span><br><span class="line"><span class="comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span></span><br><span class="line"><span class="comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span></span><br><span class="line"><span class="comment">                             每次抽出一个奖项就打印一个(随机)</span></span><br><span class="line"><span class="comment">            抽奖箱1 又产生了一个 10 元大奖</span></span><br><span class="line"><span class="comment">            抽奖箱1 又产生了一个 100 元大奖</span></span><br><span class="line"><span class="comment">            抽奖箱1 又产生了一个 200 元大奖</span></span><br><span class="line"><span class="comment">            抽奖箱1 又产生了一个 800 元大奖</span></span><br><span class="line"><span class="comment">            抽奖箱2 又产生了一个 700 元大奖</span></span><br><span class="line"><span class="comment">            .....</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建奖池</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">800</span>,<span class="number">2</span>,<span class="number">80</span>,<span class="number">300</span>,<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;抽奖箱1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;抽奖箱2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习六：多线程统计并求最大值"><a href="#练习六：多线程统计并求最大值" class="headerlink" title="练习六：多线程统计并求最大值"></a>练习六：多线程统计并求最大值</h3><p>需求：</p><p>​    在上一题基础上继续完成如下需求：</p><p>​     每次抽的过程中，不打印，抽完时一次性打印(随机)</p><p>​     在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</p><p>​              分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</p><p>​     在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</p><p>​              分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</p><p>解决方案一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程一</span></span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//线程二</span></span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">&quot;抽奖箱1&quot;</span>.equals(getName()))&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;抽奖箱1&quot;</span> + list1);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;抽奖箱2&quot;</span> + list2);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//继续抽奖</span></span><br><span class="line">                    Collections.shuffle(list);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prize</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">&quot;抽奖箱1&quot;</span>.equals(getName()))&#123;</span><br><span class="line">                        list1.add(prize);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        list2.add(prize);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span></span><br><span class="line"><span class="comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span></span><br><span class="line"><span class="comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span></span><br><span class="line"><span class="comment">            每次抽的过程中，不打印，抽完时一次性打印(随机)    在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</span></span><br><span class="line"><span class="comment">                分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</span></span><br><span class="line"><span class="comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</span></span><br><span class="line"><span class="comment">                分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建奖池</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">800</span>,<span class="number">2</span>,<span class="number">80</span>,<span class="number">300</span>,<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;抽奖箱1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;抽奖箱2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; boxList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//1 //2</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyThread.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(getName() + boxList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//继续抽奖</span></span><br><span class="line">                    Collections.shuffle(list);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prize</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">                    boxList.add(prize);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span></span><br><span class="line"><span class="comment">            创建两个抽奖箱(线程)设置线程名称分别为“抽奖箱1”，“抽奖箱2”</span></span><br><span class="line"><span class="comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span></span><br><span class="line"><span class="comment">            每次抽的过程中，不打印，抽完时一次性打印(随机)    在此次抽奖过程中，抽奖箱1总共产生了6个奖项。</span></span><br><span class="line"><span class="comment">                分别为：10,20,100,500,2,300最高奖项为300元，总计额为932元</span></span><br><span class="line"><span class="comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项。</span></span><br><span class="line"><span class="comment">                分别为：5,50,200,800,80,700最高奖项为800元，总计额为1835元</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建奖池</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">800</span>,<span class="number">2</span>,<span class="number">80</span>,<span class="number">300</span>,<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程</span></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;抽奖箱1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;抽奖箱2&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习七：多线程之间的比较"><a href="#练习七：多线程之间的比较" class="headerlink" title="练习七：多线程之间的比较"></a>练习七：多线程之间的比较</h3><p>需求：</p><p>​    在上一题基础上继续完成如下需求：</p><p>​    在此次抽奖过程中，抽奖箱1总共产生了6个奖项，分别为：10,20,100,500,2,300</p><pre><code>  最高奖项为300元，总计额为932元</code></pre><p>​    在此次抽奖过程中，抽奖箱2总共产生了6个奖项，分别为：5,50,200,800,80,700</p><pre><code>  最高奖项为800元，总计额为1835元</code></pre><p>​    在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</p><p>​    以上打印效果只是数据模拟,实际代码运行的效果会有差异</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCallable</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; boxList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//1 //2</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyCallable.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + boxList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//继续抽奖</span></span><br><span class="line">                    Collections.shuffle(list);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">prize</span> <span class="operator">=</span> list.remove(<span class="number">0</span>);</span><br><span class="line">                    boxList.add(prize);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把集合中的最大值返回</span></span><br><span class="line">        <span class="keyword">if</span>(boxList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.max(boxList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.test7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一个抽奖池,该抽奖池中存放了奖励的金额,该抽奖池中的奖项为 &#123;10,5,20,50,100,200,500,800,2,80,300,700&#125;;</span></span><br><span class="line"><span class="comment">            创建两个抽奖箱(线程)设置线程名称分别为    &quot;抽奖箱1&quot;, &quot;抽奖箱2&quot;</span></span><br><span class="line"><span class="comment">            随机从抽奖池中获取奖项元素并打印在控制台上,格式如下:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            在此次抽奖过程中，抽奖箱1总共产生了6个奖项，分别为：10,20,100,500,2,300</span></span><br><span class="line"><span class="comment">            最高奖项为300元，总计额为932元</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            在此次抽奖过程中，抽奖箱2总共产生了6个奖项，分别为：5,50,200,800,80,700</span></span><br><span class="line"><span class="comment">            最高奖项为800元，总计额为1835元</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</span></span><br><span class="line"><span class="comment">            核心逻辑：获取线程抽奖的最大值（看成是线程运行的结果）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            以上打印效果只是数据模拟,实际代码运行的效果会有差异</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建奖池</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="number">10</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">800</span>,<span class="number">2</span>,<span class="number">80</span>,<span class="number">300</span>,<span class="number">700</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多线程要运行的参数对象</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建多线程运行结果的管理者对象</span></span><br><span class="line">        <span class="comment">//线程一</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft1 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line">        <span class="comment">//线程二</span></span><br><span class="line">        FutureTask&lt;Integer&gt; ft2 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft1);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置名字</span></span><br><span class="line">        t1.setName(<span class="string">&quot;抽奖箱1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;抽奖箱2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max1</span> <span class="operator">=</span> ft1.get();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max2</span> <span class="operator">=</span> ft2.get();</span><br><span class="line"></span><br><span class="line">        System.out.println(max1);</span><br><span class="line">        System.out.println(max2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为800元</span></span><br><span class="line">        <span class="keyword">if</span>(max1 == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为&quot;</span>+max2+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max2 == <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在此次抽奖过程中,抽奖箱1中产生了最大奖项,该奖项金额为&quot;</span>+max1+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max1 &gt; max2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在此次抽奖过程中,抽奖箱1中产生了最大奖项,该奖项金额为&quot;</span>+max1+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(max1 &lt; max2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在此次抽奖过程中,抽奖箱2中产生了最大奖项,该奖项金额为&quot;</span>+max2+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两者的最大奖项是一样的&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、原子性"><a href="#四、原子性" class="headerlink" title="四、原子性"></a>四、原子性</h2><h3 id="2-1-volatile-问题"><a href="#2-1-volatile-问题" class="headerlink" title="2.1 volatile-问题"></a>2.1 volatile-问题</h3><p><strong>代码分析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(Money.money == <span class="number">100000</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Money.money = <span class="number">90000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>程序问题 :</strong>  女孩虽然知道结婚基金是十万，但是当基金的余额发生变化的时候，女孩无法知道最新的余额。</p><h3 id="2-2-volatile解决"><a href="#2-2-volatile解决" class="headerlink" title="2.2 volatile解决"></a>2.2 volatile解决</h3><p><strong>以上案例出现的问题 :</strong></p><p>​    当A线程修改了共享数据时，B线程没有及时获取到最新的值，如果还在使用原先的值，就会出现问题 </p><p>​    1，堆内存是唯一的，每一个线程都有自己的线程栈。</p><p>​    2 ，每一个线程在使用堆里面变量的时候，都会先拷贝一份到变量的副本中。</p><p>​    3 ，在线程中，每一次使用是从变量的副本中获取的。</p><p><strong>Volatile关键字 :</strong> 强制线程每次在使用的时候，都会看一下共享区域最新的值</p><p><strong>代码实现 :</strong> <strong>使用volatile关键字解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(Money.money == <span class="number">100000</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Money.money = <span class="number">90000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-synchronized解决"><a href="#2-3-synchronized解决" class="headerlink" title="2.3 synchronized解决"></a>2.3 synchronized解决</h3><p><strong>synchronized解决 :</strong> </p><p>​    1 ，线程获得锁</p><p>​    2 ，清空变量副本</p><p>​    3 ，拷贝共享变量最新的值到变量副本中</p><p>​    4 ，执行代码</p><p>​    5 ，将修改后变量副本中的值赋值给共享数据</p><p>​    6 ，释放锁</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Money.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Money.money != <span class="number">100000</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Money.lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Money.money = <span class="number">90000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-原子性"><a href="#2-4-原子性" class="headerlink" title="2.4 原子性"></a>2.4 原子性</h3><p><strong>概述 :</strong> 所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//送冰淇淋的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码总结 :</strong> count++ 不是一个原子性操作, 他在执行的过程中,有可能被其他线程打断</p><h3 id="2-5-volatile关键字不能保证原子性"><a href="#2-5-volatile关键字不能保证原子性" class="headerlink" title="2.5 volatile关键字不能保证原子性"></a>2.5 volatile关键字不能保证原子性</h3><p>解决方案 : 我们可以给count++操作添加锁，那么count++操作就是临界区中的代码，临界区中的代码一次只能被一个线程去执行，所以count++就变成了原子操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//送冰淇淋的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-原子性-AtomicInteger"><a href="#2-6-原子性-AtomicInteger" class="headerlink" title="2.6 原子性_AtomicInteger"></a>2.6 原子性_AtomicInteger</h3><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。因为变</p><p>量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性(字段)。本次我们只讲解</p><p>使用原子的方式更新基本类型，使用原子的方式更新基本类型Atomic包提供了以下3个类：</p><p>AtomicBoolean： 原子更新布尔类型</p><p>AtomicInteger：   原子更新整型</p><p>AtomicLong：    原子更新长整型</p><p>以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">()</span>：       初始化一个默认值为<span class="number">0</span>的原子型Integer</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">(<span class="type">int</span> initialValue)</span>：  初始化一个指定值的原子型Integer</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>:    获取值</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>:       以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增前的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span>:      以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增后的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">int</span> data)</span>: 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> value)</span>:    以原子方式设置为newValue的值，并返回旧值。</span><br></pre></td></tr></table></figure><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomIntergerDemo1</span> &#123;</span><br><span class="line"><span class="comment">//    public AtomicInteger()：               初始化一个默认值为0的原子型Integer</span></span><br><span class="line"><span class="comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.println(ac2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomIntergerDemo2</span> &#123;</span><br><span class="line"><span class="comment">//    int get():    获取值</span></span><br><span class="line"><span class="comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span></span><br><span class="line"><span class="comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span></span><br><span class="line"><span class="comment">//    int addAndGet(int data): 以原子方式将参数与对象中的值相加，并返回结果。</span></span><br><span class="line"><span class="comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac1.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int andIncrement = ac2.getAndIncrement();</span></span><br><span class="line"><span class="comment">//        System.out.println(andIncrement);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac2.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int i = ac3.incrementAndGet();</span></span><br><span class="line"><span class="comment">//        System.out.println(i);//自增后的值</span></span><br><span class="line"><span class="comment">//        System.out.println(ac3.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int i = ac4.addAndGet(20);</span></span><br><span class="line"><span class="comment">//        System.out.println(i);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac4.get());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">andSet</span> <span class="operator">=</span> ac5.getAndSet(<span class="number">20</span>);</span><br><span class="line">        System.out.println(andSet);</span><br><span class="line">        System.out.println(ac5.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-AtomicInteger-内存解析"><a href="#2-7-AtomicInteger-内存解析" class="headerlink" title="2.7 AtomicInteger-内存解析"></a>2.7 AtomicInteger-内存解析</h3><p><strong>AtomicInteger原理 :</strong> 自旋锁  + CAS 算法</p><p><strong>CAS算法：</strong></p><p>​    有3个操作数（内存值V， 旧的预期值A，要修改的值B）</p><p>​    当旧的预期值A == 内存值   此时修改成功，将V改为B                 </p><p>​    当旧的预期值A！=内存值   此时修改失败，不做任何操作                 </p><p>​    并重新获取现在的最新值（这个重新获取的动作就是自旋）</p><h3 id="2-8-AtomicInteger-源码解析"><a href="#2-8-AtomicInteger-源码解析" class="headerlink" title="2.8 AtomicInteger-源码解析"></a>2.8 AtomicInteger-源码解析</h3><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.threadatom4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//private volatile int count = 0; //送冰淇淋的数量</span></span><br><span class="line">    <span class="comment">//private Object lock = new Object();</span></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            <span class="comment">//synchronized (lock) &#123;</span></span><br><span class="line"><span class="comment">//                count++;</span></span><br><span class="line"><span class="comment">//                ac++;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ac.incrementAndGet();</span><br><span class="line">            System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>源码解析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先自增，然后获取自增后的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//+ 1 自增后的结果</span></span><br><span class="line">        <span class="comment">//this 就表示当前的atomicInteger（值）</span></span><br><span class="line">        <span class="comment">//1    自增一次</span></span><br><span class="line">        <span class="keyword">return</span> U.getAndAddInt(<span class="built_in">this</span>, VALUE, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="comment">//v 旧值</span></span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="comment">//自旋的过程</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//不断的获取旧值</span></span><br><span class="line">            v = getIntVolatile(o, offset);</span><br><span class="line">            <span class="comment">//如果这个方法的返回值为false，那么继续自旋</span></span><br><span class="line">            <span class="comment">//如果这个方法的返回值为true，那么自旋结束</span></span><br><span class="line">            <span class="comment">//o 表示的就是内存值</span></span><br><span class="line">            <span class="comment">//v 旧值</span></span><br><span class="line">            <span class="comment">//v + delta 修改后的值</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));</span><br><span class="line">            <span class="comment">//作用：比较内存中的值，旧值是否相等，如果相等就把修改后的值写到内存中，返回true。表示修改成功。</span></span><br><span class="line">            <span class="comment">//                                 如果不相等，无法把修改后的值写到内存中，返回false。表示修改失败。</span></span><br><span class="line">            <span class="comment">//如果修改失败，那么继续自旋。</span></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-悲观锁和乐观锁"><a href="#2-9-悲观锁和乐观锁" class="headerlink" title="2.9 悲观锁和乐观锁"></a>2.9 悲观锁和乐观锁</h3><p><strong>synchronized和CAS的区别 :</strong> </p><p><strong>相同点：</strong>在多线程情况下，都可以保证共享数据的安全性。</p><p><strong>不同点：</strong>synchronized总是从最坏的角度出发，认为每次获取数据的时候，别人都有可能修改。所以在每                       次操作共享数据之前，都会上锁。（悲观锁）</p><p>​    cas是从乐观的角度出发，假设每次获取数据别人都不会修改，所以不会上锁。只不过在修改共享数据的时候，会检查一下，别人有没有修改过这个数据。</p><p>​    如果别人修改过，那么我再次获取现在最新的值。            </p><p>​     如果别人没有修改过，那么我现在直接修改共享数据的值.(乐观锁）</p><h2 id="五、-并发工具类"><a href="#五、-并发工具类" class="headerlink" title="五、 并发工具类"></a>五、 并发工具类</h2><h3 id="3-1-并发工具类-Hashtable"><a href="#3-1-并发工具类-Hashtable" class="headerlink" title="3.1 并发工具类-Hashtable"></a>3.1 并发工具类-Hashtable</h3><p>​    <strong>Hashtable出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHashtableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">25</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//为了t1和t2能把数据全部添加完毕</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0-0 1-1 ..... 50- 50</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            System.out.println(hm.get(i + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;<span class="comment">//0 1 2 3 .... 50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-并发工具类-ConcurrentHashMap基本使用"><a href="#3-2-并发工具类-ConcurrentHashMap基本使用" class="headerlink" title="3.2 并发工具类-ConcurrentHashMap基本使用"></a>3.2 并发工具类-ConcurrentHashMap基本使用</h3><p>​    <strong>ConcurrentHashMap出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p>基于以上两个原因我们可以使用JDK1.5以后所提供的ConcurrentHashMap。</p><p><strong>体系结构 :</strong> </p><p><img src="E:/JAVA/笔记/JAVASE/img/1591168965857.png" alt="1591168965857"></p><p><strong>总结 :</strong> </p><p>​    1 ，HashMap是线程不安全的。多线程环境下会有数据安全问题</p><p>​    2 ，Hashtable是线程安全的，但是会将整张表锁起来，效率低下</p><p>​    3，ConcurrentHashMap也是线程安全的，效率较高。     在JDK7和JDK8中，底层原理不一样。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConcurrentHashMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ConcurrentHashMap&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">25</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//为了t1和t2能把数据全部添加完毕</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0-0 1-1 ..... 50- 50</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            System.out.println(hm.get(i + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;<span class="comment">//0 1 2 3 .... 50</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-并发工具类-ConcurrentHashMap1-7原理"><a href="#3-3-并发工具类-ConcurrentHashMap1-7原理" class="headerlink" title="3.3 并发工具类-ConcurrentHashMap1.7原理"></a>3.3 并发工具类-ConcurrentHashMap1.7原理</h3><p><img src="E:/JAVA/笔记/JAVASE/img/1591169254280.png" alt="1591169254280"></p><h3 id="3-4-并发工具类-ConcurrentHashMap1-8原理"><a href="#3-4-并发工具类-ConcurrentHashMap1-8原理" class="headerlink" title="3.4 并发工具类-ConcurrentHashMap1.8原理"></a>3.4 并发工具类-ConcurrentHashMap1.8原理</h3><p><img src="E:/JAVA/笔记/JAVASE/img/1591169338256.png" alt="1591169338256"></p><p><strong>总结 :</strong> </p><p>​    1，如果使用空参构造创建ConcurrentHashMap对象，则什么事情都不做。     在第一次添加元素的时候创建哈希表</p><p>​    2，计算当前元素应存入的索引。</p><p>​    3，如果该索引位置为null，则利用cas算法，将本结点添加到数组中。</p><p>​    4，如果该索引位置不为null，则利用volatile关键字获得当前位置最新的结点地址，挂在他下面，变成链表。        </p><p>​    5，当链表的长度大于等于8时，自动转换成红黑树6，以链表或者红黑树头结点为锁对象，配合悲观锁保证多线程操作集合时数据的安全性</p><h3 id="3-5-并发工具类-CountDownLatch"><a href="#3-5-并发工具类-CountDownLatch" class="headerlink" title="3.5 并发工具类-CountDownLatch"></a>3.5 并发工具类-CountDownLatch</h3><p><strong>CountDownLatch类 :</strong>         </p><div class="table-container"><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>public CountDownLatch(int count)</td><td>参数传递线程数，表示等待线程数量</td></tr><tr><td>public void await()</td><td>让线程等待</td></tr><tr><td>public void countDown()</td><td>当前线程执行完毕</td></tr></tbody></table></div><p><strong>使用场景：</strong> 让某一条线程等待其他线程执行完毕之后再执行</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread1</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread2</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread3</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MotherThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MotherThread</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.等待</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//当计数器变成0的时候，会自动唤醒这里等待的线程。</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.收拾碗筷</span></span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈在收拾碗筷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCountDownLatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建CountDownLatch的对象，需要传递给四个线程。</span></span><br><span class="line">        <span class="comment">//在底层就定义了一个计数器，此时计数器的值就是3</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2.创建四个线程对象并开启他们。</span></span><br><span class="line">        <span class="type">MotherThread</span> <span class="variable">motherThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MotherThread</span>(countDownLatch);</span><br><span class="line">        motherThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread1</span>(countDownLatch);</span><br><span class="line">        t1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread2</span>(countDownLatch);</span><br><span class="line">        t2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread3</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread3</span>(countDownLatch);</span><br><span class="line">        t3.setName(<span class="string">&quot;小刚&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结 :</strong> </p><p>​    1. CountDownLatch(int count)：参数写等待线程的数量。并定义了一个计数器。</p><p>​    2. await()：让线程等待，当计数器为0时，会唤醒等待的线程</p><p>​    3. countDown()： 线程执行完毕时调用，会将计数器-1。</p><h3 id="3-6-并发工具类-Semaphore"><a href="#3-6-并发工具类-Semaphore" class="headerlink" title="3.6 并发工具类-Semaphore"></a>3.6 并发工具类-Semaphore</h3><p><strong>使用场景 :</strong> </p><p>​    可以控制访问特定资源的线程数量。</p><p><strong>实现步骤 :</strong> </p><p>​    1，需要有人管理这个通道</p><p>​    2，当有车进来了，发通行许可证</p><p>​    3，当车出去了，收回通行许可证</p><p>​    4，如果通行许可证发完了，那么其他车辆只能等着</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysemaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//1.获得管理员对象，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2.获得通行证</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            <span class="comment">//3.开始行驶</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获得了通行证开始行驶&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;归还通行证&quot;</span>);</span><br><span class="line">            <span class="comment">//4.归还通行证</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysemaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySemaphoreDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(mr).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/posts/fed4c017.html"/>
      <url>/posts/fed4c017.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、IO流"><a href="#一、IO流" class="headerlink" title="一、IO流"></a>一、IO流</h1><p><strong>用于读写文件中的数据(可以读写文件，或网络中的数据…)</strong></p><h2 id="1-什么是IO流"><a href="#1-什么是IO流" class="headerlink" title="1. 什么是IO流"></a>1. 什么是IO流</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>存储和读取数据的解决方案</span><br><span class="line"><span class="bullet">- </span>I：InputO：output**</span><br><span class="line"><span class="bullet">- </span>流：像水流一样传输数据</span><br></pre></td></tr></table></figure><h2 id="2-IO流的作用"><a href="#2-IO流的作用" class="headerlink" title="2. IO流的作用"></a>2. IO流的作用</h2><p><strong>用于读写数据(本地文件，网络)</strong></p><h2 id="3-IO流向划分"><a href="#3-IO流向划分" class="headerlink" title="3 IO流向划分"></a>3 IO流向划分</h2><ul><li><strong>输出流： 程序 ——&gt; 文件</strong></li><li><strong>输入流:：文件 ——&gt; 程序</strong></li></ul><h2 id="4-IO按照文件类型划分"><a href="#4-IO按照文件类型划分" class="headerlink" title="4. IO按照文件类型划分"></a>4. IO按照文件类型划分</h2><ul><li><p><strong>字节流：可以操作所有类型的文件</strong></p></li><li><p><strong>字符流：只能操作纯文本文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">纯文本文件：Windows记事本可以打开并且能够读懂的文件</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-IO体系划分"><a href="#5-IO体系划分" class="headerlink" title="5. IO体系划分"></a>5. IO体系划分</h2><p><img src="\images\io\io流体系.png" alt="image-20240418155755918" style="zoom: 50%;" /></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20240418160033240.png" alt="image-20240418160033240"></p><h1 id="二、字节流"><a href="#二、字节流" class="headerlink" title="二、字节流"></a>二、字节流</h1><h2 id="1-字节输出流"><a href="#1-字节输出流" class="headerlink" title="1. 字节输出流"></a>1. 字节输出流</h2><p><strong><em>操作本地文件的字节输出流，可以将程序中的数据写入到本地文件中</em></strong></p><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="FileOutPutStream类"><a href="#FileOutPutStream类" class="headerlink" title="FileOutPutStream类"></a>FileOutPutStream类</h3><ul><li>形参可以是字符串或是File对象</li><li>如果文件不存在可以创建新的文件，但是要却道父级路径存在</li><li>如果文件存在会清空文件并且覆盖</li><li>write方法中写入整数按照的是ASCII值</li><li>每次使用完流都需要释放资源</li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamConstructor</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h4><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol><li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;黑马程序员&quot;</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马程序员</span><br></pre></td></tr></table></figure><ol><li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h4 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h4><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>，<span class="literal">true</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><h4 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h4><p>Windows系统里，换行符号是<code>\r\n</code> 。把</p><p>以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);  </span><br><span class="line">      <span class="comment">// 定义字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">      <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">          <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h2 id="2-字节输入流"><a href="#2-字节输入流" class="headerlink" title="2. 字节输入流"></a>2. 字节输入流</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="FileInputStream类"><a href="#FileInputStream类" class="headerlink" title="FileInputStream类"></a>FileInputStream类</h3><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h4><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="type">char</span>) read);</span><br><span class="line">      <span class="comment">// 读取到末尾,返回-1</span></span><br><span class="line">       read = fis.read();</span><br><span class="line">        System.out.println( read);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环改进读取方式，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ed</span><br></pre></td></tr></table></figure><p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote><h2 id="3-文件拷贝"><a href="#3-文件拷贝" class="headerlink" title="3.文件拷贝"></a>3.文件拷贝</h2><h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><p><strong>一次读写一个字节，速度慢</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;DIR\\a.txt&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;DIR\\b.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">    fos.write(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br></pre></td></tr></table></figure><h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><p><strong>一次多一个字节数组的数据，每次读取会尽可能把数组装满（1024）</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.iodemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IODemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\燕云十六声.mp4&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;DIR\\燕云十六声.mp4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (fis; fos) &#123;</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">6</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、字符集"><a href="#三、字符集" class="headerlink" title="三、字符集"></a>三、字符集</h1><h2 id="1-字符编码和字符集"><a href="#1-字符编码和字符集" class="headerlink" title="1. 字符编码和字符集"></a>1. 字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)—字节(看不懂的)</p><p>解码:字节(看不懂的)—&gt;字符(能看懂的)</p><ul><li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p></li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src="E:\JAVA\资料\黑马JAVASE\下\day29-IO（其他流）\笔记\img\1_charset.jpg" alt=""></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h2 id="2-英文存储"><a href="#2-英文存储" class="headerlink" title="2. 英文存储"></a>2. 英文存储</h2><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符01.png" alt="image-20240419112946008"></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符03.png" alt="image-20240419113455075"></p><h2 id="3-中文存储"><a href="#3-中文存储" class="headerlink" title="3.中文存储"></a>3.中文存储</h2><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符02.png" alt="image-20240419113302540"></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20240419113639154.png" alt="image-20240419113639154"></p><h2 id="4-Unicode万国码"><a href="#4-Unicode万国码" class="headerlink" title="4. Unicode万国码"></a>4. Unicode万国码</h2><p><strong>英文采用一个字节进行编码</strong></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符04.png" alt="image-20240419114455992"></p><p><strong>中文采用三个字节进行编码</strong></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符05.png" alt="image-20240419114623344"></p><p><strong>Unicode字符集的UTF-8编码格式</strong></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符06.png" alt="image-20240419114935460"></p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Unicode 是一个国际标准（ISO/IEC 10646），旨在为全世界所有的书写系统中的每个字符提供一个唯一的码点（code point）。Unicode 提供了一种将文本表示为数字代码的方式，使得计算机可以准确地存储、处理和交换文本数据。</p><p>Unicode 能够表示超过 100,000 个字符，涵盖了现代和古代的脚本、符号、表情符号等。每个字符在 Unicode 中都有一个唯一的码点，通常是用 <code>U+</code> 加上一个十六进制数来表示，比如拉丁字母 ‘A’ 的 Unicode 码点是 <code>U+0041</code>。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8（8-bit Unicode Transformation Format）是 Unicode 的一种实现方式，它使用一至四个字节来表示一个字符。UTF-8 的特点是：</p><ol><li><p><strong>兼容性</strong>：UTF-8 完全兼容 ASCII 编码，这意味着所有 ASCII 字符在 UTF-8 中都是单字节的，这使得它能够无缝地与基于 ASCII 的系统进行交互。</p></li><li><p><strong>变长编码</strong>：UTF-8 使用不同长度的字节序列来表示不同的字符。ASCII 字符（U+0000 至 U+007F）使用单个字节，而其他字符则使用两个、三个或四个字节。</p></li><li><p><strong>自同步</strong>：UTF-8 的编码方式保证了字节序列的自同步特性，即不管从哪个字节开始读取，都能确定当前字符的开始和结束位置。</p></li><li><p><strong>无字节顺序标记（BOM）</strong>：UTF-8 不需要字节顺序标记（Byte Order Mark, BOM），这简化了文本文件的处理。</p></li><li><p><strong>网络优化</strong>：UTF-8 在网络传输中表现良好，因为它避免了使用字节的高八位，这在某些网络协议中可能有特殊含义。</p></li></ol><p>由于这些优点，UTF-8 成为了互联网和多数操作系统的默认字符编码方式。它也被广泛用于编程语言和数据库系统中。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Unicode</strong> 是一个字符集和编码标准，提供了一个字符到数字码点的映射。</li><li><strong>UTF-8</strong> 是 Unicode 的一种实现，使用一到四个字节来编码 Unicode 中的字符，具有很好的兼容性和效率。</li></ul><p>在编程和文本处理中，使用 Unicode 和 UTF-8 可以确保跨平台和跨语言的文本准确性和一致性。</p><h2 id="5-乱码"><a href="#5-乱码" class="headerlink" title="5.乱码"></a>5.乱码</h2><ul><li><p><strong>原因1：读取数据时未读完整个汉字</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如字节流一次读取一个字节，但是中文是以三个字节或者两个字节保存，那么就读不出来，因为中文是以1开头的所以解码为负数，显示乱码</span><br></pre></td></tr></table></figure></li><li><p><strong>原因2：编码和解码的所用规则不一样</strong></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符07.png" alt="image-20240419115436054"></p></li></ul><h3 id="解决乱码"><a href="#解决乱码" class="headerlink" title="解决乱码"></a>解决乱码</h3><ul><li><strong>不要使用字节流读取文本文件</strong></li><li><strong>编码解码时使用同一张码表，同一种编码方式</strong></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li><p><strong>字节流读取会乱码，但是拷贝不会乱码</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据不会丢失，记事本打开的时候解码规则如果和编码规则一样是不会乱码的</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-Java中编码解码"><a href="#6-Java中编码解码" class="headerlink" title="6. Java中编码解码"></a>6. Java中编码解码</h2><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符08.png" alt="image-20240419120042447"></p><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E:\\File_GBK.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？ </p><h1 id="四、字符流"><a href="#四、字符流" class="headerlink" title="四、字符流"></a>四、字符流</h1><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><p><strong>字符流底层是字节流</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">字符流 </span>=<span class="string"> 字节流 + 字符集</span></span><br></pre></td></tr></table></figure><p><strong>输入流：一次读一个字节，遇到中文时候，一次读多个字节</strong></p><p><strong>输出流：底层会把数据按照指定的编码方式进行编码，变成字节再写到文件中</strong></p><p><img src="E:\JAVA\笔记\JAVASE\images\io\字符流01.png" alt="image-20240419133942807"></p><h2 id="1-字符输入流【Reader】"><a href="#1-字符输入流【Reader】" class="headerlink" title="1. 字符输入流【Reader】"></a>1. 字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h3 id="FileReader类"><a href="#FileReader类" class="headerlink" title="FileReader类"></a>FileReader类</h3><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</p><p>idea中UTF-8</p></li><li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p></li></ol></blockquote><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><ol><li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑</span><br><span class="line">马</span><br><span class="line">程</span><br><span class="line">序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote><ol><li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">         <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员序</span><br></pre></td></tr></table></figure><p>获取有效的字符改进，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h2 id="2-字符输出流【Writer】"><a href="#2-字符输出流【Writer】" class="headerlink" title="2. 字符输出流【Writer】"></a>2. 字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf)</code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str)</code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。 </li></ul><h3 id="FileWriter类"><a href="#FileWriter类" class="headerlink" title="FileWriter类"></a>FileWriter类</h3><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h4><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">&#x27;刷&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">&#x27;新&#x27;</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">&#x27;关&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">&#x27;闭&#x27;</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h4 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h4><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">char</span>[] chars = <span class="string">&quot;黑马程序员&quot;</span>.toCharArray();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(chars); <span class="comment">// 黑马程序员</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(msg); <span class="comment">//黑马程序员</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(msg,<span class="number">2</span>,<span class="number">2</span>);<span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>，<span class="literal">true</span>);     </span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">      fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">  fw.write(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">黑马</span><br><span class="line">程序员</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></blockquote><h2 id="3-字符流原理解析"><a href="#3-字符流原理解析" class="headerlink" title="3.字符流原理解析"></a>3.字符流原理解析</h2><h3 id="3-1-字符输入流"><a href="#3-1-字符输入流" class="headerlink" title="3.1 字符输入流"></a>3.1 字符输入流</h3><ul><li><p>创建字符输入流对象</p><p><strong>底层：关联文件，并创建缓冲区（长度为8192的字节数组）</strong></p></li><li><p>读取数据</p><p><strong>底层：1.判断缓冲区中是否有数据可以读取</strong></p><p>​            <strong>2.缓冲区没有数据：从文件中读取数据，装到缓冲区中，每次尽可能装满缓冲区，如果文件中没有数据，返回-1</strong></p><p>​            <strong>3.缓冲区有数据：从缓冲区中读取</strong></p></li></ul><h3 id="3-2-字符输出流"><a href="#3-2-字符输出流" class="headerlink" title="3.2 字符输出流"></a>3.2 字符输出流</h3><p><strong>只有在flush或close之后才能将缓冲区的数据输出到文件中</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">flush</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">close</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h1 id="五、缓冲流"><a href="#五、缓冲流" class="headerlink" title="五、缓冲流"></a>五、缓冲流</h1><p><img src="images\io\缓冲流.png" alt="image-20240420114342566"></p><p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="2-字节缓冲流"><a href="#2-字节缓冲流" class="headerlink" title="2. 字节缓冲流"></a>2. 字节缓冲流</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;bis.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;bos.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><ol><li>基本流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>)</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">十几分钟过去了...</span><br></pre></td></tr></table></figure><ol><li>缓冲流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line">     <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缓冲流复制时间:<span class="number">8016</span> 毫秒</span><br></pre></td></tr></table></figure><p>如何更快呢？</p><p>使用数组的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">      <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line"> <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">          <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流使用数组复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缓冲流使用数组复制时间:<span class="number">666</span> 毫秒</span><br></pre></td></tr></table></figure><h2 id="3-字符缓冲流"><a href="#3-字符缓冲流" class="headerlink" title="3. 字符缓冲流"></a>3. 字符缓冲流</h2><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;br.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bw.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterDemo</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  &#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;程序&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;员&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出效果:</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h2 id="4-练习-文本排序"><a href="#4-练习-文本排序" class="headerlink" title="4. 练习:文本排序"></a>4. 练习:文本排序</h2><p>请将文本信息恢复顺序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>逐行读取文本信息。</li><li>把读取到的文本存储到集合中</li><li>对集合中的文本进行排序</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建ArrayList集合,泛型使用String</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.创建BufferedReader对象,构造方法中传递FileReader对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;10_IO\\in.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//3.创建BufferedWriter对象,构造方法中传递FileWriter对象</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;10_IO\\out.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//4.使用BufferedReader对象中的方法readLine,以行的方式读取文本</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//5.把读取到的文本存储到ArrayList集合中</span></span><br><span class="line">            list.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.使用Collections集合工具类中的方法sort,对集合中的元素按照自定义规则排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                o1-o2:升序</span></span><br><span class="line"><span class="comment">                o2-o1:降序</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="comment">//依次比较集合中两个元素的首字母,升序排序</span></span><br><span class="line">                <span class="keyword">return</span> o1.charAt(<span class="number">0</span>)-o2.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//7.遍历ArrayList集合,获取每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="comment">//8.使用BufferedWriter对象中的方法wirte,把遍历得到的元素写入到文本中(内存缓冲区中)</span></span><br><span class="line">            bw.write(s);</span><br><span class="line">            <span class="comment">//9.写换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-缓冲流总结"><a href="#5-缓冲流总结" class="headerlink" title="5. 缓冲流总结"></a>5. 缓冲流总结</h2><p><img src="images\io\缓冲流总结.png" alt="image-20240420115845495"></p><h1 id="六、转换流"><a href="#六、转换流" class="headerlink" title="六、转换流"></a>六、转换流</h1><p><strong>是字符流和字节流之间的桥梁，可以将字节流转成字符流，并可以使用其里面的方法</strong></p><p>字节流读取中文的时候会乱码，所以用转换流</p><p><img src="images\io\转换流.png" alt="image-20240420121544602"></p><h2 id="1-InputStreamReader类"><a href="#1-InputStreamReader类" class="headerlink" title="1. InputStreamReader类"></a>1. InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\file_gbk.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName));</span><br><span class="line">      <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">      <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-OutputStreamWriter类"><a href="#2-OutputStreamWriter类" class="headerlink" title="2. OutputStreamWriter类"></a>2. OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\out.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">FileName2</span> <span class="operator">=</span> <span class="string">&quot;E:\\out2.txt&quot;</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName2),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">&quot;你好&quot;</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong><img src="E:\JAVA\资料\黑马JAVASE\下\day29-IO（其他流）\笔记\img\2_zhuanhuan.jpg" alt=""></p><h2 id="3-练习：转换文件编码"><a href="#3-练习：转换文件编码" class="headerlink" title="3. 练习：转换文件编码"></a>3. 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;      </span><br><span class="line">    <span class="comment">// 1.定义文件路径</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="string">&quot;file_gbk.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="string">&quot;file_utf8.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 2.创建流对象</span></span><br><span class="line">    <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile));</span><br><span class="line"><span class="comment">// 3.读写数据</span></span><br><span class="line">    <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">    <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">          osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-字节流使用缓冲字符流"><a href="#4-字节流使用缓冲字符流" class="headerlink" title="4. 字节流使用缓冲字符流"></a>4. 字节流使用缓冲字符流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">BufferReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;DIR\\yyh.txt&quot;</span>)))</span><br></pre></td></tr></table></figure><h2 id="5-转换流总结"><a href="#5-转换流总结" class="headerlink" title="5. 转换流总结"></a>5. 转换流总结</h2><ol><li>转换流的名称<ul><li>字符转换输入流：InputStreamReader</li><li>字符转换输出流：OutputStreamWriter</li></ul></li><li>转换流的作用<ul><li>指定字符集读写数据（JDK11之后已淘汰）</li><li>字节流想要使用字符流中的方法了</li></ul></li></ol><h1 id="七、序列化"><a href="#七、序列化" class="headerlink" title="七、序列化"></a>七、序列化</h1><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20240420124842926.png" alt="image-20240420124842926" style="zoom: 50%;" /></p><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src="E:\JAVA\资料\黑马JAVASE\下\day29-IO（其他流）\笔记\img\3_xuliehua.jpg" alt=""></p><h2 id="2-ObjectOutputStream类"><a href="#2-ObjectOutputStream类" class="headerlink" title="2. ObjectOutputStream类"></a>2. ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br></pre></td></tr></table></figure><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol><li>一个对象要想序列化，必须满足两个条件:</li></ol><ul><li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeDemo</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    e.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    e.address = <span class="string">&quot;beiqinglu&quot;</span>;</span><br><span class="line">    e.age = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建序列化流对象</span></span><br><span class="line">          <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        out.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;Serialized data is saved&quot;</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Serialized data is saved</span><br></pre></td></tr></table></figure><h2 id="3-ObjectInputStream类"><a href="#3-ObjectInputStream类" class="headerlink" title="3. ObjectInputStream类"></a>3. ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h3 id="构造方法-9"><a href="#构造方法-9" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建反序列化流</span></span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">             <span class="comment">// 读取一个对象</span></span><br><span class="line">             e = (Employee) in.readObject();</span><br><span class="line">             <span class="comment">// 释放资源</span></span><br><span class="line">             in.close();</span><br><span class="line">             fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">             <span class="comment">// 捕获其他异常</span></span><br><span class="line">             i.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line">        <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">             System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">             c.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a><strong>反序列化操作2</strong></h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> eid; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-练习：序列化集合"><a href="#4-练习：序列化集合" class="headerlink" title="4. 练习：序列化集合"></a>4. 练习：序列化集合</h2><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 创建 学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老王&quot;</span>, <span class="string">&quot;laow&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;laoz&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老李&quot;</span>, <span class="string">&quot;laol&quot;</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 序列化操作</span></span><br><span class="line"><span class="comment">// serializ(arrayList);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化  </span></span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">          <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;--&quot;</span>+ s.getPwd());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-JavaBean中的版本号"><a href="#5-JavaBean中的版本号" class="headerlink" title="5. JavaBean中的版本号"></a>5. JavaBean中的版本号</h2><p> 在JavaBean中，版本号通常是指用于标识类的不同版本的一个字段，它主要用于序列化和反序列化过程中保持兼容性。版本号也被称为序列化ID或 serialVersionUID。</p><p>当你的JavaBean实现了<code>Serializable</code>接口时，Java运行时环境会使用这个版本号来验证序列化和反序列化的对象是否兼容。如果发送方序列化对象的类和接收方反序列化对象的类具有不同的版本号，那么在反序列化过程中会抛出<code>InvalidClassException</code>异常。</p><p>版本号是一个名为<code>serialVersionUID</code>的静态常量字段，通常位于实现<code>Serializable</code>接口的类的顶部。它是一个<code>long</code>类型的值，可以由开发者手动指定，也可以由编译器自动生成。如果你希望类的序列化版本保持稳定，你应该手动指定一个版本号。</p><p>以下是一个包含版本号的JavaBean示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、getter和setter方法等</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>serialVersionUID</code>字段被设置为<code>1L</code>。如果你修改了<code>MyBean</code>类的结构，比如添加或删除字段，你应该更新<code>serialVersionUID</code>的值，以反映类的新版本。</p><p>版本号是确保序列化兼容性的重要机制，它有助于避免在不同版本的类之间进行对象传输时出现问题。如果你不关心序列化兼容性，或者你的类永远不会改变，那么可以省略版本号，让编译器自动生成。但是，在实际开发中，为了确保类的序列化兼容性，手动指定版本号是一种良好的实践。</p><h1 id="八、打印流"><a href="#八、打印流" class="headerlink" title="八、打印流"></a>八、打印流</h1><p><img src="images\io\打印流.png" alt="image-20240420140105380"></p><h2 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h2 id="2-PrintStream类"><a href="#2-PrintStream类" class="headerlink" title="2. PrintStream类"></a>2. PrintStream类</h2><p><strong>字节打印流</strong></p><h3 id="构造方法-10"><a href="#构造方法-10" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>)；</span><br></pre></td></tr></table></figure><h3 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">      <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myprintstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        字节打印流：</span></span><br><span class="line"><span class="comment">            构造方法</span></span><br><span class="line"><span class="comment">                public PrintStream(OutputStream/File/String)            关联字节输出流/文件/文件路径</span></span><br><span class="line"><span class="comment">                public PrintStream(String fileName, Charset charset)    指定字符编码</span></span><br><span class="line"><span class="comment">                public PrintStream(OutputStreamout, boolean autoFlush)  自动刷新</span></span><br><span class="line"><span class="comment">                public PrintStream(OutputStream out, boolean autoFlush, String encoding)    指定字符编码且自动刷新</span></span><br><span class="line"><span class="comment">            成员方法：</span></span><br><span class="line"><span class="comment">                public void write(int b)            常规方法：规则跟之前一样，将指定的字节写出</span></span><br><span class="line"><span class="comment">                public void println(Xxx xx)         特有方法：打印任意数据，自动刷新，自动换行</span></span><br><span class="line"><span class="comment">                public void print(Xxx xx)           特有方法：打印任意数据，不换行</span></span><br><span class="line"><span class="comment">                public void printf(String format, Object... args)   特有方法：带有占位符的打印语句，不换行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建字节打印流的对象</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;myio\\a.txt&quot;</span>), <span class="literal">true</span>, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//2.写出数据</span></span><br><span class="line">        ps.println(<span class="number">97</span>);<span class="comment">//写出 + 自动刷新 + 自动换行</span></span><br><span class="line">        ps.print(<span class="literal">true</span>);</span><br><span class="line">        ps.println();</span><br><span class="line">        ps.printf(<span class="string">&quot;%s爱上了%s&quot;</span>,<span class="string">&quot;阿珍&quot;</span>,<span class="string">&quot;阿强&quot;</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-PrintWrite类"><a href="#3-PrintWrite类" class="headerlink" title="3. PrintWrite类"></a>3. PrintWrite类</h2><p><strong>字符打印流</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myprintstream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        字符打印流：</span></span><br><span class="line"><span class="comment">            构造方法</span></span><br><span class="line"><span class="comment">                public PrintWriter(Write/File/String)            关联字节输出流/文件/文件路径</span></span><br><span class="line"><span class="comment">                public PrintWriter(String fileName, Charset charset)    指定字符编码</span></span><br><span class="line"><span class="comment">                public PrintWriter(Write, boolean autoFlush)  自动刷新</span></span><br><span class="line"><span class="comment">                public PrintWriter(Write out, boolean autoFlush, String encoding)    指定字符编码且自动刷新</span></span><br><span class="line"><span class="comment">            成员方法：</span></span><br><span class="line"><span class="comment">                public void write(int b)            常规方法：规则跟之前一样，将指定的字节写出</span></span><br><span class="line"><span class="comment">                public void println(Xxx xx)         特有方法：打印任意数据，自动刷新，自动换行</span></span><br><span class="line"><span class="comment">                public void print(Xxx xx)           特有方法：打印任意数据，不换行</span></span><br><span class="line"><span class="comment">                public void printf(String format, Object... args)   特有方法：带有占位符的打印语句，不换行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.创建字符打印流的对象</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;myio\\a.txt&quot;</span>),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据</span></span><br><span class="line">        pw.println(<span class="string">&quot;今天你终于叫我名字了，虽然叫错了，但是没关系，我马上改&quot;</span>);</span><br><span class="line">        pw.print(<span class="string">&quot;你好你好&quot;</span>);</span><br><span class="line">        pw.printf(<span class="string">&quot;%s爱上了%s&quot;</span>,<span class="string">&quot;阿珍&quot;</span>,<span class="string">&quot;阿强&quot;</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-打印流应用场景"><a href="#4-打印流应用场景" class="headerlink" title="4. 打印流应用场景"></a>4. 打印流应用场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myprintstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStreamDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *       打印流的应用场景</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取打印流的对象，此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台</span></span><br><span class="line">        <span class="comment">//特殊的打印流，系统中的标准输出流,是不能关闭，在系统中是唯一的。</span></span><br><span class="line">        <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用打印流中的方法println</span></span><br><span class="line">        <span class="comment">//写出数据，自动换行，自动刷新</span></span><br><span class="line">        ps.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ps.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ps.println(<span class="string">&quot;你好你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;456&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、-压缩流和解压缩流"><a href="#九、-压缩流和解压缩流" class="headerlink" title="九、 压缩流和解压缩流"></a>九、 压缩流和解压缩流</h1><p>压缩流：</p><p>​    负责压缩文件或者文件夹</p><p>解压缩流：</p><p>​    负责把压缩包中的文件和文件夹解压出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*   解压缩流</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个File表示要解压的压缩包</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建一个File表示解压的目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        unzip(src,dest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法用来解压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</span></span><br><span class="line">        <span class="comment">//创建一个解压缩流用来读取压缩包中的数据</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">        <span class="comment">//要先获取到压缩包里面的每一个zipentry对象</span></span><br><span class="line">        <span class="comment">//表示当前在压缩包中获取到的文件或者文件夹</span></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span>((entry = zip.getNextEntry()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="keyword">if</span>(entry.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//文件夹：需要在目的地dest处创建一个同样的文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString()));</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span>((b = zip.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//写到目的地</span></span><br><span class="line">                    fos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                <span class="comment">//表示在压缩包中的一个文件处理完毕了。</span></span><br><span class="line">                zip.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        zip.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   压缩流</span></span><br><span class="line"><span class="comment">         *      需求：</span></span><br><span class="line"><span class="comment">         *          把D:\\a.txt打包成一个压缩包</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//1.创建File对象表示要压缩的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建File对象表示压缩包的位置</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>);</span><br><span class="line">        <span class="comment">//3.调用方法用来压缩</span></span><br><span class="line">        toZip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   作用：压缩</span></span><br><span class="line"><span class="comment">    *   参数一：表示要压缩的文件</span></span><br><span class="line"><span class="comment">    *   参数二：表示压缩包的位置</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,<span class="string">&quot;a.zip&quot;</span>)));</span><br><span class="line">        <span class="comment">//2.创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹</span></span><br><span class="line">        <span class="comment">//参数：压缩包里面的路径</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;aaa\\bbb\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//3.把ZipEntry对象放到压缩包当中</span></span><br><span class="line">        zos.putNextEntry(entry);</span><br><span class="line">        <span class="comment">//4.把src文件中的数据写到压缩包当中</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            zos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   压缩流</span></span><br><span class="line"><span class="comment">         *      需求：</span></span><br><span class="line"><span class="comment">         *          把D:\\aaa文件夹压缩成一个压缩包</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//1.创建File对象表示要压缩的文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建File对象表示压缩包放在哪里（压缩包的父级路径）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destParent</span> <span class="operator">=</span> src.getParentFile();<span class="comment">//D:\\</span></span><br><span class="line">        <span class="comment">//3.创建File对象表示压缩包的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destParent,src.getName() + <span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//4.创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest));</span><br><span class="line">        <span class="comment">//5.获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">        toZip(src,zos,src.getName());<span class="comment">//aaa</span></span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   作用：获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line"><span class="comment">    *   参数一：数据源</span></span><br><span class="line"><span class="comment">    *   参数二：压缩流</span></span><br><span class="line"><span class="comment">    *   参数三：压缩包内部的路径</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,ZipOutputStream zos,String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.进入src文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                <span class="comment">//3.判断-文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;\\&quot;</span> + file.getName());<span class="comment">//aaa\\no1\\a.txt</span></span><br><span class="line">                zos.putNextEntry(entry);</span><br><span class="line">                <span class="comment">//读取文件中的数据，写到压缩包</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    zos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.判断-文件夹，递归</span></span><br><span class="line">                toZip(file,zos,name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">                <span class="comment">//     no1            aaa   \\   no1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十-工具包（Commons-io）"><a href="#十-工具包（Commons-io）" class="headerlink" title="十. 工具包（Commons-io）"></a>十. 工具包（Commons-io）</h1><p>介绍：</p><p>​    Commons是apache开源基金组织提供的工具包，里面有很多帮助我们提高开发效率的API</p><p>比如：</p><p>​    StringUtils   字符串工具类</p><p>​    NumberUtils   数字工具类 </p><p>​    ArrayUtils   数组工具类  </p><p>​    RandomUtils   随机数工具类</p><p>​    DateUtils   日期工具类 </p><p>​    StopWatch   秒表工具类 </p><p>​    ClassUtils   反射工具类  </p><p>​    SystemUtils   系统工具类  </p><p>​    MapUtils   集合工具类</p><p>​    Beanutils   bean工具类</p><p>​    Commons-io io的工具类</p><p>​    等等…..</p><p>其中：Commons-io是apache开源基金组织提供的一组有关IO操作的开源工具包。</p><p>作用：提高IO流的开发效率。</p><p>使用方式：</p><p>1，新建lib文件夹</p><p>2，把第三方jar包粘贴到文件夹中</p><p>3，右键点击add as a library</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mycommonsio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsIODemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          FileUtils类</span></span><br><span class="line"><span class="comment">                static void copyFile(File srcFile, File destFile)                   复制文件</span></span><br><span class="line"><span class="comment">                static void copyDirectory(File srcDir, File destDir)                复制文件夹</span></span><br><span class="line"><span class="comment">                static void copyDirectoryToDirectory(File srcDir, File destDir)     复制文件夹</span></span><br><span class="line"><span class="comment">                static void deleteDirectory(File directory)                         删除文件夹</span></span><br><span class="line"><span class="comment">                static void cleanDirectory(File directory)                          清空文件夹</span></span><br><span class="line"><span class="comment">                static String readFileToString(File file, Charset encoding)         读取文件中的数据变成成字符串</span></span><br><span class="line"><span class="comment">                static void write(File file, CharSequence data, String encoding)    写出数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            IOUtils类</span></span><br><span class="line"><span class="comment">                public static int copy(InputStream input, OutputStream output)      复制文件</span></span><br><span class="line"><span class="comment">                public static int copyLarge(Reader input, Writer output)            复制大文件</span></span><br><span class="line"><span class="comment">                public static String readLines(Reader input)                        读取数据</span></span><br><span class="line"><span class="comment">                public static void write(String data, OutputStream output)          写出数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* File src = new File(&quot;myio\\a.txt&quot;);</span></span><br><span class="line"><span class="comment">        File dest = new File(&quot;myio\\copy.txt&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.copyFile(src,dest);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*File src = new File(&quot;D:\\aaa&quot;);</span></span><br><span class="line"><span class="comment">        File dest = new File(&quot;D:\\bbb&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.copyDirectoryToDirectory(src,dest);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*File src = new File(&quot;D:\\bbb&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.cleanDirectory(src);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="十一-工具包（hutool）"><a href="#十一-工具包（hutool）" class="headerlink" title="十一. 工具包（hutool）"></a>十一. 工具包（hutool）</h1><p>介绍：</p><p>​    Commons是国人开发的开源工具包，里面有很多帮助我们提高开发效率的API</p><p>比如：</p><p>​    DateUtil  日期时间工具类 </p><p>​    TimeInterval  计时器工具类 </p><p>​    StrUtil  字符串工具类</p><p>​    HexUtil   16进制工具类</p><p>​    HashUtil   Hash算法类</p><p>​    ObjectUtil  对象工具类</p><p>​    ReflectUtil   反射工具类</p><p>​    TypeUtil  泛型类型工具类</p><p>​    PageUtil  分页工具类</p><p>​    NumberUtil  数字工具类</p><p>使用方式：</p><p>1，新建lib文件夹</p><p>2，把第三方jar包粘贴到文件夹中</p><p>3，右键点击add as a library</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FileUtil类:</span></span><br><span class="line"><span class="comment">                file：根据参数创建一个file对象</span></span><br><span class="line"><span class="comment">                touch：根据参数创建文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                writeLines：把集合中的数据写出到文件中，覆盖模式。</span></span><br><span class="line"><span class="comment">                appendLines：把集合中的数据写出到文件中，续写模式。</span></span><br><span class="line"><span class="comment">                readLines：指定字符编码，把文件中的数据，读到集合中。</span></span><br><span class="line"><span class="comment">                readUtf8Lines：按照UTF-8的形式，把文件中的数据，读到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                copy：拷贝文件或者文件夹</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* File file1 = FileUtil.file(&quot;D:\\&quot;, &quot;aaa&quot;, &quot;bbb&quot;, &quot;a.txt&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file1);//D:\aaa\bbb\a.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        File touch = FileUtil.touch(file1);</span></span><br><span class="line"><span class="comment">        System.out.println(touch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        File file2 = FileUtil.writeLines(list, &quot;D:\\a.txt&quot;, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file2);*/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/*  ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        File file3 = FileUtil.appendLines(list, &quot;D:\\a.txt&quot;, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file3);*/</span></span><br><span class="line">        List&lt;String&gt; list = FileUtil.readLines(<span class="string">&quot;D:\\a.txt&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法逻辑</title>
      <link href="/posts/7b60ccd7.html"/>
      <url>/posts/7b60ccd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h3 id="1-回文数"><a href="#1-回文数" class="headerlink" title="1.回文数"></a>1.回文数</h3><p>回文数是指正序和倒序读都是一样的整数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.whilestruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">while02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数:&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> number;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> number % <span class="number">10</span>;</span><br><span class="line">            number = number / <span class="number">10</span>;</span><br><span class="line">            num = num * <span class="number">10</span> + ge;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        System.out.println(temp);</span><br><span class="line">        System.out.println(temp == num);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求商-余数"><a href="#2-求商-余数" class="headerlink" title="2.求商/余数"></a>2.求商/余数</h3><p>给定两个整数，被除数和除数（都为正数，且不超过int的范围），将两数相除，要求不使用乘法、除法和%运算符，得到商和余数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.whilestruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">while03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">dividend</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">divisor</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (dividend &gt;= divisor) &#123;</span><br><span class="line">            dividend -= divisor;</span><br><span class="line">            flag++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;商为: &quot;</span> + flag);</span><br><span class="line">        System.out.println(<span class="string">&quot;余数为: &quot;</span> + dividend);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-平方根"><a href="#3-平方根" class="headerlink" title="3.平方根"></a>3.平方根</h3><p>键盘录入大于2的整数x，计算并返回x的平方根。结果只保留整数部分，小数部分将被舍去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">开根号即</span><br><span class="line"><span class="number">1</span> * <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span></span><br><span class="line"><span class="number">4</span> * <span class="number">4</span> = <span class="number">16</span></span><br><span class="line"><span class="number">5</span> * <span class="number">5</span> = <span class="number">25</span></span><br><span class="line">这里<span class="number">20</span>在<span class="number">16</span>到<span class="number">25</span>之间 所以 <span class="number">20</span>的平方根的商就为<span class="number">4</span></span><br><span class="line">下面中求平方根的简单方法是Math.sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入大于2的整数: &quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i * i == x)&#123;</span><br><span class="line">                System.out.println(i + <span class="string">&quot;为&quot;</span> + x + <span class="string">&quot;的平方根&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i * i &gt; x)&#123;</span><br><span class="line">                System.out.println(i - <span class="number">1</span> + <span class="string">&quot;为&quot;</span> + x + <span class="string">&quot;平方根的商&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-质数"><a href="#4-质数" class="headerlink" title="4.质数"></a>4.质数</h3><p>一个整数只能被1和本身整除即为质数，否则为合数</p><p>这里有个思路是被除数可以循环到x的平方根结束</p><ul><li><p>```java<br>package com.yyh.all;</p><p>import java.util.Scanner;</p><p>public class all03 {</p><pre><code>public static void main(String[] args) &#123;    System.out.println(&quot;请输入大于1的数字 &quot;);    Scanner sc = new Scanner(System.in);    int number = sc.nextInt();    boolean flag = true;    for (int i = 2; i &lt; number; i++) &#123;        if(number % i == 0)&#123;            flag = false;            break;        &#125;    &#125;    System.out.println(number + &quot;质数判断为&quot; + flag);</code></pre></li></ul><pre><code>  &#125;</code></pre><p>  }</p>  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  <span class="keyword">package</span> com.yyh.all;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> all02 &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">              <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                      flag = <span class="keyword">false</span>;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                  <span class="keyword">count</span>++;</span><br><span class="line">                  System.out.<span class="keyword">println</span>(i + <span class="string">&quot;是一个质数&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  System.out.<span class="keyword">println</span>(i + <span class="string">&quot;不是一个质数&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          System.out.<span class="keyword">println</span>(<span class="string">&quot;共有&quot;</span> + <span class="keyword">count</span> + <span class="string">&quot;个质数&quot;</span>);</span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h3><ul><li><p>交换数据中的数据，需求：定义数组，存入1，2，3，4，5。将数组倒序交换索引对应的元素，变成5，4，3，2，1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">// 按照将最左和最右交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打乱数组中的数据，需求：定义一个数组，存入1~5.要求打乱数组中所有数据的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[randomIndex];</span><br><span class="line">            arr[randomIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>复制数组，将一个数组中的数据复制到另外一个数组中，按照索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.methodmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">method08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] newArray = copyOfRange(arr, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArray.length; i++) &#123;</span><br><span class="line">            System.out.print(newArray[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyOfRange(<span class="type">int</span>[] arr, <span class="type">int</span> from, <span class="type">int</span> to)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">range</span> <span class="operator">=</span> to - from + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] newArray = <span class="keyword">new</span> <span class="title class_">int</span>[range];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> from, j = <span class="number">0</span>; i &lt;= to; i++, j++) &#123;</span><br><span class="line">            newArray[j] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-验证码"><a href="#6-验证码" class="headerlink" title="6.验证码"></a>6.验证码</h3><p>前四位从a~z A~Z中随机选取 最后一位从0~9中随机抽取 最终形成一个5位的验证码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">52</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= <span class="number">25</span>) &#123;</span><br><span class="line">                chars[i] = (<span class="type">char</span>) (<span class="number">97</span> + i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                chars[i] = (<span class="type">char</span>) (<span class="number">65</span> + i - <span class="number">26</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> r.nextInt(<span class="number">9</span>) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(chars.length);</span><br><span class="line">            result = result + chars[index];</span><br><span class="line">        &#125;</span><br><span class="line">        result = result + x;</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-加密"><a href="#7-加密" class="headerlink" title="7.加密"></a>7.加密</h3><p>某系统密码采用加密传输，规则如下：先得到每位数，然后每位数都加5，再对10取余，最后将所有数字反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (arr[i] + <span class="number">5</span>) % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt;= j; i++, j--)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-抽红包"><a href="#8-抽红包" class="headerlink" title="8.抽红包"></a>8.抽红包</h3><p>有一组红包需要随机从中抽取且不重复</p><ul><li><p>基础版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">588</span>, <span class="number">888</span>, <span class="number">1000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length;) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> arr[randomIndex];</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(newArr, price);</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                newArr[i] = price;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">            System.out.print(newArr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> price)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>简化版本 -&gt; 只需将红包顺序打乱然后依次从中抽出来就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">588</span>, <span class="number">888</span>, <span class="number">1000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[randomIndex];</span><br><span class="line">            arr[randomIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-双色球"><a href="#9-双色球" class="headerlink" title="9.双色球"></a>9.双色球</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">中奖号码为: 15 18 30 27 21 20 14 </span></span><br><span class="line"><span class="comment">您的号码为: 24 16 25 1 21 19 5 </span></span><br><span class="line"><span class="comment">红球中奖次数: 1 蓝球中奖次数: 0</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.生成中奖号码</span></span><br><span class="line">        <span class="type">int</span>[] arr = createNumber();</span><br><span class="line">        <span class="type">int</span>[] userInputNumber = userInputNumber();</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;中奖号码为: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;您的号码为: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userInputNumber.length; i++) &#123;</span><br><span class="line">            System.out.print(userInputNumber[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">redCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">blueCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userInputNumber.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">readNumber</span> <span class="operator">=</span> userInputNumber[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (userInputNumber[i] == arr[i]) &#123;</span><br><span class="line">                    redCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">blueNumber</span> <span class="operator">=</span> userInputNumber[userInputNumber.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (blueNumber == arr[arr.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            blueCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;红球中奖次数: &quot;</span> + redCount + <span class="string">&quot; 蓝球中奖次数: &quot;</span> + blueCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] userInputNumber() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个红球号码&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">redNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (redNumber &gt;= <span class="number">1</span> &amp;&amp; redNumber &lt;= <span class="number">33</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(arr, redNumber);</span><br><span class="line">                <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                    arr[i] = redNumber;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前红球号码已经存在，请重新输入&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;红球输入范围有误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入蓝球号码&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">blueNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (blueNumber &gt;= <span class="number">1</span> &amp;&amp; blueNumber &lt;= <span class="number">16</span>) &#123;</span><br><span class="line">                arr[arr.length - <span class="number">1</span>] = blueNumber;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前蓝球号码超出范围&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createNumber() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 红球不可以重复</span></span><br><span class="line"><span class="comment">         * 蓝球可以重复</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">redNumber</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> contains(arr, redNumber);</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                arr[i] = redNumber;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">blueNumber</span> <span class="operator">=</span> r.nextInt(<span class="number">16</span>) + <span class="number">1</span>;</span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = blueNumber;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == number) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-二维数组求取季度营业额"><a href="#10-二维数组求取季度营业额" class="headerlink" title="10.二维数组求取季度营业额"></a>10.二维数组求取季度营业额</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all11</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求每个季度的总营业额</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] yearArrArr = &#123;</span><br><span class="line">                &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;,</span><br><span class="line">                &#123;<span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;,</span><br><span class="line">                &#123;<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>&#125;,</span><br><span class="line">                &#123;<span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">yearSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; yearArrArr.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(yearArrArr[i]);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个季度的总营业额为: &quot;</span> + sum);</span><br><span class="line">            yearSum += sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;总营业额为: &quot;</span> + yearSum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="11-金额转换"><a href="#11-金额转换" class="headerlink" title="11.金额转换"></a>11.金额转换</h3><p>将实际金额转成银行APP中数字转换的格式ex: 100-&gt;壹佰。</p><p>此类问题可以考虑查表法，将零壹贰叁肆伍陆……转入到数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.strTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> money;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入一个金额&quot;</span>);</span><br><span class="line">            money = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (money &gt;= <span class="number">0</span> &amp;&amp; money &lt;= <span class="number">9999999</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;金额无效&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">            moneyStr = capitalNumber + moneyStr;</span><br><span class="line">            money = money / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(money == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">7</span> - moneyStr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">            res = res + c + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数字0-9变成大写中文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-手机号屏蔽"><a href="#12-手机号屏蔽" class="headerlink" title="12.手机号屏蔽"></a>12.手机号屏蔽</h3><p>在某些交友网站，查看别人信息时候不会将手机号完全展示出来通常会隐藏几位即:</p><p>18963595649 -&gt; 189<em>**</em>5649</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    String phone;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入手机号: &quot;</span>);</span><br><span class="line">        phone = sc.next();</span><br><span class="line">        <span class="keyword">if</span>(phone.length() == <span class="number">11</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请重新输入手机号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(hidePhone(phone));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hidePhone</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> phone.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot; **** &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> phone.substring(<span class="number">7</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-转换罗马数字"><a href="#13-转换罗马数字" class="headerlink" title="13.转换罗马数字"></a>13.转换罗马数字</h3><p>键盘录入字符串，要求长度小于等于9，只能为数字，将内容转成罗马数字，0变成” “</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.all;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">all01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String str;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个字符串:&quot;</span>);</span><br><span class="line">            str = sc.next();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> checkStr(str);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前输入不符合规则请重新输入:&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> c - <span class="number">48</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> changeLuoMa(number);</span><br><span class="line">            sb.append(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">changeLuoMa</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot; &quot;</span>, <span class="string">&quot;Ⅰ&quot;</span>, <span class="string">&quot;Ⅱ&quot;</span>, <span class="string">&quot;Ⅲ&quot;</span>, <span class="string">&quot;Ⅳ&quot;</span>, <span class="string">&quot;Ⅴ&quot;</span>, <span class="string">&quot;Ⅵ&quot;</span>, <span class="string">&quot;Ⅶ&quot;</span>, <span class="string">&quot;Ⅷ&quot;</span>, <span class="string">&quot;Ⅸ&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.length() &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常见的七种查找算法："><a href="#常见的七种查找算法：" class="headerlink" title="常见的七种查找算法："></a>常见的七种查找算法：</h1><p>​    数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p><h2 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1. 基本查找"></a>1. 基本查找</h2><p>​    也叫做顺序查找</p><p>​        说明：顺序查找适合于存储结构为数组或者链表。</p><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BasicSearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//基本查找/顺序查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//从0索引开始挨个往后查找</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;131, 127, 147, 81, 103, 23, 7, 79&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">131</span>, <span class="number">127</span>, <span class="number">147</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">82</span>;</span><br><span class="line">        System.out.println(basicSearch(arr, number));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数：</span></span><br><span class="line">    <span class="comment">//一：数组</span></span><br><span class="line">    <span class="comment">//二：要查找的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值：</span></span><br><span class="line">    <span class="comment">//元素是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//利用基本查找来查找number在数组中是否存在</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>​    也叫做折半查找</p><p>说明：元素必须是有序的，从小到大，或者从大到小都是可以的。</p><p>如果是无序的，也可以先进行排序。但是排序之后，会改变原有数据的顺序，查找出来元素位置跟原来的元素可能是不一样的，所以排序之后再查找只能判断当前数据是否在容器当中，返回的索引无实际的意义。</p><p>　　<strong>基本思想</strong>：也称为是折半查找，属于有序查找算法。用给定值先与中间结点比较。比较完之后有三种情况：</p><ul><li><p>相等</p><p>说明找到了</p></li><li><p>要查找的数据比中间节点小</p><p>说明要查找的数字在中间节点左边</p></li><li><p>要查找的数据比中间节点大</p><p>说明要查找的数字在中间节点右边</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BinarySearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//二分查找/折半查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//每次排除一半的查找范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>, <span class="number">23</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">150</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用循环不断的去找要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; max)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.找到min和max的中间位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; number)&#123;</span><br><span class="line">                <span class="comment">//4.1 number在mid的左边</span></span><br><span class="line">                <span class="comment">//min不变，max = mid - 1；</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; number)&#123;</span><br><span class="line">                <span class="comment">//4.2 number在mid的右边</span></span><br><span class="line">                <span class="comment">//max不变，min = mid + 1;</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.3 number跟mid指向的元素一样</span></span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>在介绍插值查找之前，先考虑一个问题：</p><p>​    为什么二分查找算法一定要是折半，而不是折四分之一或者折更多呢？</p><p>其实就是因为方便，简单，但是如果我能在二分查找的基础上，让中间的mid点，尽可能靠近想要查找的元素，那不就能提高查找的效率了吗？</p><p>二分查找中查找点计算如下：</p><p>　　mid=(low+high)/2, 即mid=low+1/2*(high-low);</p><p>我们可以将查找的点改进为如下：</p><p>　　mid=low+(key-a[low])/(a[high]-a[low])*(high-low)，</p><p>这样，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><p>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</p><p><strong>细节：</strong>对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>代码跟二分查找类似，只要修改一下mid的计算方式即可。</p><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p><p>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p><p>　　在数学中有一个非常有名的数学规律：斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….</p><p>（从第三个数开始，后边每一个数都是前两个数的和）。</p><p>然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p><img src="https://img-blog.csdn.net/20150323100632467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbmJvMjAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"> </p><p>基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。</p><p>斐波那契查找也是在二分查找的基础上进行了优化，优化中间点mid的计算方式即可</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeiBoSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        System.out.println(search(arr, <span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getFeiBo() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//表示斐波那契数分割数的下标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//调用斐波那契数列</span></span><br><span class="line">        <span class="type">int</span>[] f = getFeiBo();</span><br><span class="line">        <span class="comment">//获取斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">while</span> (high &gt; (f[index] - <span class="number">1</span>)) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k]值可能大于a的长度，因此需要使用Arrays工具类，构造一个新法数组，并指向temp[],不足的部分会使用0补齐</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(arr, f[index]);</span><br><span class="line">        <span class="comment">//实际需要使用arr数组的最后一个数来填充不足的部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = arr[high];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用while循环处理，找到key值</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[index - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123;<span class="comment">//向数组的前面部分进行查找</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  对k--进行理解</span></span><br><span class="line"><span class="comment">                  1.全部元素=前面的元素+后面的元素</span></span><br><span class="line"><span class="comment">                  2.f[k]=k[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment">                  因为前面有k-1个元素没所以可以继续分为f[k-1]=f[k-2]+f[k-3]</span></span><br><span class="line"><span class="comment">                  即在f[k-1]的前面继续查找k--</span></span><br><span class="line"><span class="comment">                  即下次循环,mid=f[k-1-1]-1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;<span class="comment">//向数组的后面的部分进行查找</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                index -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//需要确定返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-分块查找"><a href="#5-分块查找" class="headerlink" title="5. 分块查找"></a>5. 分块查找</h2><p>当数据表中的数据元素很多时，可以采用分块查找。</p><p>汲取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找</p><p>分块查找适用于数据较多，但是数据不会发生变化的情况，如果需要一边添加一边查找，建议使用哈希查找</p><p>分块查找的过程：</p><ol><li>需要把数据分成N多小块，块与块之间不能有数据重复的交集。</li><li>给每一块创建对象单独存储到数组当中</li><li>查找数据的时候，先在数组查，当前数据属于哪一块</li><li>再到这一块中顺序查找</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分块查找</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">                块内无序，块间有序</span></span><br><span class="line"><span class="comment">            实现步骤：</span></span><br><span class="line"><span class="comment">                1.创建数组blockArr存放每一个块对象的信息</span></span><br><span class="line"><span class="comment">                2.先查找blockArr确定要查找的数据属于哪一块</span></span><br><span class="line"><span class="comment">                3.再单独遍历这一块数据即可</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>,<span class="number">21</span>, <span class="number">18</span>,</span><br><span class="line">                     <span class="number">32</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">34</span>,</span><br><span class="line">                     <span class="number">50</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组用来管理三个块的对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印一下</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number是在那一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取这一块的起始索引和结束索引   --- 30</span></span><br><span class="line">        <span class="comment">// Block b1 = new Block(21,0,5);   ----  0</span></span><br><span class="line">        <span class="comment">// Block b2 = new Block(45,6,11);  ----  1</span></span><br><span class="line">        <span class="comment">// Block b3 = new Block(73,12,17); ----  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123; <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;<span class="comment">//起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;<span class="comment">//结束索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-哈希查找"><a href="#6-哈希查找" class="headerlink" title="6. 哈希查找"></a>6. 哈希查找</h2><p>哈希查找是分块查找的进阶版，适用于数据一边添加一边查找的情况。</p><p>一般是数组 + 链表的结合体或者是数组+链表 + 红黑树的结合体</p><p>在课程中，为了让大家方便理解，所以规定：</p><ul><li>数组的0索引处存储1~100</li><li>数组的1索引处存储101~200</li><li>数组的2索引处存储201~300</li><li>以此类推</li></ul><p>但是实际上，我们一般不会采取这种方式，因为这种方式容易导致一块区域添加的元素过多，导致效率偏低。</p><p>更多的是先计算出当前数据的哈希值，用哈希值跟数组的长度进行计算，计算出应存入的位置，再挂在数组的后面形成链表，如果挂的元素太多而且数组长度过长，我们也会把链表转化为红黑树，进一步提高效率。</p><p>具体的过程，大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了哈希表的数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p> <img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\Snipaste_2022-09-05_21-36-50.png" alt="Snipaste_2022-09-05_21-36-50"></p><h2 id="7-树表查找"><a href="#7-树表查找" class="headerlink" title="7. 树表查找"></a>7. 树表查找</h2><p>本知识点涉及到数据结构：树。</p><p>建议先看一下后面阿玮讲解的数据结构，再回头理解。</p><p>基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 </p><p>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree），具有下列性质的二叉树：</p><p>　　1）若任意节点左子树上所有的数据，均小于本身；</p><p>　　2）若任意节点右子树上所有的数据，均大于本身；</p><p>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。</p><p>​        不同形态的二叉查找树如下图所示：</p><p> <img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\20180226113852869.png" alt="20180226113852869"> </p><p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p><p>具体细节大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了树数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p>​    不管是二叉查找树，还是平衡二叉树，还是红黑树，查找的性能都比较高</p><h1 id="十大排序算法："><a href="#十大排序算法：" class="headerlink" title="十大排序算法："></a>十大排序算法：</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。</p><p>它重复的遍历过要排序的数列，一次比较相邻的两个元素，如果他们的顺序错误就把他们交换过来。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢”浮”到最后面。</p><p>当然，大家可以按照从大到小的方式进行排列。</p><h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><ol><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><p><img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\冒泡.gif" alt="冒泡"></p><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BubbleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            冒泡排序：</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">            1，相邻的元素两两比较，大的放右边，小的放左边。</span></span><br><span class="line"><span class="comment">            2，第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推。</span></span><br><span class="line"><span class="comment">            3，如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用冒泡排序将数组中的数据变成 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环：表示我要执行多少轮。 如果有n个数据，那么执行n - 1 轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮中我如何比较数据并找到当前的最大值</span></span><br><span class="line">            <span class="comment">//-1：为了防止索引越界</span></span><br><span class="line">            <span class="comment">//-i：提高效率，每一轮执行的次数应该比上一轮少一次。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//i 依次表示数组中的每一个索引：0 1 2 3 4</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h3 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>小的放前面，大的放后面</li><li>第一次循环结束后，最小的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。 </li></ol><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\选择排序.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_SelectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            选择排序：</span></span><br><span class="line"><span class="comment">                1，从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">                2，小的放前面，大的放后面。</span></span><br><span class="line"><span class="comment">                3，第一次循环结束后，最小的数据已经确定。</span></span><br><span class="line"><span class="comment">                4，第二次循环从1索引开始以此类推。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用选择排序让数组变成 1 2 3 4 5</span></span><br><span class="line">       <span class="comment">/* //第一轮：</span></span><br><span class="line"><span class="comment">        //从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">        for (int i = 0 + 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            //拿着0索引跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">            if(arr[0] &gt; arr[i])&#123;</span></span><br><span class="line"><span class="comment">                int temp = arr[0];</span></span><br><span class="line"><span class="comment">                arr[0] = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终代码：</span></span><br><span class="line">        <span class="comment">//外循环：几轮</span></span><br><span class="line">        <span class="comment">//i:表示这一轮中，我拿着哪个索引上的数据跟后面的数据进行比较并交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮我要干什么事情？</span></span><br><span class="line">            <span class="comment">//拿着i跟i后面的数据进行比较交换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过创建有序序列和无序序列，然后再遍历无序序列得到里面每一个数字，把每一个数字插入到有序序列中正确的位置。</p><p>插入排序在插入的时候，有优化算法，在遍历有序序列找正确位置时，可以采取二分查找</p><h3 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h3><p>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</p><p>N的范围：0~最大索引</p><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\插入排序.gif" alt="插入排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_InsertDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            插入排序：</span></span><br><span class="line"><span class="comment">                将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</span></span><br><span class="line"><span class="comment">                遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span></span><br><span class="line"><span class="comment">                N的范围：0~最大索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的哪一组数组是从哪个索引开始的。  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>它是处理大数据最快的排序算法之一了。</p><h3 id="4-1-算法步骤"><a href="#4-1-算法步骤" class="headerlink" title="4.1 算法步骤"></a>4.1 算法步骤</h3><ol><li>从数列中挑出一个元素，一般都是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="E:\JAVA\资料\黑马JAVASE\上\day21-API（算法，lambda，练习）\笔记\img\快速排序.gif" alt="快速排序"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05_QuickSortDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Integer.MAX_VALUE);<span class="number">3</span></span><br><span class="line">        System.out.println(Integer.MIN_VALUE);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        快速排序：</span></span><br><span class="line"><span class="comment">            第一轮：以0索引的数字为基准数，确定基准数在数组中正确的位置。</span></span><br><span class="line"><span class="comment">            比基准数小的全部在左边，比基准数大的全部在右边。</span></span><br><span class="line"><span class="comment">            后面以此类推。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr = new int[1000000];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Random r = new Random();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            arr[i] = r.nextInt();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(end - start);<span class="comment">//149</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//课堂练习：</span></span><br><span class="line">        <span class="comment">//我们可以利用相同的办法去测试一下，选择排序，冒泡排序以及插入排序运行的效率</span></span><br><span class="line">        <span class="comment">//得到一个结论：快速排序真的非常快。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   参数一：我们要排序的数组</span></span><br><span class="line"><span class="comment">     *   参数二：要排序数组的起始索引</span></span><br><span class="line"><span class="comment">     *   参数三：要排序数组的结束索引</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="comment">//递归的出口</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class="line">            <span class="comment">//int[] arr = &#123;1, 6, 2, 7, 9, 3, 4, 5, 10, 8&#125;;</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(end);</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h1><h2 id="1-TreeSet-compare比较器排序"><a href="#1-TreeSet-compare比较器排序" class="headerlink" title="1.TreeSet compare比较器排序"></a>1.TreeSet compare比较器排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(TreeStudent o)</span> &#123;</span><br><span class="line">     <span class="type">double</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="built_in">this</span>.getChineseScore() + <span class="built_in">this</span>.getMatchScore() + <span class="built_in">this</span>.getEnScore();</span><br><span class="line">     <span class="type">double</span> <span class="variable">sum2</span> <span class="operator">=</span> o.getChineseScore() + o.getMatchScore() + o.getEnScore();</span><br><span class="line"></span><br><span class="line">     <span class="type">double</span> <span class="variable">i</span> <span class="operator">=</span> sum1 - sum2;</span><br><span class="line"></span><br><span class="line">     i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getChineseScore() - o.getChineseScore() : i;</span><br><span class="line"></span><br><span class="line">     i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getMatchScore() - o.getMatchScore() : i;</span><br><span class="line"></span><br><span class="line">     i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getEnScore() - o.getEnScore() : i;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">return</span> (<span class="type">int</span>) i;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="1-拷贝文件"><a href="#1-拷贝文件" class="headerlink" title="1.拷贝文件"></a>1.拷贝文件</h2><p>将文件夹以及文件进行拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.copytest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">copy01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;DIR&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\javaIOTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        copySrc(src, dest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copySrc</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        dest.mkdirs();</span><br><span class="line"></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest, file.getName()));</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">5</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                fos.close();</span><br><span class="line">                fis.close();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line"></span><br><span class="line">                copySrc(file, <span class="keyword">new</span> <span class="title class_">File</span>(dest, file.getName()));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流 &amp;&amp; 方法引用</title>
      <link href="/posts/156ca839.html"/>
      <url>/posts/156ca839.html</url>
      
        <content type="html"><![CDATA[<h1 id="star-Stream流"><a href="#star-Stream流" class="headerlink" title=":star: Stream流"></a>:star: Stream流</h1><p><strong>将数据变成流水线可以进行中间方法和最终方法</strong></p><h2 id="1-初识Stream"><a href="#1-初识Stream" class="headerlink" title="1. 初识Stream"></a>1. 初识Stream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//集合的批量添加</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;张翠山&quot;</span>,<span class="string">&quot;王二麻子&quot;</span>,<span class="string">&quot;张良&quot;</span>,<span class="string">&quot;谢广坤&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流</span></span><br><span class="line">        list1.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;张&quot;</span>))</span><br><span class="line">                .filter(s-&gt;s.length() == <span class="number">3</span>)</span><br><span class="line">                .forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Stream流在各个数据类型中的应用"><a href="#2-Stream流在各个数据类型中的应用" class="headerlink" title="2. Stream流在各个数据类型中的应用"></a>2. Stream流在各个数据类型中的应用</h2><h3 id="2-1数组"><a href="#2-1数组" class="headerlink" title="2.1数组"></a>2.1数组</h3><ul><li><p><strong>Arrays. stream</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array01 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">String[] array02 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays.stream(array01).forEach(System.out::println);</span><br><span class="line">Arrays.stream(array02).forEach(System.out::println);   </span><br></pre></td></tr></table></figure></li><li><p><strong>Stream. of</strong></p><p><strong>需要注意 <code>Stram</code> 中的静态方法of只能传递引用数据类型</strong></p><p><strong>of中的形参数据类型需要一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array01 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">String[] array02 = &#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Stream.of(array01).forEach(System.out::println); <span class="comment">//[I@404b9385</span></span><br><span class="line">Stream.of(array02).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2集合"><a href="#2-2集合" class="headerlink" title="2.2集合"></a>2.2集合</h3><ul><li><p><strong>单列集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">set.stream()</span><br></pre></td></tr></table></figure></li><li><p><strong>双列集合</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hm.keySet().stream()</span><br><span class="line">hm.entrySet().stream()</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Stream流中间方法"><a href="#3-Stream流中间方法" class="headerlink" title="3. Stream流中间方法"></a>3. Stream流中间方法</h2><ul><li>中间方法，返回新的Stream流，原来的Stream流只能使用一次，建议使用链式编程</li><li>修改Stream流中的数据，不会影响原来集合或者数组中的数据</li></ul><h3 id="3-1-常见方法"><a href="#3-1-常见方法" class="headerlink" title="3.1 常见方法"></a>3.1 常见方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Stream<T> filter(Predicate predicate)</td><td>用于对流中的数据进行过滤</td></tr><tr><td>Stream<T> limit(long maxSize)</td><td>返回此流中的元素组成的流，截取前指定参数个数的数据</td></tr><tr><td>Stream<T> skip(long n)</td><td>跳过指定参数个数的数据，返回由该流的剩余元素组成的流</td></tr><tr><td>static <T> Stream<T> concat(Stream a, Stream b)</td><td>合并a和b两个流为一个流</td></tr><tr><td>Stream<T> distinct()</td><td>返回由该流的不同元素（根据Object.equals(Object) ）组成的流</td></tr></tbody></table></div><h3 id="3-2-代码演示"><a href="#3-2-代码演示" class="headerlink" title="3.2 代码演示"></a>3.2 代码演示</h3><ul><li><p>filter代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Stream&lt;T&gt; filter(Predicate predicate)：过滤</span></span><br><span class="line"><span class="comment">//        Predicate接口中的方法boolean test(T t)：对给定的参数进行判断，返回一个布尔值</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//filter方法获取流中的 每一个数据.</span></span><br><span class="line">        <span class="comment">//而test方法中的s,就依次表示流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//我们只要在test方法中对s进行判断就可以了.</span></span><br><span class="line">        <span class="comment">//如果判断的结果为true,则当前的数据留下</span></span><br><span class="line">        <span class="comment">//如果判断的结果为false,则当前数据就不要.</span></span><br><span class="line"><span class="comment">//        list.stream().filter(</span></span><br><span class="line"><span class="comment">//                new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//                    @Override</span></span><br><span class="line"><span class="comment">//                    public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">//                        boolean result = s.startsWith(&quot;张&quot;);</span></span><br><span class="line"><span class="comment">//                        return result;</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//        ).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Predicate接口中只有一个抽象方法test</span></span><br><span class="line">        <span class="comment">//所以我们可以使用lambda表达式来简化</span></span><br><span class="line"><span class="comment">//        list.stream().filter(</span></span><br><span class="line"><span class="comment">//                (String s)-&gt;&#123;</span></span><br><span class="line"><span class="comment">//                    boolean result = s.startsWith(&quot;张&quot;);</span></span><br><span class="line"><span class="comment">//                        return result;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//        ).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        list.stream().filter(s -&gt;s.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>limit&amp;skip代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前3个数据在控制台输出</span></span><br><span class="line">        list.stream().limit(<span class="number">3</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过3个元素，把剩下的元素在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：跳过2个元素，把剩下的元素中前2个在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>concat&amp;distinct代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前4个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过2个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出</span></span><br><span class="line"><span class="comment">//        Stream.concat(s1,s2).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></span><br><span class="line">        Stream.concat(s1,s2).distinct().forEach(s-&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Stream流终结方法"><a href="#4-Stream流终结方法" class="headerlink" title="4. Stream流终结方法"></a>4. Stream流终结方法</h2><p><strong>终结操作的意思是,执行完此方法之后,Stream流将不能再执行其他操作</strong></p><h3 id="4-1-常见方法"><a href="#4-1-常见方法" class="headerlink" title="4.1 常见方法"></a>4.1 常见方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void forEach(Consumer action)</td><td>对此流的每个元素执行操作</td></tr><tr><td>long count()</td><td>返回此流中的元素数</td></tr><tr><td>toArray(有参/空参)</td><td>创建一个数组，并且将流中的数据放入到数组中</td></tr><tr><td>collect</td><td>收集方法，将数据变成集合</td></tr></tbody></table></div><h3 id="4-2-代码演示"><a href="#4-2-代码演示" class="headerlink" title="4.2 代码演示"></a>4.2 代码演示</h3><ul><li><p>forEach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  void forEach(Consumer action)：对此流的每个元素执行操作</span></span><br><span class="line">        <span class="comment">//  Consumer接口中的方法void accept(T t)：对给定的参数执行此操作</span></span><br><span class="line">        <span class="comment">//在forEach方法的底层,会循环获取到流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//并循环调用accept方法,并把每一个数据传递给accept方法</span></span><br><span class="line">        <span class="comment">//s就依次表示了流中的每一个数据.</span></span><br><span class="line">        <span class="comment">//所以,我们只要在accept方法中,写上处理的业务逻辑就可以了.</span></span><br><span class="line">        list.stream().forEach(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                        System.out.println(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">      </span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda表达式的简化格式</span></span><br><span class="line">        <span class="comment">//是因为Consumer接口中,只有一个accept方法</span></span><br><span class="line">        list.stream().forEach(</span><br><span class="line">                (String s)-&gt;&#123;</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        <span class="comment">//lambda表达式还是可以进一步简化的.</span></span><br><span class="line">        list.stream().forEach(s-&gt;System.out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>count</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">l</span> <span class="operator">=</span> list.stream().count()</span><br></pre></td></tr></table></figure></li><li><p>toArray()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] arr = list.stream().toArray(<span class="keyword">new</span> <span class="title class_">IntFunction</span>&lt;String[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] apply(<span class="type">int</span> value) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String[] arr2 = list.stream().toArray(value -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[value]);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>collect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01mystream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            collect(Collector collector)            收集流中的数据，放到集合中 (List Set Map)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            注意点：</span></span><br><span class="line"><span class="comment">                如果我们要收集到Map集合当中，键不能重复，否则会报错</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;张无忌-男-15&quot;</span>, <span class="string">&quot;周芷若-女-14&quot;</span>, <span class="string">&quot;赵敏-女-13&quot;</span>, <span class="string">&quot;张强-男-20&quot;</span>,</span><br><span class="line">                <span class="string">&quot;张三丰-男-100&quot;</span>, <span class="string">&quot;张翠山-男-40&quot;</span>, <span class="string">&quot;张良-男-35&quot;</span>, <span class="string">&quot;王二麻子-男-37&quot;</span>, <span class="string">&quot;谢广坤-男-41&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集List集合当中</span></span><br><span class="line">        <span class="comment">//需求：</span></span><br><span class="line">        <span class="comment">//我要把所有的男性收集起来</span></span><br><span class="line">        List&lt;String&gt; newList1 = list.stream()</span><br><span class="line">                .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//System.out.println(newList1);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集Set集合当中</span></span><br><span class="line">        <span class="comment">//需求：</span></span><br><span class="line">        <span class="comment">//我要把所有的男性收集起来</span></span><br><span class="line">        Set&lt;String&gt; newList2 = list.stream().filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        <span class="comment">//System.out.println(newList2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//收集Map集合当中</span></span><br><span class="line">        <span class="comment">//谁作为键,谁作为值.</span></span><br><span class="line">        <span class="comment">//我要把所有的男性收集起来</span></span><br><span class="line">        <span class="comment">//键：姓名。 值：年龄</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = list.stream()</span><br><span class="line">                .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 *   toMap : 参数一表示键的生成规则</span></span><br><span class="line"><span class="comment">                 *           参数二表示值的生成规则</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * 参数一：</span></span><br><span class="line"><span class="comment">                 *       Function泛型一：表示流中每一个数据的类型</span></span><br><span class="line"><span class="comment">                 *               泛型二：表示Map集合中键的数据类型</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *        方法apply形参：依次表示流里面的每一个数据</span></span><br><span class="line"><span class="comment">                 *               方法体：生成键的代码</span></span><br><span class="line"><span class="comment">                 *               返回值：已经生成的键</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * 参数二：</span></span><br><span class="line"><span class="comment">                 *        Function泛型一：表示流中每一个数据的类型</span></span><br><span class="line"><span class="comment">                 *                泛型二：表示Map集合中值的数据类型</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *       方法apply形参：依次表示流里面的每一个数据</span></span><br><span class="line"><span class="comment">                 *               方法体：生成值的代码</span></span><br><span class="line"><span class="comment">                 *               返回值：已经生成的值</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                .collect(Collectors.toMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, String&gt;() &#123;</span><br><span class="line">                                              <span class="meta">@Override</span></span><br><span class="line">                                              <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                                                  <span class="comment">//张无忌-男-15</span></span><br><span class="line">                                                  <span class="keyword">return</span> s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                                              &#125;</span><br><span class="line">                                          &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Function</span>&lt;String, Integer&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String, Integer&gt; map2 = list.stream()</span><br><span class="line">                .filter(s -&gt; <span class="string">&quot;男&quot;</span>.equals(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]))</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        s -&gt; s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>],</span><br><span class="line">                        s -&gt; Integer.parseInt(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>])));</span><br><span class="line"></span><br><span class="line">        System.out.println(map2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-Stream流综合训练"><a href="#5-Stream流综合训练" class="headerlink" title="5.Stream流综合训练"></a>5.Stream流综合训练</h2><ul><li><p>案例需求</p><p>现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</p><ul><li>男演员只要名字为3个字的前三人</li><li>女演员只要姓林的，并且不要第一个</li><li>把过滤后的男演员姓名和女演员姓名合并到一起</li><li>把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</li></ul><p>演员类Actor已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</p></li><li><p>代码实现</p><p>演员类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Actor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Actor</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; manList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        manList.add(<span class="string">&quot;周润发&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;成龙&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;吴京&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;李连杰&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        ArrayList&lt;String&gt; womanList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        womanList.add(<span class="string">&quot;林心如&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//男演员只要名字为3个字的前三人</span></span><br><span class="line">        Stream&lt;String&gt; manStream = manList.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//女演员只要姓林的，并且不要第一个</span></span><br><span class="line">        Stream&lt;String&gt; womanStream = womanList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;林&quot;</span>)).skip(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.concat(manStream, womanStream);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 将流中的数据封装成Actor对象之后打印</span></span><br><span class="line">      stream.forEach(name -&gt; &#123;</span><br><span class="line">            <span class="type">Actor</span> <span class="variable">actor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Actor</span>(name);</span><br><span class="line">            System.out.println(actor);</span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="star-方法引用"><a href="#star-方法引用" class="headerlink" title=":star: 方法引用"></a>:star: 方法引用</h1><p><strong>把已经有的方法拿过来用，当作函数式接口中抽象方法的方法体</strong></p><p><img src="\images\img\方法引用01.png" alt="image-20240417101341032"></p><h2 id="1-样例"><a href="#1-样例" class="headerlink" title="1. 样例"></a>1. 样例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：创建一个数组，进行倒序排列</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Arrays.sort(arr, new Comparator&lt;Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Integer o1, Integer o2) &#123;</span></span><br><span class="line"><span class="comment">                return o2 - o1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        <span class="comment">//因为第二个参数的类型Comparator是一个函数式接口</span></span><br><span class="line">       <span class="comment">/* Arrays.sort(arr, (Integer o1, Integer o2)-&gt;&#123;</span></span><br><span class="line"><span class="comment">            return o2 - o1;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式简化格式</span></span><br><span class="line">        <span class="comment">//Arrays.sort(arr, (o1, o2)-&gt;o2 - o1 );</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        <span class="comment">//1.引用处需要是函数式接口</span></span><br><span class="line">        <span class="comment">//2.被引用的方法需要已经存在</span></span><br><span class="line">        <span class="comment">//3.被引用方法的形参和返回值需要跟抽象方法的形参和返回值保持一致</span></span><br><span class="line">        <span class="comment">//4.被引用方法的功能需要满足当前的要求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示引用FunctionDemo1类里面的subtraction方法</span></span><br><span class="line">        <span class="comment">//把这个方法当做抽象方法的方法体</span></span><br><span class="line">        Arrays.sort(arr, FunctionDemo1::subtraction);   <span class="comment">// 类名+“::”+方法名</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以是Java已经写好的，也可以是一些第三方的工具类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">subtraction</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2 - num1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-方法引用的分类"><a href="#2-方法引用的分类" class="headerlink" title="2. 方法引用的分类"></a>2. 方法引用的分类</h2><h3 id="2-1-引用静态方法"><a href="#2-1-引用静态方法" class="headerlink" title="2.1 引用静态方法"></a>2.1 引用静态方法</h3><ul><li>格式：类名<code>::</code>静态方法</li><li>范例：<code>Integet::parseInt</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.funcationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不使用方法引用</span></span><br><span class="line">        list.stream().map(s -&gt; Integer.parseInt(s));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用方法引用</span></span><br><span class="line">        list.stream().map(Integer::parseInt);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-引用成员方法"><a href="#2-2-引用成员方法" class="headerlink" title="2.2 引用成员方法"></a>2.2 引用成员方法</h3><ul><li>格式：对象<code>::</code>成员方法</li><li>其他类：其他类对象<code>::</code>方法名</li><li>本类：this<code>::</code>方法名</li><li>父类：super<code>::</code>方法名</li></ul><h4 id="2-2-1-引用其他类对象"><a href="#2-2-1-引用其他类对象" class="headerlink" title="2.2.1 引用其他类对象"></a>2.2.1 引用其他类对象</h4><p><strong>其他类对象<code>::</code>方法名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.funcationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        list.stream().filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length() == <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他类引用</span></span><br><span class="line">        list.stream().filter(Operation :: stringJudge)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stringJudge</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length() == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-引用本类对象"><a href="#2-2-2-引用本类对象" class="headerlink" title="2.2.2 引用本类对象"></a>2.2.2 引用本类对象</h4><p>注意静态中是没有this关键字的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yyh.funcationdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张三丰&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张翠山&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王二麻子&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张良&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;谢广坤&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法中是没有this关键字的</span></span><br><span class="line">        list.stream().filter(<span class="built_in">this</span>::stringJudge)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">stringJudge</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> s.startsWith(<span class="string">&quot;张&quot;</span>) &amp;&amp; s.length() == <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-引用构造方法"><a href="#2-3-引用构造方法" class="headerlink" title="2.3 引用构造方法"></a>2.3 引用构造方法</h3><ul><li>格式：类名<code>::</code>new</li><li>范例：Student<code>::</code>new</li></ul><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法引用（引用构造方法）</span></span><br><span class="line"><span class="comment">        格式</span></span><br><span class="line"><span class="comment">                类名::new</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        目的：</span></span><br><span class="line"><span class="comment">                创建这个类的对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        需求：</span></span><br><span class="line"><span class="comment">             集合里面存储姓名和年龄，要求封装成Student对象并收集到List集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        方法引用的规则：</span></span><br><span class="line"><span class="comment">            1.需要有函数式接口</span></span><br><span class="line"><span class="comment">            2.被引用的方法必须已经存在</span></span><br><span class="line"><span class="comment">            3.被引用方法的形参和返回值，需要跟抽象方法的形参返回值保持一致</span></span><br><span class="line"><span class="comment">            4.被引用方法的功能需要满足当前的需求</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.添加数据</span></span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;张无忌,15&quot;</span>, <span class="string">&quot;周芷若,14&quot;</span>, <span class="string">&quot;赵敏,13&quot;</span>, <span class="string">&quot;张强,20&quot;</span>, <span class="string">&quot;张三丰,100&quot;</span>, <span class="string">&quot;张翠山,40&quot;</span>, <span class="string">&quot;张良,35&quot;</span>, <span class="string">&quot;王二麻子,37&quot;</span>, <span class="string">&quot;谢广坤,41&quot;</span>);</span><br><span class="line">        <span class="comment">//3.封装成Student对象并收集到List集合中</span></span><br><span class="line">        <span class="comment">//String --&gt; Student</span></span><br><span class="line">      <span class="comment">/*  List&lt;Student&gt; newList = list.stream().map(new Function&lt;String, Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Student apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                String[] arr = s.split(&quot;,&quot;);</span></span><br><span class="line"><span class="comment">                String name = arr[0];</span></span><br><span class="line"><span class="comment">                int age = Integer.parseInt(arr[1]);</span></span><br><span class="line"><span class="comment">                return new Student(name, age);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">        System.out.println(newList);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; newList2 = list.stream().map(Student::<span class="keyword">new</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.age = Integer.parseInt(arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-其他调用方式"><a href="#2-4-其他调用方式" class="headerlink" title="2.4 其他调用方式"></a>2.4 其他调用方式</h3><h4 id="2-4-1-使用类名引用成员方法"><a href="#2-4-1-使用类名引用成员方法" class="headerlink" title="2.4.1 使用类名引用成员方法"></a>2.4.1 使用类名引用成员方法</h4><ul><li>格式：类名<code>::</code>成员方法</li><li>范例：<code>String::substring</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法引用（类名引用成员方法）</span></span><br><span class="line"><span class="comment">        格式</span></span><br><span class="line"><span class="comment">                类名::成员方法</span></span><br><span class="line"><span class="comment">        需求：</span></span><br><span class="line"><span class="comment">             集合里面一些字符串，要求变成大写后进行输出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        方法引用的规则：</span></span><br><span class="line"><span class="comment">        1.需要有函数式接口</span></span><br><span class="line"><span class="comment">        2.被引用的方法必须已经存在</span></span><br><span class="line"><span class="comment">        3.被引用方法的形参，需要跟抽象方法的第二个形参到最后一个形参保持一致，返回值需要保持一致。</span></span><br><span class="line"><span class="comment">        4.被引用方法的功能需要满足当前的需求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        抽象方法形参的详解：</span></span><br><span class="line"><span class="comment">        第一个参数：表示被引用方法的调用者，决定了可以引用哪些类中的方法</span></span><br><span class="line"><span class="comment">                    在Stream流当中，第一个参数一般都表示流里面的每一个数据。</span></span><br><span class="line"><span class="comment">                    假设流里面的数据是字符串，那么使用这种方式进行方法引用，只能引用String这个类中的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        第二个参数到最后一个参数：跟被引用方法的形参保持一致，如果没有第二个参数，说明被引用的方法需要是无参的成员方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        局限性：</span></span><br><span class="line"><span class="comment">            不能引用所有类中的成员方法。</span></span><br><span class="line"><span class="comment">            是跟抽象方法的第一个参数有关，这个参数是什么类型的，那么就只能引用这个类中的方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.添加数据</span></span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        <span class="comment">//3.变成大写后进行输出</span></span><br><span class="line">        <span class="comment">//map(String::toUpperCase)</span></span><br><span class="line">        <span class="comment">//拿着流里面的每一个数据，去调用String类中的toUpperCase方法，方法的返回值就是转换之后的结果。</span></span><br><span class="line">        list.stream().map(String::toUpperCase).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String --&gt; String</span></span><br><span class="line">       <span class="comment">/* list.stream().map(new Function&lt;String, String&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public String apply(String s) &#123;</span></span><br><span class="line"><span class="comment">                return s.toUpperCase();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;).forEach(s -&gt; System.out.println(s));*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1引用数组的构造方法"><a href="#2-4-1引用数组的构造方法" class="headerlink" title="2.4.1引用数组的构造方法"></a>2.4.1引用数组的构造方法</h4><ul><li>格式：数据类型[]<code>::</code>new</li><li>范例：<code>int[]::new</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法引用（数组的构造方法）</span></span><br><span class="line"><span class="comment">        格式</span></span><br><span class="line"><span class="comment">                数据类型[]::new</span></span><br><span class="line"><span class="comment">        目的：</span></span><br><span class="line"><span class="comment">                创建一个指定类型的数组</span></span><br><span class="line"><span class="comment">        需求：</span></span><br><span class="line"><span class="comment">             集合中存储一些整数，收集到数组当中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        细节：</span></span><br><span class="line"><span class="comment">            数组的类型，需要跟流中数据的类型保持一致。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//2.收集到数组当中</span></span><br><span class="line"></span><br><span class="line">        Integer[] arr2 = list.stream().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Integer[] arr = list.stream().toArray(new IntFunction&lt;Integer[]&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public Integer[] apply(int value) &#123;</span></span><br><span class="line"><span class="comment">                return new Integer[value];</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01myfunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        需求：</span></span><br><span class="line"><span class="comment">             集合中存储一些字符串的数据，比如：张三,23。</span></span><br><span class="line"><span class="comment">             收集到Student类型的数组当中</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(list, <span class="string">&quot;张无忌,15&quot;</span>, <span class="string">&quot;周芷若,14&quot;</span>, <span class="string">&quot;赵敏,13&quot;</span>, <span class="string">&quot;张强,20&quot;</span>, <span class="string">&quot;张三丰,100&quot;</span>, <span class="string">&quot;张翠山,40&quot;</span>, <span class="string">&quot;张良,35&quot;</span>, <span class="string">&quot;王二麻子,37&quot;</span>, <span class="string">&quot;谢广坤,41&quot;</span>);</span><br><span class="line">        <span class="comment">//2.先把字符串变成Student对象，然后再把Student对象收集起来</span></span><br><span class="line">        Student[] arr = list.stream().map(Student::<span class="keyword">new</span>).toArray(Student[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数开省赛</title>
      <link href="/posts/f49c8269.html"/>
      <url>/posts/f49c8269.html</url>
      
        <content type="html"><![CDATA[<p>闭包</p>]]></content>
      
      
      <categories>
          
          <category> 工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/posts/498ab7d9.html"/>
      <url>/posts/498ab7d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><h3 id="1-cut"><a href="#1-cut" class="headerlink" title="1. cut"></a>1. cut</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">labels = <span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>)</span><br><span class="line">height = np.array([<span class="number">173</span>,<span class="number">192</span>,<span class="number">186</span>,<span class="number">167</span>,<span class="number">159</span>,<span class="number">159</span>,<span class="number">176</span>,<span class="number">160</span>,<span class="number">162</span>,<span class="number">167</span>])</span><br><span class="line">height = pd.cut(height,<span class="number">4</span>,labels=labels)</span><br><span class="line"><span class="built_in">print</span>(height)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Categories (<span class="number">4</span>, <span class="built_in">object</span>): [<span class="string">&#x27;A&#x27;</span> &lt; <span class="string">&#x27;B&#x27;</span> &lt; <span class="string">&#x27;C&#x27;</span> &lt; <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="2-qcut"><a href="#2-qcut" class="headerlink" title="2. qcut"></a>2. qcut</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#每一段都是均分             </span></span><br><span class="line">height = np.array([<span class="number">173</span>,<span class="number">192</span>,<span class="number">186</span>,<span class="number">167</span>,<span class="number">159</span>,<span class="number">159</span>,<span class="number">176</span>,<span class="number">160</span>,<span class="number">162</span>,<span class="number">167</span>])</span><br><span class="line">height = pd.qcut(height,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(height)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">[(<span class="number">167.0</span>, <span class="number">175.25</span>], (<span class="number">175.25</span>, <span class="number">192.0</span>], (<span class="number">175.25</span>, <span class="number">192.0</span>], (<span class="number">160.5</span>, <span class="number">167.0</span>], (<span class="number">158.999</span>, <span class="number">160.5</span>], (<span class="number">158.999</span>, <span class="number">160.5</span>], (<span class="number">175.25</span>, <span class="number">192.0</span>], (<span class="number">158.999</span>, <span class="number">160.5</span>], (<span class="number">160.5</span>, <span class="number">167.0</span>], (<span class="number">160.5</span>, <span class="number">167.0</span>]]</span><br><span class="line">Categories (<span class="number">4</span>, interval[float64, right]): [(<span class="number">158.999</span>, <span class="number">160.5</span>] &lt; (<span class="number">160.5</span>, <span class="number">167.0</span>] &lt; (<span class="number">167.0</span>, <span class="number">175.25</span>] &lt;</span><br><span class="line">                                           (<span class="number">175.25</span>, <span class="number">192.0</span>]]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="哑变量编码"><a href="#哑变量编码" class="headerlink" title="哑变量编码"></a>哑变量编码</h2><p>对于需要分类的变量进行哑变量编码或者one hot编码以方便距离或相似度的计算</p><p>eg, 性别/星期/颜色等分类变量的度量</p><p>pandas库中的get_dummies()函数可以实现分类变量的哑变量编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">gender = np.array([<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="literal">None</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;F&#x27;</span>],prefix=<span class="string">&#x27;Gender&#x27;</span>)</span><br><span class="line">ybl = pd.get_dummies(gender)</span><br><span class="line"><span class="built_in">print</span>(ybl)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">   Gender_F  Gender_M</span><br><span class="line"><span class="number">0</span>         <span class="number">0</span>         <span class="number">1</span></span><br><span class="line"><span class="number">1</span>         <span class="number">1</span>         <span class="number">0</span></span><br><span class="line"><span class="number">2</span>         <span class="number">0</span>         <span class="number">1</span></span><br><span class="line"><span class="number">3</span>         <span class="number">1</span>         <span class="number">0</span></span><br><span class="line"><span class="number">4</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line"><span class="number">5</span>         <span class="number">0</span>         <span class="number">1</span></span><br><span class="line"><span class="number">6</span>         <span class="number">1</span>         <span class="number">0</span></span><br><span class="line"><span class="number">7</span>         <span class="number">0</span>         <span class="number">1</span></span><br><span class="line"><span class="number">8</span>         <span class="number">1</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h1 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h1><ol><li>从数据中学习            特征值 + 目标值</li><li>学习结果为模型             </li><li>预测、识别….</li></ol><h1 id="机器学习开发流程"><a href="#机器学习开发流程" class="headerlink" title="机器学习开发流程"></a>机器学习开发流程</h1><ol><li>获取数据</li><li>数据处理</li><li>特征工程</li><li>机器学习算法训练 + 模型</li><li>模型评估</li><li>应用</li></ol><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如有🚚和🚗，我怎么让机器去识别？</span><br></pre></td></tr></table></figure><p><img src="E:\Hexo-Blog\piccode\PicCode\img\Machine\machine_base_01.webp" alt="image-20230601190609584" style="zoom:33%;" /></p><ul><li><p>特征（维度）    Feature</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">车长   车宽   车高</span><br></pre></td></tr></table></figure><p>这样就是判别是否为卡车还是轿车，so 我们也称它有三个维度</p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601190246118.png" alt="image-20230601190246118" style="zoom:33%;" /></p></li><li><p>算法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我现在知道了车宽和车高去判断卡车还是轿车，只需要根据已有的样本空间去判断距离他们的远近即可</span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601190530813.png" alt="image-20230601190530813" style="zoom:33%;" /></p></li><li><p>标签     Label</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是卡车和货车</span><br></pre></td></tr></table></figure></li><li><p>预测    Prediction</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未知的标签，从已知的特征中预测出来</span><br></pre></td></tr></table></figure></li></ul><h1 id="监督学习与非监督学习"><a href="#监督学习与非监督学习" class="headerlink" title="监督学习与非监督学习"></a>监督学习与非监督学习</h1><h2 id="监督学习-有目标值"><a href="#监督学习-有目标值" class="headerlink" title="监督学习(有目标值)"></a>监督学习(有目标值)</h2><p>监督学习是以任务为驱动的方法</p><p>这里任务 ——-&gt; 就是标签（判断是否为🚚, 判断百公里油耗为多少）</p><p>这里就可以看出来，非监督学习就是没有标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">预测股票</span><br><span class="line">预测某人50岁得某病的可能</span><br><span class="line">判断物体是什么</span><br></pre></td></tr></table></figure><h3 id="分类任务（离散）"><a href="#分类任务（离散）" class="headerlink" title="分类任务（离散）"></a>分类任务（离散）</h3><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601191124148.png" alt="image-20230601191124148" style="zoom: 50%;" /></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601191318163.png" alt="image-20230601191318163" style="zoom:50%;" /></p><h3 id="回归任务（连续）"><a href="#回归任务（连续）" class="headerlink" title="回归任务（连续）"></a>回归任务（连续）</h3><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601191218514.png" alt="image-20230601191218514" style="zoom:50%;" /></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601191450551.png" alt="image-20230601191450551" style="zoom:50%;" /></p><h2 id="非监督学习-无目标值"><a href="#非监督学习-无目标值" class="headerlink" title="非监督学习(无目标值)"></a>非监督学习(无目标值)</h2><p>就是没有标签，让你胡乱推测</p><ul><li>比如你去百度搜索某个东西，他会预测你是不是想买，或者想要了解，就会给你推送链接</li><li>分析用户行为，游戏氪金，大佬就被割韭菜，大数据杀熟</li><li>基因组，判断每一串基因对人类的影响</li></ul><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601192117920.png" alt="image-20230601192117920"></p><h1 id="训练，验证，测试与评估"><a href="#训练，验证，测试与评估" class="headerlink" title="训练，验证，测试与评估"></a>训练，验证，测试与评估</h1><p>有点乱七八糟的不好理解  多写写代码就懂了</p><h2 id="1-训练"><a href="#1-训练" class="headerlink" title="1.训练"></a>1.训练</h2><p>总结数据的信息，从中学习有用的规律</p><h2 id="2-验证"><a href="#2-验证" class="headerlink" title="2.验证"></a>2.验证</h2><p>不参与模型参数的求解 但是 参与模型的学习过程</p><p>更多的是属于训练过程</p><p><strong><em>我理解的就是一个做课后作业的过程，查缺补漏</em></strong></p><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><p>与训练过程和模型绝缘用来评估模型的最终效果</p><p>属于测试过程</p><p><strong><em>我理解就是期末考试</em></strong></p><h2 id="4-评估"><a href="#4-评估" class="headerlink" title="4.评估"></a>4.评估</h2><p>根据指标来判断模型是好是坏</p><ul><li><p>腾讯医疗-癌症预测100000</p><ol><li><p>训练集80000</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于 训练和验证</span><br></pre></td></tr></table></figure></li><li><p>测试集20000</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用于 评估</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="Sklearn"><a href="#Sklearn" class="headerlink" title="Sklearn"></a>Sklearn</h1><h2 id="1-Sklearn数据集"><a href="#1-Sklearn数据集" class="headerlink" title="1. Sklearn数据集"></a>1. Sklearn数据集</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sklearn.databasets</span><br><span class="line">load_*获取小规模数据集</span><br><span class="line">fetch_*获取大规模数据集</span><br></pre></td></tr></table></figure><h3 id="1-1-sklearn小数据集"><a href="#1-1-sklearn小数据集" class="headerlink" title="1.1 sklearn小数据集"></a>1.1 sklearn小数据集</h3><p>例如我要引用鸢尾花的小规模的数据集就可以使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn<span class="selector-class">.databasets</span><span class="selector-class">.load_iris</span>()</span><br></pre></td></tr></table></figure><p>波士顿房价数据集</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn<span class="selector-class">.databasets</span><span class="selector-class">.load_boston</span>()</span><br></pre></td></tr></table></figure><h3 id="1-2-sklearn大数据集"><a href="#1-2-sklearn大数据集" class="headerlink" title="1.2 sklearn大数据集"></a>1.2 sklearn大数据集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.databasets.fetch_20newsgroups(data_home<span class="operator">=</span><span class="keyword">None</span>,<span class="keyword">subset</span><span class="operator">=</span><span class="string">&#x27;train&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>subset: ‘train’或者’test’，’all‘</li><li>训练集的训练，测试，全部</li></ul><h3 id="1-3-数据集的返回值"><a href="#1-3-数据集的返回值" class="headerlink" title="1.3 数据集的返回值"></a>1.3 数据集的返回值</h3><ul><li><pre><code>databasets.base.Bunch  (字典)dict[&#39;key&#39;] = values<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="class"><span class="keyword">data</span>：特征值</span></span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    iris[&#x27;<span class="class"><span class="keyword">data</span>&#x27;]</span></span><br></pre></td></tr></table></figure>- target：标签值  - ```python    iris.target    <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- DESCR：数据描述</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    iris.DESCR</span><br></pre></td></tr></table></figure>- feature_name：特征名  -</code></pre><pre><code>iris.feature_names<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- target_name：标签名</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    iris.target_names</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="1-4-数据集的划分"><a href="#1-4-数据集的划分" class="headerlink" title="1.4 数据集的划分"></a>1.4 数据集的划分</h3><ul><li>训练集：70% 80% 75%</li><li>测试集：30% 20% 25%</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line">    x_train,x_test,y_train,y_test = train_test_split(iris.data,iris.target,test_size=<span class="number">0.2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练集的特征值:\n&quot;</span>,x_train,x_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集的特征值:\n&quot;</span>,x_test,x_test.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;训练集的目标值:\n&quot;</span>,y_train,y_train.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集的目标值:\n&quot;</span>,y_test,y_test.shape)</span><br></pre></td></tr></table></figure><h1 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h1><p>数据和特征决定了机器学习的上线，模型和算法知识在逼近这个上限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是处理数据</span><br></pre></td></tr></table></figure><h2 id="特征工程内容"><a href="#特征工程内容" class="headerlink" title="特征工程内容"></a>特征工程内容</h2><ul><li>特征提取<ul><li>机器学习算法 - 统计方法 - 数学公式</li><li>例如：文本类型 -&gt; 数值</li><li>类型 -&gt; 数值<ul><li>这里可以用One-hot编码或者哑变量</li></ul></li></ul></li><li>特征预处理<br>- </li><li>特征降维</li></ul><h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><h4 id="1-将数据转换为可用于机器学习的数字特征"><a href="#1-将数据转换为可用于机器学习的数字特征" class="headerlink" title="1. 将数据转换为可用于机器学习的数字特征"></a>1. 将数据转换为可用于机器学习的数字特征</h4><blockquote><p>就是为了计算机更好的理解数据</p></blockquote><ul><li>字典特征提取(特征离散化)</li><li>文本特征提取</li><li>图像特征提取</li></ul><h4 id="2-特征提取API"><a href="#2-特征提取API" class="headerlink" title="2. 特征提取API"></a>2. 特征提取API</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.<span class="built_in">feature</span>.extraction</span><br></pre></td></tr></table></figure><h3 id="字典特征提取"><a href="#字典特征提取" class="headerlink" title="字典特征提取"></a>字典特征提取</h3><p>作用: 对字典数据进行特征值化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字典特征抽取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict_demo</span>():</span><br><span class="line">    <span class="built_in">dict</span> = [&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">100</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">30</span>&#125;]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.实例化一个转换器类</span></span><br><span class="line">    transfer = DictVectorizer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.调用fit_transform</span></span><br><span class="line">    <span class="comment"># 返回了sparse稀疏矩阵 将非零值 按位置表示 可以节省内存 提高加载效率</span></span><br><span class="line">    data = transfer.fit_transform(<span class="built_in">dict</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_dict:\n&quot;</span>, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;特征名字:\n&quot;</span>, transfer.feature_names_)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    data_dict:</span></span><br><span class="line"><span class="string">      (0, 0)1.0</span></span><br><span class="line"><span class="string">      (0, 3)100.0</span></span><br><span class="line"><span class="string">      (1, 1)1.0</span></span><br><span class="line"><span class="string">      (1, 3)60.0</span></span><br><span class="line"><span class="string">      (2, 2)1.0</span></span><br><span class="line"><span class="string">      (2, 3)30.0</span></span><br><span class="line"><span class="string">    特征名字:</span></span><br><span class="line"><span class="string">    [&#x27;city=上海&#x27;, &#x27;city=北京&#x27;, &#x27;city=深圳&#x27;, &#x27;temperature&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dict_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>当数据集中类别特征比较多的情况下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.将数据集中的特征<span class="operator">=</span>》字典类型</span><br><span class="line"><span class="number">2</span>.DictVectorizer转换</span><br></pre></td></tr></table></figure></li><li><p>当本身拿到的数据就是字典类型就可以用字典特征提取</p></li></ul><h3 id="文本特征提取"><a href="#文本特征提取" class="headerlink" title="文本特征提取"></a>文本特征提取</h3><p>单词 作为 特征</p><p>句子、短语、单词、字母</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">特征：特征词</span><br></pre></td></tr></table></figure><h4 id="英文文本"><a href="#英文文本" class="headerlink" title="英文文本"></a>英文文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_demo</span>():</span><br><span class="line">    data = [<span class="string">&quot;Life is short,i like python&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Lift is too long,i dislike python&quot;</span>]</span><br><span class="line">    text = CountVectorizer()</span><br><span class="line"></span><br><span class="line">    sparse = text.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(sparse)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;特征名字:\n&quot;</span>, text.get_feature_names_out())</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      (0, 2)1</span></span><br><span class="line"><span class="string">      (0, 1)1</span></span><br><span class="line"><span class="string">      (0, 7)1</span></span><br><span class="line"><span class="string">      (0, 4)1</span></span><br><span class="line"><span class="string">      (0, 6)1</span></span><br><span class="line"><span class="string">      (1, 1)1</span></span><br><span class="line"><span class="string">      (1, 6)1</span></span><br><span class="line"><span class="string">      (1, 3)1</span></span><br><span class="line"><span class="string">      (1, 8)1</span></span><br><span class="line"><span class="string">      (1, 5)1</span></span><br><span class="line"><span class="string">      (1, 0)1</span></span><br><span class="line"><span class="string">      特征名字:</span></span><br><span class="line"><span class="string">        [&#x27;dislike&#x27; &#x27;is&#x27; &#x27;life&#x27; &#x27;lift&#x27; &#x27;like&#x27; &#x27;long&#x27; &#x27;python&#x27; &#x27;short&#x27; &#x27;too&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count_demo()</span><br></pre></td></tr></table></figure><h4 id="中文文本"><a href="#中文文本" class="headerlink" title="中文文本"></a>中文文本</h4><p>由于英文每个单词之间默认就是按照空格隔开，但是中文”你好”这种就没有空格</p><p>所以要借助一些分词工具   例如jieba分词….</p><blockquote><p>这里引出一个概念：停用词 stop_words</p><p>不止是中文这种，比如想一些未知的文本不容易进行分词的就可以使用停用词不将其进入</p><p>停用词表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinescount_demo</span>():</span><br><span class="line">    data = [<span class="string">&quot;引力，电磁力，强与弱相互作用力——四大基本力是我掌控的权能，是我永恒的冠冕，是我不朽的王座 。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;无知愚昧之物称我为暴君，但是智者，以我为王。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;有人对我闻风丧胆，有人对我顶礼膜拜，他们，都同样臣服于我。&quot;</span>]</span><br><span class="line">    data_new = []</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> data:</span><br><span class="line">        data_new.append(cut_word(sent))</span><br><span class="line"></span><br><span class="line">    trans = CountVectorizer()</span><br><span class="line">    res = trans.fit_transform(data_new)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换结果:\n&quot;</span>,res.toarray())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;特征名字:\n&quot;</span>, trans.get_feature_names_out())</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    转换结果:</span></span><br><span class="line"><span class="string">     [[1 0 0 0 1 1 0 1 1 1 0 1 0 0 0 0 1 1 1 1 1 0 0 0]</span></span><br><span class="line"><span class="string">     [0 1 0 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 0 0 0 0 0 0]</span></span><br><span class="line"><span class="string">     [0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 2 0 0 0 0 0 1 1 1]]</span></span><br><span class="line"><span class="string">    特征名字:</span></span><br><span class="line"><span class="string">     [&#x27;不朽&#x27; &#x27;之物&#x27; &#x27;他们&#x27; &#x27;但是&#x27; &#x27;冠冕&#x27; &#x27;力是&#x27; &#x27;同样&#x27; &#x27;四大&#x27; &#x27;基本&#x27; &#x27;引力&#x27; &#x27;愚昧&#x27; &#x27;掌控&#x27; &#x27;无知&#x27; &#x27;智者&#x27;</span></span><br><span class="line"><span class="string">     &#x27;暴君&#x27; &#x27;有人&#x27; &#x27;权能&#x27; &#x27;永恒&#x27; &#x27;王座&#x27; &#x27;电磁力&#x27; &#x27;相互作用&#x27; &#x27;臣服于&#x27; &#x27;闻风丧胆&#x27; &#x27;顶礼膜拜&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_word</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行中文分词</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">list</span>(jieba.cut(text)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    chinescount_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是按照这种分类会有一个弊病，比如说文章中有很多  因为  、所以 、…这样的词，在别的文章中同样也有很多，这样就会导致特征值的抽取中存在错误</p><h4 id="Tf-idf文本特征提取"><a href="#Tf-idf文本特征提取" class="headerlink" title="Tf-idf文本特征提取"></a>Tf-idf文本特征提取</h4><blockquote><p>如果某个词或者短语，在一篇文章中出现的概率高，并且在其它文章中很少出现，则认为这个词或者短语具有很好的类别区分能力，适合用来分类</p></blockquote><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230603201325407.png" alt="image-20230603201325407"></p><p>总结：</p><p>TF-IDF就是衡量一个词或短语的重要程度</p><ul><li><p>TF - 词频</p></li><li><p>IDF - 逆向文档频率 是一个词语普遍重要性的度量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">比如现在</span></span><br><span class="line"><span class="number">1000</span><span class="string">篇文章</span> <span class="bullet">-</span> <span class="string">语料库</span></span><br><span class="line"><span class="number">100</span><span class="string">篇文章</span> <span class="bullet">-</span> <span class="string">”非常“</span></span><br><span class="line"><span class="number">10</span><span class="string">篇文章</span> <span class="bullet">-</span> <span class="string">”经济</span></span><br><span class="line"></span><br><span class="line"><span class="string">两篇文章</span></span><br><span class="line"><span class="string">文章A（100词）：10次“经济”</span> <span class="string">TF-IDF</span> <span class="string">=</span> <span class="string">TF</span> <span class="string">x</span> <span class="string">IDF</span> <span class="string">=</span> <span class="number">0.1</span> <span class="string">X</span> <span class="number">2</span> <span class="string">=</span> <span class="number">0.2</span></span><br><span class="line"><span class="attr">tf:</span> <span class="number">10</span><span class="string">/100</span> <span class="string">=</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">idf:</span> <span class="string">lg</span> <span class="number">1000</span><span class="string">/10</span> <span class="string">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><p>实用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinescount_demo</span>():</span><br><span class="line">    data = [<span class="string">&quot;引力，电磁力，强与弱相互作用力——四大基本力是我掌控的权能，是我永恒的冠冕，是我不朽的王座 。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;无知愚昧之物称我为暴君，但是智者，以我为王。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;有人对我闻风丧胆，有人对我顶礼膜拜，他们，都同样臣服于我。&quot;</span>]</span><br><span class="line">    data_new = []</span><br><span class="line">    <span class="keyword">for</span> sent <span class="keyword">in</span> data:</span><br><span class="line">        data_new.append(cut_word(sent))</span><br><span class="line"></span><br><span class="line">    trans = TfidfVectorizer()</span><br><span class="line">    res = trans.fit_transform(data_new)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;转换结果:\n&quot;</span>,res.toarray())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;特征名字:\n&quot;</span>, trans.get_feature_names_out())</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        转换结果:</span></span><br><span class="line"><span class="string">         [[0.28867513 0.         0.         0.         0.28867513 0.28867513</span></span><br><span class="line"><span class="string">          0.         0.28867513 0.28867513 0.28867513 0.         0.28867513</span></span><br><span class="line"><span class="string">          0.         0.         0.         0.         0.28867513 0.28867513</span></span><br><span class="line"><span class="string">          0.28867513 0.28867513 0.28867513 0.         0.         0.        ]</span></span><br><span class="line"><span class="string">         [0.         0.40824829 0.         0.40824829 0.         0.</span></span><br><span class="line"><span class="string">          0.         0.         0.         0.         0.40824829 0.</span></span><br><span class="line"><span class="string">          0.40824829 0.40824829 0.40824829 0.         0.         0.</span></span><br><span class="line"><span class="string">          0.         0.         0.         0.         0.         0.        ]</span></span><br><span class="line"><span class="string">         [0.         0.         0.33333333 0.         0.         0.</span></span><br><span class="line"><span class="string">          0.33333333 0.         0.         0.         0.         0.</span></span><br><span class="line"><span class="string">          0.         0.         0.         0.66666667 0.         0.</span></span><br><span class="line"><span class="string">          0.         0.         0.         0.33333333 0.33333333 0.33333333]]</span></span><br><span class="line"><span class="string">        特征名字:</span></span><br><span class="line"><span class="string">         [&#x27;不朽&#x27; &#x27;之物&#x27; &#x27;他们&#x27; &#x27;但是&#x27; &#x27;冠冕&#x27; &#x27;力是&#x27; &#x27;同样&#x27; &#x27;四大&#x27; &#x27;基本&#x27; &#x27;引力&#x27; &#x27;愚昧&#x27; &#x27;掌控&#x27; &#x27;无知&#x27; &#x27;智者&#x27;</span></span><br><span class="line"><span class="string">         &#x27;暴君&#x27; &#x27;有人&#x27; &#x27;权能&#x27; &#x27;永恒&#x27; &#x27;王座&#x27; &#x27;电磁力&#x27; &#x27;相互作用&#x27; &#x27;臣服于&#x27; &#x27;闻风丧胆&#x27; &#x27;顶礼膜拜&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut_word</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行中文分词</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(<span class="built_in">list</span>(jieba.cut(text)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    chinescount_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="特征提取总结"><a href="#特征提取总结" class="headerlink" title="特征提取总结"></a>特征提取总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字典特征提取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict_count</span>():</span><br><span class="line">    <span class="built_in">dict</span> = [&#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">100</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>, <span class="string">&#x27;temperature&#x27;</span>: <span class="number">30</span>&#125;]</span><br><span class="line">    transfer = DictVectorizer()</span><br><span class="line">    data = transfer.fit_transform(<span class="built_in">dict</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;字典特征提取:\n&quot;</span>,data.toarray())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">english_count</span>():</span><br><span class="line">    data = [<span class="string">&quot;Life is short,i like like like python&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Life is too long,i dislike python&quot;</span>]</span><br><span class="line">    transfer = CountVectorizer()</span><br><span class="line">    data = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;英文文本提取:\n&quot;</span>,data.toarray())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chinese_count</span>():</span><br><span class="line">    chinese_data = [<span class="string">&quot;蒸汽与机械的浪潮中，谁能触及非凡？历史和黑暗的迷雾里，又是谁在耳语？我从诡秘中醒来，睁眼看见这个世界：&quot;</span>,</span><br><span class="line">            <span class="string">&quot;枪械，大炮，巨舰，飞空艇，差分机；魔药，占卜，诅咒，倒吊人，封印物……光明依旧照耀，神秘从未远离，这是一段“愚者”的传说。  &quot;</span>,</span><br><span class="line">            <span class="string">&quot;然而一句，半睡半醒之时，意志总是飘忽如同烟雾，难以控制，难以收束，他再怎么努力，依旧忍不住思维发散，杂念浮现。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;　　看来我还没有真醒，还在梦里……等下说不定还会出现自以为已经醒了，实际依然在睡的情况……对类似遭遇不算陌生的周明瑞竭力集中意志，以彻底摆脱黑暗和迷幻的桎梏。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;　　照耀视线先是模糊，继而蒙上了淡淡的绯红，目光所及绯红，周明瑞看见面前是一张原木色泽的书桌，正中央放着一本摊开的笔记，纸张粗糙而泛黄，抬头用奇怪的字母文字书写着一句话语，墨迹深黑，醒目欲滴。&quot;</span>]</span><br><span class="line">    transfer = CountVectorizer()</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chinese_data:</span><br><span class="line">        data.append(<span class="string">&quot; &quot;</span>.join(jieba.cut(i)))</span><br><span class="line">    datas = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(datas)</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TF_IDF</span>():</span><br><span class="line">    chinese_data = [<span class="string">&quot;蒸汽与机械的浪潮中，谁能触及非凡？历史和黑暗的迷雾里，又是谁在耳语？我从诡秘中醒来，睁眼看见这个世界：&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;枪械，大炮，巨舰，飞空艇，差分机；魔药，占卜，诅咒，倒吊人，封印物……光明依旧照耀，神秘从未远离，这是一段“愚者”的传说。  &quot;</span>,</span><br><span class="line">                    <span class="string">&quot;然而一句，半睡半醒之时，意志总是飘忽如同烟雾，难以控制，难以收束，他再怎么努力，依旧忍不住思维发散，杂念浮现。&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;　　然而看来我还没有真醒，还在梦里……等下说不定还会出现自以为已经醒了，实际依然在睡的情况……对类似遭遇不算陌生的周明瑞竭力集中意志，以彻底摆脱黑暗和迷幻的桎梏。&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;　　照耀视线先是模糊，继而蒙上了淡淡的绯红，目光所及绯红，周明瑞看见面前是一张原木色泽的书桌，正中央放着一本摊开的笔记，纸张粗糙而泛黄，抬头用奇怪的字母文字书写着一句话语，墨迹深黑，醒目欲滴。&quot;</span>]</span><br><span class="line">    transfer = TfidfVectorizer()</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chinese_data:</span><br><span class="line">        data.append(<span class="string">&quot; &quot;</span>.join(jieba.cut(i)))</span><br><span class="line">    datas = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(datas)</span><br><span class="line">    <span class="built_in">print</span>(transfer.get_feature_names_out())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    dict_count()</span><br><span class="line">    english_count()</span><br><span class="line">    chinese_count()</span><br><span class="line">    TF_IDF()</span><br></pre></td></tr></table></figure><h2 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h2><p>就是通过一些转换函数将特征数据转换成更加适合算法模型的特征数据的过程</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ul><li>数值型数据的无量纲化：<ul><li>归一化</li><li>标准化</li></ul></li></ul><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.preprocessing</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230604112108821.png" alt="image-20230604112108821"></p><ul><li>为什么要进行归一化/标准化<ul><li>特征的单位或者大小相差较大，或者某特征的方差相比其他的特征要大出来几个数量级，容易影响分配</li></ul></li></ul><p>就比如对于这样一种数据，如果你用KNN算法，那么误差会极大，因为消耗时间百分比 与 里程数之间相差太大这样就会直接把消耗时间百分比当作一个无用数据</p><p>而归一化 就是将这些数据规划成同等重要，即为无量纲化</p><h4 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h4><h5 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h5><p>通过对原始数据进行变换把数据映射到（默认[0，1]）之间</p><p><a href="https://baike.baidu.com/item/%E5%BD%92%E4%B8%80%E5%8C%96/2215161?fr=aladdin">百度</a></p><h5 id="2-公式"><a href="#2-公式" class="headerlink" title="2.公式"></a>2.公式</h5><script type="math/tex; mode=display">归一化            X' = x - min/max-min                  X'' = X' * (mx - mi) + mi</script><blockquote><p>作用与每一列，max为每一列的最大值，min为一列的最小值，那么X’’为最终结果，</p><p>mx,mi分别为指定区间默认mx为1，mi为0</p></blockquote><h5 id="3-API"><a href="#3-API" class="headerlink" title="3.API"></a>3.API</h5><h6 id="3-1MinMaxScaler"><a href="#3-1MinMaxScaler" class="headerlink" title="3.1MinMaxScaler"></a>3.1MinMaxScaler</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">归一化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">minmax_demo</span>():</span><br><span class="line">    <span class="comment"># 1. 获取数据</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;E:\Code\Pywork\Machine\data\dating.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 每一行都要只要前三列</span></span><br><span class="line">    data = data.iloc[:, :<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 实例化一个转换器类</span></span><br><span class="line">    transfer = MinMaxScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.调用</span></span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_new:\n&quot;</span>,data_new)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">      milage     Liters  Consumtime</span></span><br><span class="line"><span class="string">0     40920   8.326976    0.953952</span></span><br><span class="line"><span class="string">1     14488   7.153469    1.673904</span></span><br><span class="line"><span class="string">2     26052   1.441871    0.805124</span></span><br><span class="line"><span class="string">3     75136  13.147394    0.428964</span></span><br><span class="line"><span class="string">4     38344   1.669788    0.134296</span></span><br><span class="line"><span class="string">..      ...        ...         ...</span></span><br><span class="line"><span class="string">995   11145   3.410627    0.631838</span></span><br><span class="line"><span class="string">996   68846   9.974715    0.669787</span></span><br><span class="line"><span class="string">997   26575  10.650102    0.866627</span></span><br><span class="line"><span class="string">998   48111   9.134528    0.728045</span></span><br><span class="line"><span class="string">999   43757   7.882601    1.332446</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[1000 rows x 3 columns]</span></span><br><span class="line"><span class="string">data_new:</span></span><br><span class="line"><span class="string"> [[0.44832535 0.39805139 0.56233353]</span></span><br><span class="line"><span class="string"> [0.15873259 0.34195467 0.98724416]</span></span><br><span class="line"><span class="string"> [0.28542943 0.06892523 0.47449629]</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> [0.29115949 0.50910294 0.51079493]</span></span><br><span class="line"><span class="string"> [0.52711097 0.43665451 0.4290048 ]</span></span><br><span class="line"><span class="string"> [0.47940793 0.3768091  0.78571804]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    minmax_demo()</span><br></pre></td></tr></table></figure><h5 id="4-缺陷"><a href="#4-缺陷" class="headerlink" title="4.缺陷"></a>4.缺陷</h5><p>异常值：最大值、最小值</p><h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><h5 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h5><blockquote><p>通过对原始数据进行变换把数据变换到均值为0，标准差为1范围内</p></blockquote><h5 id="2-公式-1"><a href="#2-公式-1" class="headerlink" title="2.公式"></a>2.公式</h5><script type="math/tex; mode=display">标准化        X' = (x - mean) / 标准差</script><blockquote><p>作用于每一列，mean为平均值</p><p>标准差: 集中程度</p></blockquote><h5 id="3-API-1"><a href="#3-API-1" class="headerlink" title="3.API"></a>3.API</h5><h6 id="3-1StandardScaler"><a href="#3-1StandardScaler" class="headerlink" title="3.1StandardScaler"></a>3.1StandardScaler</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stand_demo</span>():</span><br><span class="line">    <span class="comment"># 1. 获取数据</span></span><br><span class="line">    data = pd.read_csv(<span class="string">&quot;E:\Code\Pywork\Machine\data\dating.txt&quot;</span>)</span><br><span class="line">    <span class="comment"># 每一行都要只要前三列</span></span><br><span class="line">    data = data.iloc[:, :<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 实例化一个转换器类</span></span><br><span class="line">    transfer = StandardScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.调用</span></span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_new:\n&quot;</span>,data_new)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    data_new:</span></span><br><span class="line"><span class="string"> [[ 0.33193158  0.41660188  0.24523407]</span></span><br><span class="line"><span class="string"> [-0.87247784  0.13992897  1.69385734]</span></span><br><span class="line"><span class="string"> [-0.34554872 -1.20667094 -0.05422437]</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> [-0.32171752  0.96431572  0.06952649]</span></span><br><span class="line"><span class="string"> [ 0.65959911  0.60699509 -0.20931587]</span></span><br><span class="line"><span class="string"> [ 0.46120328  0.31183342  1.00680598]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stand_demo()</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>标准化更适合用于大数据</p><h2 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h2><ul><li>处理对象二维数组<ul><li>降低（随机变量）特征的个数<ul><li>得到一组不相关的主变量的过程</li></ul></li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">比如有一组数据相对湿度与降雨量之间的相关</span><br><span class="line">我们要将这两组数据之间搞成不不相关管，否则会导致数据冗余，计算量太大</span><br><span class="line">会对算法学习的预测影响较大</span><br></pre></td></tr></table></figure><h3 id="降维方式"><a href="#降维方式" class="headerlink" title="降维方式"></a>降维方式</h3><ul><li>特征选择</li><li>主成分分析（可以理解一种特征提取的方式）</li></ul><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><h5 id="Filter过滤式"><a href="#Filter过滤式" class="headerlink" title="Filter过滤式"></a>Filter过滤式</h5><ul><li>方差选择法：地方查特征过滤</li><li>相关系数<ul><li>衡量特征与特征之间的相关性</li></ul></li></ul><h5 id="Embeded嵌入式"><a href="#Embeded嵌入式" class="headerlink" title="Embeded嵌入式"></a>Embeded嵌入式</h5><ul><li>决策树</li><li>正则化</li><li>深度学习</li></ul><h3 id="过滤式"><a href="#过滤式" class="headerlink" title="过滤式"></a>过滤式</h3><h4 id="1-方差选择法"><a href="#1-方差选择法" class="headerlink" title="1.方差选择法"></a>1.方差选择法</h4><p>有小鸟🐦 判断它的品种，你不能看它是否有爪子，因为所有的鸟都有爪子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variance_demo</span>():</span><br><span class="line">    data = pd.read_csv(<span class="string">r&quot;E:\Code\Pywork\Machine\data\factor_returns.csv&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>,data)</span><br><span class="line">    data = data.iloc[:, <span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>,data)</span><br><span class="line">    <span class="comment"># 这里的threshold是阈值大于它的就会被删去</span></span><br><span class="line">    transfer = VarianceThreshold(threshold=<span class="number">5</span>)</span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_new:\n&quot;</span>, data_new, data_new.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">D:\Programming\anaconda3\python.exe E:/Code/Pywork/Machine/机器学习/特征工程/特征降维/Filter过滤式/低方差过滤/低方差过滤.py</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">             index  pe_ratio  pb_ratio  ...  total_expense        date    return</span></span><br><span class="line"><span class="string">0     000001.XSHE    5.9572    1.1818  ...   1.088254e+10  2012-01-31  0.027657</span></span><br><span class="line"><span class="string">1     000002.XSHE    7.0289    1.5880  ...   2.378348e+10  2012-01-31  0.082352</span></span><br><span class="line"><span class="string">2     000008.XSHE -262.7461    7.0003  ...   1.203008e+07  2012-01-31  0.099789</span></span><br><span class="line"><span class="string">3     000060.XSHE   16.4760    3.7146  ...   7.935543e+09  2012-01-31  0.121595</span></span><br><span class="line"><span class="string">4     000069.XSHE   12.5878    2.5616  ...   7.091398e+09  2012-01-31 -0.002681</span></span><br><span class="line"><span class="string"><span class="meta">... </span>          ...       ...       ...  ...            ...         ...       ...</span></span><br><span class="line"><span class="string">2313  601888.XSHG   25.0848    4.2323  ...   1.041419e+10  2012-11-30  0.060727</span></span><br><span class="line"><span class="string">2314  601901.XSHG   59.4849    1.6392  ...   1.089783e+09  2012-11-30  0.179148</span></span><br><span class="line"><span class="string">2315  601933.XSHG   39.5523    4.0052  ...   1.749295e+10  2012-11-30  0.137134</span></span><br><span class="line"><span class="string">2316  601958.XSHG   52.5408    2.4646  ...   6.009007e+09  2012-11-30  0.149167</span></span><br><span class="line"><span class="string">2317  601989.XSHG   14.2203    1.4103  ...   4.132842e+10  2012-11-30  0.183629</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[2318 rows x 12 columns]</span></span><br><span class="line"><span class="string">data:</span></span><br><span class="line"><span class="string">       pe_ratio  pb_ratio  ...       revenue  total_expense</span></span><br><span class="line"><span class="string">0       5.9572    1.1818  ...  2.070140e+10   1.088254e+10</span></span><br><span class="line"><span class="string">1       7.0289    1.5880  ...  2.930837e+10   2.378348e+10</span></span><br><span class="line"><span class="string">2    -262.7461    7.0003  ...  1.167983e+07   1.203008e+07</span></span><br><span class="line"><span class="string">3      16.4760    3.7146  ...  9.189387e+09   7.935543e+09</span></span><br><span class="line"><span class="string">4      12.5878    2.5616  ...  8.951453e+09   7.091398e+09</span></span><br><span class="line"><span class="string"><span class="meta">... </span>       ...       ...  ...           ...            ...</span></span><br><span class="line"><span class="string">2313   25.0848    4.2323  ...  1.148170e+10   1.041419e+10</span></span><br><span class="line"><span class="string">2314   59.4849    1.6392  ...  1.731713e+09   1.089783e+09</span></span><br><span class="line"><span class="string">2315   39.5523    4.0052  ...  1.789082e+10   1.749295e+10</span></span><br><span class="line"><span class="string">2316   52.5408    2.4646  ...  6.465392e+09   6.009007e+09</span></span><br><span class="line"><span class="string">2317   14.2203    1.4103  ...  4.509872e+10   4.132842e+10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[2318 rows x 9 columns]</span></span><br><span class="line"><span class="string">data_new:</span></span><br><span class="line"><span class="string"> [[ 5.95720000e+00  1.18180000e+00  8.52525509e+10 ...  1.21144486e+12</span></span><br><span class="line"><span class="string">   2.07014010e+10  1.08825400e+10]</span></span><br><span class="line"><span class="string"> [ 7.02890000e+00  1.58800000e+00  8.41133582e+10 ...  3.00252062e+11</span></span><br><span class="line"><span class="string">   2.93083692e+10  2.37834769e+10]</span></span><br><span class="line"><span class="string"> [-2.62746100e+02  7.00030000e+00  5.17045520e+08 ...  7.70517753e+08</span></span><br><span class="line"><span class="string">   1.16798290e+07  1.20300800e+07]</span></span><br><span class="line"><span class="string"> ...</span></span><br><span class="line"><span class="string"> [ 3.95523000e+01  4.00520000e+00  1.70243430e+10 ...  2.42081699e+10</span></span><br><span class="line"><span class="string">   1.78908166e+10  1.74929478e+10]</span></span><br><span class="line"><span class="string"> [ 5.25408000e+01  2.46460000e+00  3.28790988e+10 ...  3.88380258e+10</span></span><br><span class="line"><span class="string">   6.46539204e+09  6.00900728e+09]</span></span><br><span class="line"><span class="string"> [ 1.42203000e+01  1.41030000e+00  5.91108572e+10 ...  2.02066110e+11</span></span><br><span class="line"><span class="string">   4.50987171e+10  4.13284212e+10]] (2318, 8)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    variance_demo()</span><br></pre></td></tr></table></figure><h4 id="2-相关系数"><a href="#2-相关系数" class="headerlink" title="2.相关系数"></a>2.相关系数</h4><ul><li>皮尔逊相关系数<ul><li>反应变量之间相关关系密切程度的统计指标</li></ul></li></ul><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230604153425798.png" alt="image-20230604153425798"></p><p>看最终r的值</p><ul><li><blockquote><p>大于 0 正相关          小于 0 负相关</p></blockquote></li><li><blockquote><p>r = 1 完全相关          r = 0 毫无关系</p></blockquote></li><li><blockquote><p>0&lt;|r|&lt;1时，存在相关   r ~ 1线性关系密切  r ~ 0 相关变弱</p></blockquote></li><li><blockquote><p>一般分为三级 </p><p>|r| &lt; 0.4低相关</p><p>0.4&lt;|r|&lt;0.7显著相关</p><p>0.7&lt;=|r|&lt;=1高度相关</p></blockquote></li></ul><h4 id="3-API-2"><a href="#3-API-2" class="headerlink" title="3.API"></a>3.API</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsone</span><br></pre></td></tr></table></figure><h4 id="4-计算"><a href="#4-计算" class="headerlink" title="4.计算"></a>4.计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variance_demo</span>():</span><br><span class="line">    data = pd.read_csv(<span class="string">r&quot;E:\Code\Pywork\Machine\data\factor_returns.csv&quot;</span>)</span><br><span class="line">    data = data.iloc[:, <span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">    r = pearsonr(data[<span class="string">&#x27;pe_ratio&#x27;</span>],data[<span class="string">&#x27;pb_ratio&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相关系数:&quot;</span>,r)</span><br><span class="line"><span class="comment">#     相关系数: PearsonRResult(statistic=-0.004389322779936274, pvalue=0.8327205496564927)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    variance_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果特征与特征之间相关性很高</p><ol><li>选取其中一个</li><li>加权求和</li><li>主成分分析</li></ol><h3 id="主成分分析"><a href="#主成分分析" class="headerlink" title="主成分分析"></a>主成分分析</h3><p>多维转成二维能看出来是什么的</p><blockquote><p>做降维尽可能的保留原有的特征</p></blockquote><h5 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklean.decomposition.PCA(<span class="attribute">n_components</span>=None)</span><br></pre></td></tr></table></figure><ul><li>将数据降维</li><li>n_components:<ul><li>小数：保留百分之多少的信息</li><li>整数：减少到多少特征</li></ul></li></ul><h2 id="instacart降维案例"><a href="#instacart降维案例" class="headerlink" title="instacart降维案例"></a>instacart降维案例</h2><p>先了解几个概念</p><ul><li><p>联表(交叉表): <a href="http://www.zzvips.com/article/188950.html">http://www.zzvips.com/article/188950.html</a></p></li><li><p>透视表: </p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>数据透视表是一种对大量数据快速汇总分析的交互式动态表格，它能够帮助用户统计分析数据。简单来说，数据透视表也就是对原始表进行分组聚合，压缩数据信息，把不必要的信息从原始数据中剔除，而只将我们想看到的数据信息展示到我们面前！</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、获取数据</span></span><br><span class="line"><span class="comment"># 2、合并表</span></span><br><span class="line"><span class="comment"># 3、找到user_id和aisle之间的关系</span></span><br><span class="line"><span class="comment"># 4、PCA降维</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、获取数据</span></span><br><span class="line">products = pd.read_csv(<span class="string">r&quot;C:\Users\beihai\Desktop\competition\数据\instacart\products.csv&quot;</span>)</span><br><span class="line">order_products = pd.read_csv(<span class="string">r&quot;C:\Users\beihai\Desktop\competition\数据\instacart\order_products__prior.csv&quot;</span>)</span><br><span class="line">orders = pd.read_csv(<span class="string">r&quot;C:\Users\beihai\Desktop\competition\数据\instacart\orders.csv&quot;</span>)</span><br><span class="line">aisles = pd.read_csv(<span class="string">r&quot;C:\Users\beihai\Desktop\competition\数据\instacart\aisles.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、合并表</span></span><br><span class="line"><span class="comment"># order_products_prior.csv: 订单与商品信息</span></span><br><span class="line"><span class="comment"># 字段: order_idproduct_idadd_to_cart_orderreordered</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># products.csv: 商品信息</span></span><br><span class="line"><span class="comment"># 字段：product_idproduct_nameaisle_iddepartment_id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># orders.csv 用户的订单信息</span></span><br><span class="line"><span class="comment"># 字段: order_iduser_ideval_setorder_numberorder_doworder_hour_of_daydays_since_prior_order</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># aisles.csv: 商品所属具体物品类别</span></span><br><span class="line"><span class="comment"># 字段: aisle_idaisle</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并aisles和products</span></span><br><span class="line">table1 = pd.merge(aisles,products, on=[<span class="string">&quot;aisle_id&quot;</span>,<span class="string">&quot;aisle_id&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并table1和order_products</span></span><br><span class="line">table2 = pd.merge(table1, order_products, on=[<span class="string">&#x27;product_id&#x27;</span>,<span class="string">&#x27;product_id&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并table2和orders</span></span><br><span class="line">table3 = pd.merge(table2,orders, on=[<span class="string">&#x27;order_id&#x27;</span>,<span class="string">&#x27;order_id&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到user_id和aisle之间的关系</span></span><br><span class="line"><span class="comment"># 交叉表</span></span><br><span class="line">table = pd.crosstab(table3[<span class="string">&#x27;user_id&#x27;</span>],table3[<span class="string">&#x27;aisle&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据量太大先选取前10000条数据</span></span><br><span class="line">data = table[:<span class="number">10000</span>]</span><br><span class="line"><span class="comment"># 特征值太多需要降维</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PCA 降维</span></span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1)实例化一个转换器类</span></span><br><span class="line">transfer = PCA(n_components=<span class="number">0.95</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2)调用fit_transform</span></span><br><span class="line">data_new = transfer.fit_transform(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_new,data_new.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(array([[-2.36456828e+01,  2.30028678e+00, -2.71706275e+00, ...,</span></span><br><span class="line"><span class="string">          8.24685231e-01, -5.20365905e-01,  2.99847178e+00],</span></span><br><span class="line"><span class="string">        [ 6.95477119e+00,  3.54966052e+01,  2.52655545e+00, ...,</span></span><br><span class="line"><span class="string">         -1.15326520e+00, -1.37969318e+00, -1.07115466e-02],</span></span><br><span class="line"><span class="string">        [-7.47792843e+00,  2.83147785e+00, -1.07306519e+01, ...,</span></span><br><span class="line"><span class="string">         -3.55104796e-01,  3.85595697e-02,  1.92318882e+00],</span></span><br><span class="line"><span class="string">        ...,</span></span><br><span class="line"><span class="string">        [-2.86664024e+01, -1.26446961e+00, -1.14908062e+00, ...,</span></span><br><span class="line"><span class="string">          1.13859569e-03,  4.14189764e-01,  4.46163585e-01],</span></span><br><span class="line"><span class="string">        [-2.88378748e+01, -1.70490822e+00, -1.47059942e+00, ...,</span></span><br><span class="line"><span class="string">         -1.62743887e-01,  6.72795951e-01,  9.64403654e-02],</span></span><br><span class="line"><span class="string">        [ 2.10412407e+02, -3.51935647e+01,  1.33671987e+01, ...,</span></span><br><span class="line"><span class="string">          1.46544596e+01,  1.56764794e+01,  1.67432890e+01]]),</span></span><br><span class="line"><span class="string"> (10000, 42))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>第一节课总结：跟着黑马口说一遍</p><p><a href="https://www.bilibili.com/video/BV1nt411r7tj/?p=19&amp;spm_id_from=pageDriver&amp;vd_source=bed2588951fb9fd0821dd2ef0191e48b">https://www.bilibili.com/video/BV1nt411r7tj/?p=19&amp;spm_id_from=pageDriver&amp;vd_source=bed2588951fb9fd0821dd2ef0191e48b</a></p><h1 id="3-分类算法"><a href="#3-分类算法" class="headerlink" title="3.分类算法"></a>3.分类算法</h1><p>目标值: 类别 连续</p><p>1、sklearn：转换器和预估器</p><p>2、KNN算法</p><p>3、模型选择与调优</p><p>4、朴素贝叶斯算法</p><p>5、决策树</p><p>6、随机森林</p><h2 id="3-1sklearn转换器和预估器"><a href="#3-1sklearn转换器和预估器" class="headerlink" title="3.1sklearn转换器和预估器"></a>3.1sklearn转换器和预估器</h2><h3 id="3-1-1转换器"><a href="#3-1-1转换器" class="headerlink" title="3.1.1转换器"></a>3.1.1转换器</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">特征工程的-&gt;父类</span><br><span class="line">这里就是相当与之前我在做特征工程的使用用到的东西：</span><br><span class="line"><span class="number">1</span>.先实例化</span><br><span class="line"><span class="number">2</span>.调用<span class="built_in">fit_transform</span>()</span><br><span class="line"><span class="built_in">fit</span>()计算</span><br><span class="line"><span class="attribute">transform</span>()最终转换</span><br></pre></td></tr></table></figure><h3 id="3-1-2估计器（esimator）"><a href="#3-1-2估计器（esimator）" class="headerlink" title="3.1.2估计器（esimator）"></a>3.1.2估计器（esimator）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sklearn机器学习算法的实现</span><br><span class="line"><span class="number">1.</span>实例化一个esimator</span><br><span class="line"><span class="number">2.</span>esimator.fit(x_train,y_train) 计算</span><br><span class="line">-调用完毕，模型生成</span><br><span class="line"><span class="number">3.</span>模型评估</span><br><span class="line">(<span class="number">1</span>)对比真实值，测试值</span><br><span class="line">y_predict = esimator.predict(x_test)</span><br><span class="line">y_test == y.predict</span><br><span class="line">    (<span class="number">2</span>)计算准确率</span><br><span class="line">    accuracy = esimator.score(x_test,y_test)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230606161951864.png" alt="image-20230606161951864" style="zoom:67%;" /></p><p>可以看出来它们都被完整的封装，所以机器学习有一套固定的流程</p><h2 id="3-2-K-近邻算法"><a href="#3-2-K-近邻算法" class="headerlink" title="3.2 K-近邻算法"></a>3.2 K-近邻算法</h2><h3 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h3><p>根据邻居来判断类别</p><p>近朱者赤，近墨者黑</p><h3 id="3-2-1-KNN简述与距离度量"><a href="#3-2-1-KNN简述与距离度量" class="headerlink" title="3.2.1 KNN简述与距离度量"></a>3.2.1 KNN简述与距离度量</h3><p>KNN（K-Nearest Neighbors,K近临算法）， 机器学习中最简单的算法</p><p>​                                    <strong><em>”离谁进，就是谁“</em></strong></p><p>用人眼看就知道这个绿色三角形就是轿车</p><p>但是机器没眼，只能靠精密的计算所以这里就引出来了距离度量的算法</p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601195802325.png" alt="image-20230601195802325"></p><h4 id="3-2-1-1-距离度量"><a href="#3-2-1-1-距离度量" class="headerlink" title="3.2.1.1 距离度量"></a>3.2.1.1 距离度量</h4><script type="math/tex; mode=display">欧式距离(L2)=sqrt((x1-x2)^2 + (y1-y2)^2)</script><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601200248895.png" alt="image-20230601200248895"></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601200653325.png" alt="image-20230601200653325" style="zoom: 80%;" /></p><h5 id="1-欧式距离"><a href="#1-欧式距离" class="headerlink" title="1.欧式距离"></a>1.欧式距离</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空间之中 两点之间的直线距离</span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601200820970.png" alt="image-20230601200820970" style="zoom: 67%;" /></p><h5 id="2-曼哈顿距离"><a href="#2-曼哈顿距离" class="headerlink" title="2.曼哈顿距离"></a>2.曼哈顿距离</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就是我走路，不可能沿着直线走，所以我会拐着弯走</span><br><span class="line">这种方式就像在曼哈顿的街区里面去行走，最终到达目的地的距离</span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601201204108.png" alt="image-20230601201204108"></p><h5 id="欧式距离和曼哈顿距离的使用"><a href="#欧式距离和曼哈顿距离的使用" class="headerlink" title="欧式距离和曼哈顿距离的使用"></a>欧式距离和曼哈顿距离的使用</h5><ul><li><p>欧式距离都比较可以适用</p></li><li><p>曼哈顿距离</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">适用于：</span><br><span class="line">求解过程中使得离群点的影响更小</span><br><span class="line">维度极高的数据 <span class="comment">---&gt;   特征的数量</span></span><br><span class="line">更适合数据维度没有归一化/不平衡</span><br></pre></td></tr></table></figure></li></ul><h5 id="3-明氏距离"><a href="#3-明氏距离" class="headerlink" title="3.明氏距离"></a>3.明氏距离</h5><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601201711733.png" alt="image-20230601201711733"></p><h5 id="代码初体验"><a href="#代码初体验" class="headerlink" title="代码初体验"></a>代码初体验</h5><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601202516052.png" alt="image-20230601202516052"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集</span></span><br><span class="line">A = np.array([<span class="number">4.8</span>, <span class="number">2.2</span>])</span><br><span class="line">B = np.array([<span class="number">4.7</span>, <span class="number">2.1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 欧式距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_dist_L2</span>(<span class="params">A, B</span>):</span><br><span class="line">    distance_L2 = np.sqrt(np.<span class="built_in">sum</span>((A-B) ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> distance_L2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cal_dist_L2(A, B))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 曼哈顿距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manhattan_distance</span>(<span class="params">A, B</span>):</span><br><span class="line">    distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">        distance += <span class="built_in">abs</span>(A[i] - B[i])</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(manhattan_distance(A, B))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明氏距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">minkowski_distance</span>(<span class="params">A, B, p</span>):</span><br><span class="line">    distance = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line">        distance += np.sqrt(<span class="built_in">abs</span>(A[i] - B[i]) ** p) ** p</span><br><span class="line">    <span class="keyword">return</span> distance</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(minkowski_distance(A, B, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#0.1414213562373093</span></span><br><span class="line"><span class="comment">#0.19999999999999973</span></span><br><span class="line"><span class="comment">#0.01999999999999995</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看出来算法不同相差的结果很大</p><p>所以看那些比赛中的排名就是对数据的处理和算法的选择不同而导致得分相差</p><h4 id="3-2-2-KNN算法实现步骤"><a href="#3-2-2-KNN算法实现步骤" class="headerlink" title="3.2.2 KNN算法实现步骤"></a>3.2.2 KNN算法实现步骤</h4><h5 id="2-1-算法基本思路"><a href="#2-1-算法基本思路" class="headerlink" title="2.1 算法基本思路"></a>2.1 算法基本思路</h5><ol><li>计算距离</li><li>排序</li><li>取前K个样本 ——&gt; 超参数：K值，调参和优化</li></ol><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这玩意就是</span><br><span class="line"><span class="number">1.</span>首先我先用距离度量公式去计算每个样本空间中与样本之间的距离</span><br><span class="line"><span class="number">2.</span>其次我对这些距离进行排序，从小到大，然后取前<span class="built_in">K</span>个样本</span><br><span class="line"><span class="number">3.</span>然后我看这些里面有多少个🚚多少个🚗，然后计算占比</span><br><span class="line">  最终根据这个占比就可以得出谁的概率大</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">我就感觉这里有些不对劲  那如果我选的样本中🚗本来就少，那我取前<span class="built_in">K</span>个样本，肯定🚗占比就少了，所以合理选择这个<span class="built_in">K</span>有点说法，这算法有待提高</span><br></pre></td></tr></table></figure><p>这里对于优化超参数</p><p>通常就是取若干个超参数：K值  —-&gt;  取得若干个结果 ——&gt; 若干个评估</p><p>最后这个评估最优的就选这个K值作为超参数</p><h5 id="k值选取策略"><a href="#k值选取策略" class="headerlink" title="k值选取策略"></a>k值选取策略</h5><ul><li>奇数</li><li>k &lt; 一个值 通常是 20 </li></ul><h4 id="3-2-3-KNN算法的优缺点及改进"><a href="#3-2-3-KNN算法的优缺点及改进" class="headerlink" title="3.2.3 KNN算法的优缺点及改进"></a>3.2.3 KNN算法的优缺点及改进</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li><p>易于理解</p></li><li><p>不需要庞大的样本数量</p></li><li><p>对于异常值不敏感</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对离它近的敏感，太远的不鸟它</span><br></pre></td></tr></table></figure></li><li><p>是天然的多分类器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只需要关注距离它的几个</span><br></pre></td></tr></table></figure></li><li><p>不需要训练，求解参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有些鸡肋</span><br></pre></td></tr></table></figure></li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li><p>数据量大时计算量太大</p></li><li><p>不平衡样本处理能力差</p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230601212555814.png" alt="image-20230601212555814" style="zoom: 50%;" /></p></li><li><p>并不“学习”</p></li><li><p>速度慢、准确率低</p></li></ul><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><h5 id="加权平均KNN"><a href="#加权平均KNN" class="headerlink" title="加权平均KNN"></a>加权平均KNN</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正常情况下是只看投票结果</span><br><span class="line">加权，就是把所带的类型也算上通过一定的计算方法</span><br></pre></td></tr></table></figure><p>权重算法：</p><p>就是距离离得远的权重就低，距离离的近的权重就高</p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230602000608822.png" alt="image-20230602000608822"></p><h4 id="3-2-4-KNN机器学习应用"><a href="#3-2-4-KNN机器学习应用" class="headerlink" title="3.2.4 KNN机器学习应用"></a>3.2.4 KNN机器学习应用</h4><h5 id="3-2-4-1-徒手写"><a href="#3-2-4-1-徒手写" class="headerlink" title="3.2.4.1 徒手写"></a>3.2.4.1 徒手写</h5><p>麻烦，正常不会使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&quot;vehicle.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;length&#x27;</span>][data[<span class="string">&#x27;label&#x27;</span>]==<span class="string">&#x27;car&#x27;</span>],data[<span class="string">&#x27;width&#x27;</span>][data[<span class="string">&#x27;label&#x27;</span>]==<span class="string">&#x27;car&#x27;</span>],edgecolors=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.scatter(data[<span class="string">&#x27;length&#x27;</span>][data[<span class="string">&#x27;label&#x27;</span>]==<span class="string">&#x27;truck&#x27;</span>],data[<span class="string">&#x27;width&#x27;</span>][data[<span class="string">&#x27;label&#x27;</span>]==<span class="string">&#x27;truck&#x27;</span>],edgecolors=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">feature = np.array(data.iloc[:,<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">labels = data[<span class="string">&#x27;label&#x27;</span>].tolist()</span><br><span class="line"><span class="built_in">print</span>(feature)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"></span><br><span class="line">test=[<span class="number">4.7</span>, <span class="number">2.1</span>]</span><br><span class="line">numSamples = data.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 距离</span></span><br><span class="line">diff = np.tile(test, (numSamples, <span class="number">1</span>)) - feature</span><br><span class="line">squreDiff = diff ** <span class="number">2</span></span><br><span class="line">squreDiff = np.<span class="built_in">sum</span>(squreDiff, axis = <span class="number">1</span>)</span><br><span class="line">distance = squreDiff ** <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">sorteDisIndices = np.argsort(distance)</span><br><span class="line">k = <span class="number">9</span></span><br><span class="line">classCount = &#123;&#125;</span><br><span class="line">label_count = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    voteLabel = labels[sorteDisIndices[i]]</span><br><span class="line">    classCount[voteLabel] = classCount.get(voteLabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    label_count.append(voteLabel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">word_counts = Counter(label_count)</span><br><span class="line">top = word_counts.most_common(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&#x27;truck&#x27;, 5)]</span></span><br></pre></td></tr></table></figure><h5 id="3-2-4-2-Sklearn-Scikit-learn-框架"><a href="#3-2-4-2-Sklearn-Scikit-learn-框架" class="headerlink" title="3.2.4.2 Sklearn(Scikit-learn)框架"></a>3.2.4.2 Sklearn(Scikit-learn)框架</h5><h6 id="鸢尾花种类预测"><a href="#鸢尾花种类预测" class="headerlink" title="鸢尾花种类预测"></a>鸢尾花种类预测</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">获取数据</span></span><br><span class="line"><span class="string">数据集划分</span></span><br><span class="line"><span class="string">特征工程：</span></span><br><span class="line"><span class="string">        标准化     降维</span></span><br><span class="line"><span class="string">KNN预估器</span></span><br><span class="line"><span class="string">模型评估</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knn_iris</span>():</span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    iris = load_iris()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(iris.data,iris.target,random_state=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化对象</span></span><br><span class="line">    transfer = StandardScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#特征工程       无量纲化</span></span><br><span class="line">    x_train = transfer.fit_transform(x_train)</span><br><span class="line">    <span class="comment"># 只标准化 不计算</span></span><br><span class="line">    x_test = transfer.transform(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#实现算法                           K值设置</span></span><br><span class="line">    estimator = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 算法计算      训练集特征值  训练集目标值</span></span><br><span class="line">    estimator.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  KNN预估器                   训练集特征值</span></span><br><span class="line">    y_predict = estimator.predict(x_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y_predict:\n&quot;</span>, y_predict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接比对真实值和预测值:\n&quot;</span>, y_test == y_predict)</span><br><span class="line"></span><br><span class="line">    score = estimator.score(x_test, y_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确率为: \n&quot;</span>, score)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    knn_iris()</span><br></pre></td></tr></table></figure><h4 id="3-2-5-案例：预测facebook签到位置"><a href="#3-2-5-案例：预测facebook签到位置" class="headerlink" title="3.2.5 案例：预测facebook签到位置"></a>3.2.5 案例：预测facebook签到位置</h4><p>流程分析:</p><ol><li><p>获取数据</p></li><li><p>数据处理</p><p>目的：</p><p>​    特征值 x</p><p>​    目标值 y</p><p>​    a. 缩小数据范围</p><p>​        2 &lt; x &lt; 2.5</p><p>​        1.0 &lt; y &lt; 1.5</p><p>​    b.time  -&gt; 年月日时分秒</p><p>​    c.过滤签到次数少的地点</p></li><li><p>特征工程：标准化</p></li><li><p>KNN算法预估流程</p></li><li><p>模型选择与调优</p></li><li><p>模型评估</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-模型选择与调优"><a href="#3-3-模型选择与调优" class="headerlink" title="3.3 模型选择与调优"></a>3.3 模型选择与调优</h2><h3 id="3-3-1-交叉验证"><a href="#3-3-1-交叉验证" class="headerlink" title="3.3.1 交叉验证"></a>3.3.1 交叉验证</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">就是将训练集再分为 训练集和验证集，</span><br><span class="line">例如分为四份，分别测试训练，得到准确率，最终平均值作为最优的</span><br></pre></td></tr></table></figure><h3 id="3-3-2-超参数搜索-网格搜索-Grid-Search"><a href="#3-3-2-超参数搜索-网格搜索-Grid-Search" class="headerlink" title="3.3.2 超参数搜索-网格搜索(Grid Search)"></a>3.3.2 超参数搜索-网格搜索(Grid Search)</h3><h4 id="API-2"><a href="#API-2" class="headerlink" title="API"></a>API</h4><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230607100157679.png" alt="image-20230607100157679" style="zoom:67%;" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">获取数据</span></span><br><span class="line"><span class="string">数据集划分</span></span><br><span class="line"><span class="string">特征工程：</span></span><br><span class="line"><span class="string">        标准化     降维</span></span><br><span class="line"><span class="string">KNN预估器</span></span><br><span class="line"><span class="string">模型评估</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knn_iris</span>():</span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    iris = load_iris()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化对象</span></span><br><span class="line">    transfer = StandardScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 特征工程       无量纲化</span></span><br><span class="line">    x_train = transfer.fit_transform(x_train)</span><br><span class="line">    <span class="comment"># 只标准化 不计算</span></span><br><span class="line">    x_test = transfer.transform(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现算法                           K值设置</span></span><br><span class="line">    estimator = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 算法计算      训练集特征值  训练集目标值</span></span><br><span class="line">    estimator.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  KNN预估器                   测试集特征值</span></span><br><span class="line">    y_predict = estimator.predict(x_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y_predict:\n&quot;</span>, y_predict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接比对真实值和预测值:\n&quot;</span>, y_test == y_predict)</span><br><span class="line"></span><br><span class="line">    score = estimator.score(x_test, y_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确率为: \n&quot;</span>, score)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knn_iris_gscv</span>():</span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    iris = load_iris()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 划分数据集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例化对象</span></span><br><span class="line">    transfer = StandardScaler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 特征工程       无量纲化</span></span><br><span class="line">    x_train = transfer.fit_transform(x_train)</span><br><span class="line">    <span class="comment"># 只标准化 不计算</span></span><br><span class="line">    x_test = transfer.transform(x_test)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实现算法</span></span><br><span class="line">    estimator = KNeighborsClassifier()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 网格搜索</span></span><br><span class="line">    param_dict = &#123;<span class="string">&quot;n_neighbors&quot;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>]&#125;</span><br><span class="line">    estimator = GridSearchCV(estimator, param_grid=param_dict, cv=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 算法计算      训练集特征值  训练集目标值</span></span><br><span class="line">    estimator.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  KNN预估器                   测试集特征值</span></span><br><span class="line">    y_predict = estimator.predict(x_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;y_predict:\n&quot;</span>, y_predict)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;直接比对真实值和预测值:\n&quot;</span>, y_test == y_predict)</span><br><span class="line"></span><br><span class="line">    score = estimator.score(x_test, y_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准确率为: \n&quot;</span>, score)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最佳参数:\n&quot;</span>, estimator.best_params_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最佳结果:\n&quot;</span>, estimator.best_score_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最佳估计器:\n&quot;</span>, estimator.best_estimator_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;交叉验证结果:\n&quot;</span>, estimator.cv_results_)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># knn_iris()</span></span><br><span class="line">    knn_iris_gscv()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-朴素贝叶斯"><a href="#3-4-朴素贝叶斯" class="headerlink" title="3.4 朴素贝叶斯"></a>3.4 朴素贝叶斯</h2><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230607145322451.png" alt="image-20230607145322451"></p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230611085809644.png" alt="image-20230611085809644"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金砖国家机器学习比赛</title>
      <link href="/posts/fc93a568.html"/>
      <url>/posts/fc93a568.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习与大数据赛项"><a href="#机器学习与大数据赛项" class="headerlink" title="机器学习与大数据赛项"></a>机器学习与大数据赛项</h1><p>竞赛环境：</p><div class="table-container"><table><thead><tr><th>名称</th><th>技术规格</th></tr></thead><tbody><tr><td>Hadoop</td><td>3.3.x</td></tr><tr><td>Sqoop</td><td>1.4.x</td></tr><tr><td>Hive</td><td>2.3.x</td></tr><tr><td>Zookeeper</td><td>3.6.x</td></tr><tr><td>Flume</td><td>1.10.x</td></tr><tr><td>Spark</td><td>3.3.x</td></tr><tr><td>Flink</td><td>1.15.x</td></tr><tr><td>JDK</td><td>11</td></tr><tr><td>Scala</td><td>2.13.x</td></tr><tr><td>Python</td><td>3.7.x</td></tr></tbody></table></div><p>比赛内容:</p><blockquote><p>Hadoop 平台搭建、HDFS 数据存储、Flume 数据采集、Sqoop 数据导入、MapReduce 批处理操作、Hive 数据查询、大数据 可视化、数据整合、数据读取、数据探查、数据处理、数据 建模、模型评价。</p></blockquote><h1 id="模块A：大数据运维与应用-30分"><a href="#模块A：大数据运维与应用-30分" class="headerlink" title="模块A：大数据运维与应用(30分)"></a>模块A：大数据运维与应用(30分)</h1><blockquote><p>三天把完全分布式自己搭建了一遍，中间mysql的安装是搞了好久，hive启动失败，多半是mysql有错误，mysql那里还是要多看看。剩下的时间就是背加练了，没什么好说的</p></blockquote><h2 id="Hadoop基础环境搭建"><a href="#Hadoop基础环境搭建" class="headerlink" title="Hadoop基础环境搭建"></a>Hadoop基础环境搭建</h2><p>参考链接: <a href="https://blog.csdn.net/qq_44715376/article/details/130843233?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22130843233%22%2C%22source%22%3A%22qq_44715376%22%7D&amp;fromshare=blogdetail">https://blog.csdn.net/qq_44715376/article/details/130843233?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22130843233%22%2C%22source%22%3A%22qq_44715376%22%7D&amp;fromshare=blogdetail</a></p><p>1、安装虚拟机和Linux操作系统，配置IP地址、主机名、防火墙、地址映射等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">网卡</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">/ect/hosts        配置主机名和IP地址的对应，对本机提供解析</span><br><span class="line">/etc/resolv.conf      配置域名（在hosts内解析不到时此域名生效）</span><br><span class="line">/etc/sysconfig/network      配置主机名和网关</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-eth0 配置IP、Mask等网络参数</span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230704224936122.png" alt="image-20230704224936122"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重启网卡</span><br><span class="line">systemctl restart netword</span><br><span class="line"></span><br><span class="line">查看网卡</span><br><span class="line">ip addr 或 ifconfig</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">主机名 ：/etc/hostname</span><br><span class="line">master</span><br><span class="line">映射：/etc/hosts</span><br><span class="line">192.168.43.10 master</span><br><span class="line">192.168.43.20 node01</span><br><span class="line">192.168.43.30 node02</span><br><span class="line">关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">关闭Linunx安全子系统</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br><span class="line">重启系统</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>2、安装 JDK 与 Hadoop</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">上传安装包</span><br><span class="line">解压</span><br><span class="line">tar -zxvf jdk-8u261-linux-x64.tar.gz -C /opt/softwore/</span><br><span class="line">tar -zxvf hadoop-2.7.7\ .tar.gz -C /opt/softwore</span><br><span class="line"></span><br><span class="line">修改配置文件</span><br><span class="line">vim + /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/usr/local/src/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/usr/local/src/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line">export HDFS_NAMENODE_USER=root</span><br><span class="line">export HDFS_DATANODE_USER=root</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">export YARN_NODEMANAGER_USER=root</span><br><span class="line"></span><br><span class="line">重新加载配置文件，使配置生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>3、完全分布式部署（HDFS)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置文件路径：/usr/local/src/hadoop/etc/hadoop</span><br><span class="line">HDFS</span><br><span class="line">修改 hadoop-env.sh 设置 Hadoop 环境对应的 JDK</span><br><span class="line">export JAVA_HOME=/usr/local/src/jdk</span><br><span class="line"></span><br><span class="line">配置 MapReduce 与 YARN</span><br><span class="line">修改 yarn-env.sh、mapred-env.sh 添加 JAVA_HOME 配置</span><br><span class="line">export JAVA_HOME=/usr/local/src/jdk</span><br></pre></td></tr></table></figure><ul><li><p>修改 core-site.xml 配置文件，可以使用 NotePad++ 进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--NameNode的访问URI，也可以写为IP，8020为默认端口--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.201.10:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--临时数据目录，用来存放数据，格式化时会自动生成--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/src/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 hdfs-site.xml 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--Block的副本数，伪分布式要改为1--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--NameNode 元数据存放地址--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/src/hadoop/data/namenode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--DataNode 副本存放地址--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/src/hadoop/data/datanode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--HDFS 临时存放地址--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/src/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置有secondarynamenode的主机--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mapred-site.xml ，把 mapred-sit.xml.template 复制一份，修改为 mapred-site.xml yarn-site.xml 添加相应 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mapred-site.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!---计算框架的运行平台配置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--yarn-site.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!---YARN 的节点辅助服务配置 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--默认是0.0.0.0 本地访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在 slaves 配置文件中 添加 主机名，它指定了 DataNode 和 NodeManager所在的机器。(注意这里有可能自带workers需要修改workers)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">node01</span><br><span class="line">node02</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关机</span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure></li><li><p>克隆</p></li><li><p>分发</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /usr/local/hadoop-3.3.1 root@slave03:/usr/local</span><br></pre></td></tr></table></figure></li></ul><p>4、SSH免密登录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先在每一台节点生成公钥和私钥</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">把每一个节点上的公钥文件发送到所有节点（包括自己），注意：每一条命令都需要在3个节点中执行</span><br><span class="line">ssh-copy-id master</span><br><span class="line">ssh-copy-id node01</span><br><span class="line">ssh-copy-id node02</span><br></pre></td></tr></table></figure><p>5、格式化HDFS</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#master</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>6、启动服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh /start-yarn.sh</span><br><span class="line"></span><br><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>7、查看进程</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line"></span><br><span class="line">#master</span><br><span class="line">[root@master hadoop]# jps</span><br><span class="line">6002 SecondaryNameNode</span><br><span class="line">6435 NodeManager</span><br><span class="line">6280 ResourceManager</span><br><span class="line">5594 NameNode</span><br><span class="line">7835 Jps</span><br><span class="line">5775 DataNode</span><br><span class="line"></span><br><span class="line">#node01</span><br><span class="line">[root@node01 hadoop]# jps</span><br><span class="line">2131 DataNode</span><br><span class="line">2532 Jps</span><br><span class="line">2271 NodeManager</span><br><span class="line"></span><br><span class="line">#node02</span><br><span class="line">[root@node02 hadoop]# jps</span><br><span class="line">2145 NodeManager</span><br><span class="line">2405 Jps</span><br><span class="line">2023 DataNode</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Hadoop常用端口说明：</span><br><span class="line">hadoop2.x</span><br><span class="line">HDFS Namenode内部通常端口:8020/9000</span><br><span class="line">HDFS Namenode对用户的查询端口:50070</span><br><span class="line">Yarn查看任务运行情况的:8088</span><br><span class="line">历史服务器:19888</span><br><span class="line"></span><br><span class="line">hadoop3.x</span><br><span class="line">HDFS Namenode内部通常端口:8020/9000/9820</span><br><span class="line">HDFS Namenode对用户的査询端口:9870</span><br><span class="line">Yarn查看任务运行情况的:8088</span><br><span class="line">历史服务器:19888</span><br></pre></td></tr></table></figure><h2 id="MySQL离线安装"><a href="#MySQL离线安装" class="headerlink" title="MySQL离线安装"></a>MySQL离线安装</h2><p>安装包<code>mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz</code> 拷贝到 离线生产环境<code>/usr/local</code>目录下。 </p><p>==<strong>1、创建用户</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加mysql用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加mysql用户</span></span><br><span class="line">useradd -g mysql mysql -d /home/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改mysql用户的登陆密码</span></span><br><span class="line">passwd mysql</span><br></pre></td></tr></table></figure><p><strong>==2、解压缩==</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line"></span><br><span class="line">tar -xzvf mysql-<span class="number">5.7</span><span class="number">.13</span>-linux-glibc2<span class="number">.5</span>-x86_64 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名为mysql</span></span><br><span class="line">mv mysql-<span class="number">5.7</span><span class="number">.13</span>-linux-glibc2<span class="number">.5</span>-x86_64 mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#赋予用户读写权限</span></span><br><span class="line">chown -R mysql:mysql mysql/</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 删除maridb</span></span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line">yum remove mariadb*</span><br></pre></td></tr></table></figure><p><strong>==3、创建配置文件==</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#内容</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line">basedir=/usr/local/src/mysql</span><br><span class="line">datadir=/usr/local/src/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"><span class="comment">#不区分大小写</span></span><br><span class="line">lower_case_table_names = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line">max_connections=<span class="number">5000</span></span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line"></span><br><span class="line">default-time_zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==<strong>初始化文件</strong>==</p><p>1、初始化log文件，防止没有权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动编辑一下日志文件，什么也不用写，直接保存退出</span></span><br><span class="line">cd /var/log/</span><br><span class="line"></span><br><span class="line">vim mysqld.log</span><br><span class="line">：wq</span><br><span class="line"></span><br><span class="line">chmod <span class="number">777</span> mysqld.log</span><br><span class="line">chown mysql:mysql mysqld.log</span><br></pre></td></tr></table></figure><p>2、初始化pid文件，防止没有权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动编辑一下日志文件，什么也不用写，直接保存退出</span></span><br><span class="line">cd /var/run/<span class="comment">#run的文件保存在内存中，重启会删除</span></span><br><span class="line">mkdir mysqld</span><br><span class="line">cd mysqld</span><br><span class="line">vi mysqld.pid</span><br><span class="line">：wq</span><br><span class="line"><span class="comment"># 给权限</span></span><br><span class="line">cd ..</span><br><span class="line">chmod <span class="number">777</span> mysqld</span><br><span class="line">chown -R mysql:mysql mysqld</span><br></pre></td></tr></table></figure><p>创建/opt/module/mysql/data</p><p>3、初始化数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化数据库，并指定启动mysql的用户，否则就会在启动MySQL时出现权限不足的问题</span></span><br><span class="line">/usr/local/src/mysql/<span class="built_in">bin</span>/mysqld --initialize --user=mysql --basedir=/usr/local/src/mysql --datadir=/usr/local/src/mysql/data --lc_messages_dir=/usr/local/src/mysql/share --lc_messages=en_US</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看root的随机密码</span></span><br><span class="line">cat /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#root@local: XXXXX   XXXXX就是初始密码</span></span><br></pre></td></tr></table></figure><p>bash_profile 在 ~ /中</p><p>==<strong>启动数据库</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#源目录启动：</span></span><br><span class="line">/usr/local/src/mysql/support-files/mysql.server start</span><br></pre></td></tr></table></figure><p>设置开机自动启动服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制启动脚本到资源目录</span></span><br><span class="line">cp /usr/local/src/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加mysqld服务控制脚本执行权限</span></span><br><span class="line">chmod +x /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将mysqld服务加入到系统服务</span></span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查mysqld服务是否已经生效</span></span><br><span class="line">chkconfig --<span class="built_in">list</span> mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换至mysql用户，启动mysql，或者稍后下一步再启动。</span></span><br><span class="line">su mysql</span><br><span class="line"></span><br><span class="line">service mysqld start </span><br></pre></td></tr></table></figure><p>==<strong>配置环境变量</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换至mysql用户</span></span><br><span class="line">su mysql</span><br><span class="line"></span><br><span class="line">vi .bash_profile</span><br><span class="line"><span class="comment"># 修改配置文件，增加export PATH=$PATH:/usr/local/src/mysql/bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即生效</span></span><br><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>==<strong>登录，修改密码</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统默认会查找/usr/bin下的命令;建立一个链接文件。</span></span><br><span class="line">ln -s /usr/local/usr/mysql/<span class="built_in">bin</span>/mysql /usr/<span class="built_in">bin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆mysql的root用户</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入2.4生成的 随机密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改root用户密码为123456</span></span><br><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> root@localhost=password(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#给权限,使用户可以远程登录</span></span><br><span class="line">mysql&gt;grant <span class="built_in">all</span> privileges on *.* to <span class="string">&#x27;新用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a>Hive安装</h2><p>1）解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/softwares/apache-hive-3.1.2-bin.tar.gz  -C /opt/module</span><br></pre></td></tr></table></figure><p>2）配环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export HIVE_HOME=/opt/module/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line">export HADOOP_CLASSPATH=&#x27;hadoop classpath&#x27;</span><br></pre></td></tr></table></figure><p>3）修改配置文件</p><p>hive-env.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8</span><br><span class="line">export HIVE_HOME=/opt/module/hive</span><br><span class="line">export HADOOP_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line">export HIVE_CONF_DIR=/opt/module/hive/conf</span><br></pre></td></tr></table></figure><p>hive-site.xml（可去hive/hcatalog/etc/hcatalog/目录下把proto-hive-site.xml复制到conf目录下并改名为hive-site.xml，删除第一个property之间的和除这四个以外的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">           &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">           &lt;value&gt;jdbc:mysql://master:3306/hive_db?createDatabaseIfNotExist=true&amp;amp;useSSL=false&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">           &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">           &lt;value&gt;root(名字看题目要求)&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">           &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">           &lt;value&gt;000000(密码看题目要求)&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">           &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">           &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;!--cli 显示表头和列名--&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.cli.print.header&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;hive.cli.print.current.db&lt;/name&gt;</span><br><span class="line">&lt;value&gt;true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><p>4）拷贝jar包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.37-bin.jar  /opt/module/hive/lib</span><br><span class="line">rm -rf /opt/module/hive/lib/guave-19.0.jar</span><br><span class="line">cp /opt/module/hadoop-3.1.3/share/hadoop/commond/lib/guava-27.0-jre.jar /opt/module/hive/lib</span><br></pre></td></tr></table></figure><p>5）初始化</p><p>在src下    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure><p>6）查看</p><p>输入hive，出现hive&gt;</p><p>7）退出 exit；</p><ul><li><p>登录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li><p>更改密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;root&#x27;;</span><br><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27;=&#x27;123456&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>开启远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;root&#x27; with grant option;</span><br><span class="line"></span><br><span class="line">刷新</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><p>3、配置hive</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">配置 conf/hive-env.sh文件中的 HADOOP_HOME</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop/</span><br></pre></td></tr></table></figure><p>4.导入jar包 和 移除jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将 mysql-connector-java-5.1.47.jar 添加到hive lib 下</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/hive/lib/</span><br><span class="line">/usr/local/hadoop/share/hadoop/common/lib/</span><br><span class="line">删除低版本的jar包，将高版本的jar包复制到原来低版本的位置即可</span><br></pre></td></tr></table></figure><p>5.修改hive-site.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--需要登录MySQL数据库，创建一个 hive 数据库备用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://mater:3306/hive?</span><br><span class="line">createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--安装MySQL数据库的驱动类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--安装MySQL数据库的名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--安装MySQL数据库的密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hive使用"><a href="#Hive使用" class="headerlink" title="Hive使用"></a>Hive使用</h2><p>==1、<strong>外部表</strong>==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">  cust_id STRING,</span><br><span class="line">  fname STRING,</span><br><span class="line">  lname STRING,</span><br><span class="line">  email STRING,</span><br><span class="line">  level STRING,</span><br><span class="line">  phone MAP<span class="operator">&lt;</span>STRING, STRING<span class="operator">&gt;</span>,</span><br><span class="line">  order_ids <span class="keyword">ARRAY</span><span class="operator">&lt;</span>STRING<span class="operator">&gt;</span>,</span><br><span class="line">  order_value STRUCT<span class="operator">&lt;</span>min: STRING, max: STRING, avg: STRING, total: STRING<span class="operator">&gt;</span></span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;|&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span></span><br><span class="line">location <span class="string">&#x27;/yyh&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line"> cust_id STRING,</span><br><span class="line"> fname STRING,</span><br><span class="line"> lname STRING,</span><br><span class="line"> email STRING,</span><br><span class="line"> level STRING,</span><br><span class="line"> phone MAP<span class="operator">&lt;</span>STRING, STRING<span class="operator">&gt;</span>,</span><br><span class="line"> order_ids <span class="keyword">ARRAY</span><span class="operator">&lt;</span>STRING<span class="operator">&gt;</span>,</span><br><span class="line"> order_value STRUCT<span class="operator">&lt;</span>min: <span class="keyword">DOUBLE</span>, max: <span class="keyword">DOUBLE</span>, avg: <span class="keyword">DOUBLE</span>, total: <span class="keyword">DOUBLE</span><span class="operator">&gt;</span>)</span><br><span class="line"><span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;|&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span></span><br><span class="line">location <span class="string">&#x27;/yyh&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> t5 (</span><br><span class="line"> cust_id STRING,</span><br><span class="line"> fname STRING,</span><br><span class="line"> lname STRING,</span><br><span class="line"> email STRING,</span><br><span class="line"> level STRING,</span><br><span class="line"> phone MAP<span class="operator">&lt;</span>STRING, STRING<span class="operator">&gt;</span>,</span><br><span class="line"> order_ids <span class="keyword">ARRAY</span><span class="operator">&lt;</span>STRING<span class="operator">&gt;</span>,</span><br><span class="line"> order_value STRUCT<span class="operator">&lt;</span>min: <span class="keyword">DOUBLE</span>, max: <span class="keyword">DOUBLE</span>, avg: <span class="keyword">DOUBLE</span>, total: <span class="keyword">DOUBLE</span><span class="operator">&gt;</span>)</span><br><span class="line"><span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;|&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">location <span class="string">&#x27;/yyh&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对上步任务创建的新表loyalty_program实现以下要求的简单查询：</span></span><br><span class="line"><span class="comment">-- 运行查询以选择客户ID1200866的HOME电话号码。并记录结果到 master 节点上 ec2-user 用户下的~/results/task4-2.txt文件中。（1分）</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">LOCAL</span> DIRECTORY <span class="string">&#x27;/home/ec2-user/results&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED</span><br><span class="line">FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> phone[<span class="string">&#x27;HOME&#x27;</span>] <span class="keyword">FROM</span> loyalty_program <span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1200866&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询客户ID1200866的HOME电话号码</span></span><br><span class="line"><span class="keyword">SELECT</span> phone[<span class="string">&#x27;HOME&#x27;</span>] <span class="keyword">FROM</span> loyalty_program <span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1200866&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从order_ids数组中为客户ID1200866选择第三个元素</span></span><br><span class="line"><span class="keyword">SELECT</span> order_ids[<span class="number">2</span>] <span class="keyword">FROM</span> loyalty_program <span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1200866&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从order_value结构中为客户ID1200866选择total属性</span></span><br><span class="line"><span class="keyword">SELECT</span> order_value.total <span class="keyword">FROM</span> loyalty_program <span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="string">&#x27;1200866&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==<strong>分析数值产品评分</strong>==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 客户评价和反馈是客户和像 Dualcore 的零售商的重要信息来源。我们希望找到客户最喜欢的产品，但必须防止评级很少的产品误导。</span></span><br><span class="line"><span class="comment">-- 探查 Hive 中的ratings表中数据，查询所有具有至少50个评级的产品中评分平均值最高的产品？并记录prod_id(产品ID)结果到 master -- 节点上 ec2-user 用户下的~/results/task4-3.txt文件中。（2分）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> prod_id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> prod_id, <span class="built_in">AVG</span>(rating) <span class="keyword">AS</span> avg_rating, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> rating_count</span><br><span class="line">  <span class="keyword">FROM</span> ratings</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> prod_id</span><br><span class="line">  <span class="keyword">HAVING</span> rating_count <span class="operator">&gt;=</span> <span class="number">50</span></span><br><span class="line">) t</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_rating <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Sqoop安装与使用"><a href="#Sqoop安装与使用" class="headerlink" title="Sqoop安装与使用"></a>Sqoop安装与使用</h2><p>==1、<strong>上传安装包、解压</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz</span><br><span class="line"></span><br><span class="line">mv sqoop-1.4.7.bin__hadoop-2.6.0 sqoop</span><br></pre></td></tr></table></figure><p>==2、<strong>拷贝jar包，MySQL，hive</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql-connector-java-5.1.46.jar hive-exec-2.3.3.jar /opt/softwore/sqoop/lib</span><br></pre></td></tr></table></figure><p>==3、<strong>配置环境变量</strong>==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="operator">/</span>etc<span class="operator">/</span>profile</span><br><span class="line">## SQOOP_HOME</span><br><span class="line">export SQOOP_HOME<span class="operator">=</span><span class="operator">/</span>opt<span class="operator">/</span>softwore<span class="operator">/</span>sqoop</span><br><span class="line">export PATH<span class="operator">=</span>$PATH:$SQOOP_HOME<span class="operator">/</span>bin</span><br><span class="line">source <span class="operator">/</span>etc<span class="operator">/</span>profile</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==4、<strong>修改配置 文件</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp sqoop-env-template.sh sqoop-env.sh</span><br><span class="line"></span><br><span class="line">修改以下内容</span><br><span class="line">export HADOOP_COMMON_HOME=/opt/softwore/hadoop</span><br><span class="line">export HADOOP_MAPRED_HOME=/opt/softwore/hadoop</span><br><span class="line">export HIVE_HOME=/opt/softwore/hive</span><br></pre></td></tr></table></figure><p>==5、<strong>测试环境</strong>==</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop <span class="built_in">version</span></span><br></pre></td></tr></table></figure><p>==6、<strong>列出数据库</strong>==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqoop list<span class="operator">-</span>databases \</span><br><span class="line"><span class="comment">--connect jdbc:mysql://master:3306/ \</span></span><br><span class="line"><span class="comment">--username root --password 123456</span></span><br></pre></td></tr></table></figure><p>==7、<strong>查询SQL</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqoop eval \</span><br><span class="line">--connect jdbc:mysql://master:3306/yyh \</span><br><span class="line">--username root --password 123456 \</span><br><span class="line">--query &#x27;select count(distinct(name)) from t1&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">~/results/task3-1.txt</span></span><br></pre></td></tr></table></figure><p>==8、<strong>sqoop导入</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MYSQL导入到HDFS</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://master:3306/yyh \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table t1 \</span><br><span class="line">--fields-terminated-by &#x27;,&#x27; \</span><br><span class="line">--lines-terminated-by &#x27;\n&#x27; \</span><br><span class="line">--target-dir &#x27;/sqoop/t1&#x27; \</span><br><span class="line">-m 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MYSQL导入到Hive</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect jdbc:mysql://master:3306/yyh \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table t1 \</span><br><span class="line">--fields-terminated-by &#x27;,&#x27; \</span><br><span class="line">--lines-terminated-by &#x27;\n&#x27; \</span><br><span class="line">--target-dir &#x27;/sqoop/t111&#x27; \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-table &#x27;yyh.t111&#x27; \</span><br><span class="line">-m 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==9、<strong>sqoop导出</strong>==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HDFS导出到MYSQL</span></span><br><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql://master:3306/yyh \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table t1 \</span><br><span class="line">--export-dir &#x27;/sqoop/t1/*&#x27; \</span><br><span class="line">--fields-terminated-by &#x27;,&#x27; \</span><br><span class="line">--lines-terminated-by &#x27;\n&#x27; \</span><br><span class="line">-m 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Hive导出到MYSQL</span></span><br><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql://master:3306/yyh \</span><br><span class="line">--username root \</span><br><span class="line">--password 123456 \</span><br><span class="line">--table t111 \</span><br><span class="line">--export-dir &#x27;/user/hive/warehouse/yyh.db/t11/*&#x27; \</span><br><span class="line">-m 1</span><br></pre></td></tr></table></figure><p>==<strong>报错</strong>==</p><ul><li>mapreduce启动失败</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master txt]# hadoop classpath</span><br><span class="line">/opt/softwore/hadoop/etc/hadoop:/opt/softwore/hadoop/share/hadoop/common/lib/*:/opt/softwore/hadoop/share/hadoop/common/*:/opt/softwore/hadoop/share/hadoop/hdfs:/opt/softwore/hadoop/share/hadoop/hdfs/lib/*:/opt/softwore/hadoop/share/hadoop/hdfs/*:/opt/softwore/hadoop/share/hadoop/mapreduce/*:/opt/softwore/hadoop/share/hadoop/yarn:/opt/softwore/hadoop/share/hadoop/yarn/lib/*:/opt/softwore/hadoop/share/hadoop/yarn/*</span><br></pre></td></tr></table></figure><p>修改yarn-site.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/softwore/hadoop/etc/hadoop:/opt/softwore/hadoop/share/hadoop/common/lib/*:/opt/softwore/hadoop/share/hadoop/common/*:/opt/softwore/hadoop/share/hadoop/hdfs:/opt/softwore/hadoop/share/hadoop/hdfs/lib/*:/opt/softwore/hadoop/share/hadoop/hdfs/*:/opt/softwore/hadoop/share/hadoop/mapreduce/*:/opt/softwore/hadoop/share/hadoop/yarn:/opt/softwore/hadoop/share/hadoop/yarn/lib/*:/opt/softwore/hadoop/share/hadoop/yarn/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spark安装"><a href="#Spark安装" class="headerlink" title="Spark安装"></a>Spark安装</h2><p>安装和启动 Spark 组件包括以下步骤：</p><ol><li>解压 Spark 安装包： 在 master 节点上执行以下命令解压 Spark 安装包：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ~/hadoop搭建相关安装包/spark-2.4.6-bin-hadoop2.7.tgz</span><br></pre></td></tr></table></figure><ol><li>配置 Spark 环境变量： 编辑 <code>~/.bashrc</code> 文件，并添加以下环境变量配置：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_HOME=/path/to/spark-2.4.6-bin-hadoop2.7</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin</span><br></pre></td></tr></table></figure><p>然后运行以下命令使环境变量生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li>配置 Spark 主节点： 在 Spark 安装目录中的 <code>conf</code> 文件夹中，复制 <code>spark-env.sh.template</code> 并将其重命名为 <code>spark-env.sh</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/spark-2.4.6-bin-hadoop2.7/conf</span><br><span class="line">cp spark-env.sh.template spark-env.sh</span><br></pre></td></tr></table></figure><p>编辑 <code>spark-env.sh</code> 文件，添加以下内容来配置 Spark 主节点（master）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export SPARK_MASTER_HOST=master_node_hostname</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line">export SPARK_MASTER_WEBUI_PORT=8080</span><br></pre></td></tr></table></figure><p>将 <code>master_node_hostname</code> 替换为 master 节点的主机名或 IP 地址。</p><ol><li>配置 Spark 工作节点： 在 Spark 安装目录中的 <code>conf</code> 文件夹中，复制 <code>slaves.template</code> 并将其重命名为 <code>slaves</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/spark-2.4.6-bin-hadoop2.7/conf</span><br><span class="line">cp slaves.template slaves</span><br></pre></td></tr></table></figure><p>编辑 <code>slaves</code> 文件，添加以下内容来配置 Spark 工作节点（worker）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><p>将 <code>node1</code> 和 <code>node2</code> 替换为实际的工作节点主机名或 IP 地址。</p><ol><li>启动 Spark 主节点和工作节点： 在 master 节点上执行以下命令启动 Spark 主节点（Master）：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/spark-2.4.6-bin-hadoop2.7/sbin/start-master.sh</span><br></pre></td></tr></table></figure><p>然后，在每个工作节点（node1 和 node2）上执行以下命令启动 Spark 工作节点（Worker）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/to/spark-2.4.6-bin-hadoop2.7/sbin/start-slave.sh spark://master_node_hostname:7077</span><br></pre></td></tr></table></figure><p>将 <code>master_node_hostname</code> 替换为实际的 master 节点主机名或 IP 地址。</p><ol><li>验证 Spark 启动： 在浏览器中访问 Spark 主节点的 Web UI，地址为 <code>http://master_node_hostname:8080</code>，确保 Spark 主节点和工作节点都已成功启动，并查看集群的状态。</li></ol><p>完成上述步骤后，Spark 组件将安装在 master 节点和两个工作节点上，并且 Spark 集群已经启动，包含一个主节点（Master）和两个工作节点（Worker）。你可以通过 Web UI 来监控和管理 Spark 集群，并在 Spark Shell 中执行 Spark 任务。</p><p>==1、<strong>修改Hadoop配置文件yarn-site.xml</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是true--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==2、<strong>解压安装包、配置</strong>==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">解压spark，并重命名为spark-yarn</span><br><span class="line">tar -zxvf spark-2.4.7-bin-hadoop2.7.tgz</span><br><span class="line">mv spark-2.4.7-bin-hadoop2.7 spark-yarn</span><br><span class="line"></span><br><span class="line">修改spark-env.sh文件，添加java环境和yarn配置地址</span><br><span class="line">cp spark-env.sh.template spark-env.sh</span><br><span class="line">vim spark-env.sh</span><br><span class="line"></span><br><span class="line">添加内容</span><br><span class="line">export JAVA_HOME=/opt/softwore/jdk8</span><br><span class="line">export HADOOP_HOME=/opt/softwore/hadoop</span><br><span class="line">export HADOOP_CONF_DIR=/opt/softwore/hadoop/etc/hadoop</span><br><span class="line">export LD_LIBRARY_PATH=/opt/softwore/hadoop/lib/native</span><br><span class="line">export SPARK_MASTER_IP=master</span><br><span class="line">export SPARK_LOCAL_DIRS=/opt/softwore/src/spark/tmp</span><br><span class="line">export SPARK_LOG_DIR=/opt/softwore/spark/logs</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line">export SPARK_DRIVER_MEMORY=512M</span><br><span class="line"></span><br><span class="line">修改slaves文件</span><br><span class="line">cp slaves.template slaves</span><br><span class="line">vim slaves</span><br><span class="line">node01</span><br><span class="line">node02</span><br><span class="line"></span><br><span class="line">修改环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">## SPARK_ENV</span><br><span class="line">export SPARK_HOME=/usr/local/spark-yarn</span><br><span class="line">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br><span class="line"></span><br><span class="line">刷新，生效</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>==3、<strong>导入jar包</strong>==</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cp</span> mysql-connector-java-<span class="number">5</span>.<span class="number">1</span>.<span class="number">47</span>.jar /opt/softwore/spark/jars</span><br><span class="line"><span class="attribute">cp</span> hive-common-<span class="number">2</span>.<span class="number">3</span>.<span class="number">1</span>.jar /opt/softwore/spark/jars</span><br></pre></td></tr></table></figure><p>==4、<strong>使用Hive</strong>==</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spark-shell</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启多行代码模式</span></span><br><span class="line">:paste</span><br><span class="line"></span><br><span class="line">saprk.sql(<span class="string">&quot;select * from yyh.t1&quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">ctrl + <span class="type">D</span></span><br></pre></td></tr></table></figure><h2 id="Spark使用"><a href="#Spark使用" class="headerlink" title="Spark使用"></a>Spark使用</h2><h4 id="省赛样卷一"><a href="#省赛样卷一" class="headerlink" title="省赛样卷一"></a>省赛样卷一</h4><blockquote><p>任务6：Spark 分布式计算（5分）</p><p>6.1 计算不重复的电影数量</p><p>6.2 计算电影平均评分</p><p>6.3 计算用户在夜晚的评分总记录数</p></blockquote><p>==<strong>实例化对象</strong>==</p><h5 id="6-1-计算不重复的电影数量"><a href="#6-1-计算不重复的电影数量" class="headerlink" title="6.1 计算不重复的电影数量"></a>6.1 计算不重复的电影数量</h5><blockquote><p>在master节点上操作，读取 hdfs 上/spark/movie_ratings.csv数据，启动 spark 计算不重复的电影（movieId）数量，并保存结果到~/results/task6-1.txt文件中。（1分）</p></blockquote><p><code>spark-shell</code>还是先开启多行代码编辑模式<code>:paste</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; :paste</span><br><span class="line"><span class="comment">// Entering paste mode (ctrl-D to finish)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = spark.read</span><br><span class="line">                .option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">                .option(<span class="string">&quot;inferSchema&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">                .format(<span class="string">&quot;csv&quot;</span>)</span><br><span class="line">                .load(<span class="string">&quot;hdfs:///spark/movie_ratings.csv&quot;</span>)</span><br><span class="line">                .createTempView(<span class="string">&quot;t1&quot;</span>)</span><br><span class="line">spark.sql(<span class="string">&quot;select count(distinct(movieId)) from t1&quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res1 = spark.sql(<span class="string">&quot;select count(distinct(movieId)) from t1&quot;</span>)</span><br><span class="line"><span class="type">Seq</span>(res1.first().toString()).toDF().write.mode(<span class="string">&quot;overwrite&quot;</span>).text(<span class="string">&quot;file:///root/results/task6-2.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Exiting paste mode, now interpreting.</span></span><br><span class="line"></span><br><span class="line">+-----------------------+                                                       </span><br><span class="line">|count(<span class="type">DISTINCT</span> movieId)|</span><br><span class="line">+-----------------------+</span><br><span class="line">|                  <span class="number">14026</span>|</span><br><span class="line">+-----------------------+</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data: <span class="type">Unit</span> = ()</span><br><span class="line"><span class="keyword">val</span> res1: org.apache.spark.sql.<span class="type">DataFrame</span> = [count(<span class="type">DISTINCT</span> movieId): bigint]</span><br></pre></td></tr></table></figure><p>保存文件的时候遇到了一些问题，因为前面我是设置了<code>.format(&quot;inferSchema&quot;, &quot;true&quot;)</code>spark自动识别字段类型，所以有的数据格式为<code>Bigint</code>,但是存文件时候spark不支持直接将<code>Bigint</code>类型转换为文本格式，这里想了想只是输出一个纯文本用不着这么麻烦我直接就强转了，但是这样是错的你强转的只是sql语句，所以还是需要麻烦一点获取<code>first()</code>其实更好的方式是将<code>Bigint</code>类型转成String，然后存到一个Seq中再转成<code>dataframe</code>格式            </p><p>还有一点就是保存到本地是<code>file:///</code></p><p><code>Seq</code>提供了许多其他的操作方法，如<code>head</code>、<code>tail</code>、<code>isEmpty</code>、<code>distinct</code>等</p><p>需要注意的是，<code>Seq</code>是不可变的，这意味着它的元素是不可变的，一旦创建，就不能修改。如果你需要可变的序列，可以使用<code>mutable.Seq</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> from_unixtime(<span class="number">1112484727</span>, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> data1_1 = spark.sql(<span class="string">&quot;select cast(count(distinct(movieId)) as string) as number from t1&quot;</span>) data1_1.write.option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;false&quot;</span>).format(<span class="string">&quot;text&quot;</span>).mode(<span class="string">&quot;overwrite&quot;</span>).save(<span class="string">&quot;file:///root/spark/s1.txt&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6-2-计算电影平均评分"><a href="#6-2-计算电影平均评分" class="headerlink" title="6.2  计算电影平均评分"></a>6.2  计算电影平均评分</h5><blockquote><p>在master节点上操作，读取 hdfs 上/spark/movie_ratings.csv数据，运用 spark 计算电影平均评分，保留两位小数，并保存结果到~/results/task6-2.txt文件中。(平均评分=总评分数/总评分记录数）（1分）</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> res2 = spark.sql(<span class="string">&quot;select round(avg(rating),2) as avg_rating from t1&quot;</span>)</span><br><span class="line"><span class="type">Seq</span>(res2.first().toString()).toDF().write.mode(<span class="string">&quot;overwrite&quot;</span>).text(<span class="string">&quot;file:///root/results/task6-2.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="6-3-计算用户在夜晚的评分总记录数"><a href="#6-3-计算用户在夜晚的评分总记录数" class="headerlink" title="6.3  计算用户在夜晚的评分总记录数"></a>6.3  计算用户在夜晚的评分总记录数</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6.3 计算用户在夜晚的评分总记录数</span></span><br><span class="line"><span class="comment">     * 在master节点上操作，读取 hdfs 上/spark/movie_ratings.csv数据，</span></span><br><span class="line"><span class="comment">     * 按照以下要求把每天的评分时间字段划分为 morning、lunch、afternoon、evening、night 五个时间段，</span></span><br><span class="line"><span class="comment">     * 并运用 spark 计算用户在夜晚（evening）的评分总记录数，并保存结果到~/results/task6-3.txt文件中。（3分）</span></span><br><span class="line"><span class="comment">     * 评分时间戳字段分类（以小时为单位）：</span></span><br><span class="line"><span class="comment">     * •morning：7~12（包含7点，不含12点）</span></span><br><span class="line"><span class="comment">     * •lunch：12~14（包含12点，不含14点）</span></span><br><span class="line"><span class="comment">     * •afternoon：14~18（包含14点，不含18点）</span></span><br><span class="line"><span class="comment">     * •evening：18~24（包含18点，不含24点）</span></span><br><span class="line"><span class="comment">     * •night：0~7（包含0点，不含7点）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> data = spark.read</span><br><span class="line">      .option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .option(<span class="string">&quot;inferSchema&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">      .csv(<span class="string">&quot;C:\\Users\\beihai\\Desktop\\competition\\movie_ratings.csv&quot;</span>)</span><br><span class="line">      .createTempView(<span class="string">&quot;view1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |with t1 as (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |       userId,movieId,rating,hour(from_unixtime(timestamp, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)) as hour_time</span></span><br><span class="line"><span class="string">        |from</span></span><br><span class="line"><span class="string">        |       view1</span></span><br><span class="line"><span class="string">        |),</span></span><br><span class="line"><span class="string">        |t2 as (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |       userId,rating,</span></span><br><span class="line"><span class="string">        |case</span></span><br><span class="line"><span class="string">        |       when hour_time &gt;= 7 and hour_time &lt; 12 then &#x27;morning&#x27;</span></span><br><span class="line"><span class="string">        |       when hour_time &gt;= 12 and hour_time &lt; 14 then &#x27;lunch&#x27;</span></span><br><span class="line"><span class="string">        |       when hour_time &gt;= 14 and hour_time &lt; 18 then &#x27;afternoon&#x27;</span></span><br><span class="line"><span class="string">        |       when hour_time &gt;= 18 and hour_time &lt; 24 then &#x27;evening&#x27;</span></span><br><span class="line"><span class="string">        |       else &#x27;night&#x27;</span></span><br><span class="line"><span class="string">        |end as evening_rating</span></span><br><span class="line"><span class="string">        |from t1</span></span><br><span class="line"><span class="string">        |)</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |userId, sum(rating) as rating</span></span><br><span class="line"><span class="string">        |from t2</span></span><br><span class="line"><span class="string">        |where evening_rating = &#x27;evening&#x27;</span></span><br><span class="line"><span class="string">        |group by userId</span></span><br><span class="line"><span class="string">        |order by userId</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |       userId,sum(rating) as evening_ratings</span></span><br><span class="line"><span class="string">        |from view1</span></span><br><span class="line"><span class="string">        |where</span></span><br><span class="line"><span class="string">        |       hour(from_unixtime(timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 18 and hour(from_unixtime(timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 24</span></span><br><span class="line"><span class="string">        |group by userId</span></span><br><span class="line"><span class="string">        |order by userId</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 movie_ratings.csv 数据</span></span><br><span class="line"><span class="keyword">val</span> data = spark.read</span><br><span class="line">  .option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;inferSchema&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">  .csv(<span class="string">&quot;hdfs:///spark/movie_ratings.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将时间戳字段转换为时间类型</span></span><br><span class="line"><span class="keyword">val</span> formattedData = data.withColumn(<span class="string">&quot;timestamp&quot;</span>, to_timestamp(col(<span class="string">&quot;timestamp&quot;</span>), <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加时间段列</span></span><br><span class="line"><span class="keyword">val</span> categorizedData = formattedData.withColumn(<span class="string">&quot;time_period&quot;</span>, when(hour(col(<span class="string">&quot;timestamp&quot;</span>)).between(<span class="number">7</span>, <span class="number">11</span>), <span class="string">&quot;morning&quot;</span>)</span><br><span class="line">  .when(hour(col(<span class="string">&quot;timestamp&quot;</span>)).between(<span class="number">12</span>, <span class="number">13</span>), <span class="string">&quot;lunch&quot;</span>)</span><br><span class="line">  .when(hour(col(<span class="string">&quot;timestamp&quot;</span>)).between(<span class="number">14</span>, <span class="number">17</span>), <span class="string">&quot;afternoon&quot;</span>)</span><br><span class="line">  .when(hour(col(<span class="string">&quot;timestamp&quot;</span>)).between(<span class="number">18</span>, <span class="number">23</span>), <span class="string">&quot;evening&quot;</span>)</span><br><span class="line">  .otherwise(<span class="string">&quot;night&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤出夜晚时间段的数据并计算评分总记录数</span></span><br><span class="line"><span class="keyword">val</span> eveningCount = categorizedData.filter(col(<span class="string">&quot;time_period&quot;</span>) === <span class="string">&quot;evening&quot;</span>).count()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果保存到文件</span></span><br><span class="line"><span class="keyword">val</span> outputPath = <span class="string">&quot;/home/ec2-user/results/task6-3.txt&quot;</span></span><br><span class="line"><span class="keyword">val</span> result = <span class="string">s&quot;Evening rating count: <span class="subst">$eveningCount</span>&quot;</span></span><br><span class="line">spark.sparkContext.parallelize(<span class="type">Seq</span>(result)).saveAsTextFile(outputPath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     | select</span></span><br><span class="line"><span class="string">     |      userId,count(*) as countt</span></span><br><span class="line"><span class="string">     | from df1</span></span><br><span class="line"><span class="string">     | where hour(from_unixtime(timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &gt;= 18 and</span></span><br><span class="line"><span class="string">     | hour(from_unixtime(timestamp,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)) &lt; 24</span></span><br><span class="line"><span class="string">     | group by userId</span></span><br><span class="line"><span class="string">     | &quot;&quot;&quot;</span>).show()</span><br><span class="line">+------+------+                                                                 </span><br><span class="line">|userId|countt|</span><br><span class="line">+------+------+</span><br><span class="line">|   <span class="number">148</span>|   <span class="number">128</span>|</span><br><span class="line">|   <span class="number">463</span>|    <span class="number">79</span>|</span><br><span class="line">|   <span class="number">471</span>|    <span class="number">31</span>|</span><br><span class="line">|   <span class="number">833</span>|     <span class="number">3</span>|</span><br><span class="line">|  <span class="number">1088</span>|    <span class="number">60</span>|</span><br><span class="line">|  <span class="number">1342</span>|    <span class="number">25</span>|</span><br><span class="line">|  <span class="number">1591</span>|     <span class="number">4</span>|</span><br><span class="line">|  <span class="number">1959</span>|    <span class="number">74</span>|</span><br><span class="line">|  <span class="number">2122</span>|    <span class="number">46</span>|</span><br><span class="line">|   <span class="number">392</span>|    <span class="number">21</span>|</span><br><span class="line">|   <span class="number">540</span>|    <span class="number">10</span>|</span><br><span class="line">|   <span class="number">737</span>|    <span class="number">19</span>|</span><br><span class="line">|   <span class="number">858</span>|    <span class="number">62</span>|</span><br><span class="line">|  <span class="number">1084</span>|    <span class="number">94</span>|</span><br><span class="line">|  <span class="number">1127</span>|    <span class="number">82</span>|</span><br><span class="line">|  <span class="number">1896</span>|   <span class="number">116</span>|</span><br><span class="line">|  <span class="number">1143</span>|    <span class="number">70</span>|</span><br><span class="line">|  <span class="number">1270</span>|    <span class="number">78</span>|</span><br><span class="line">|  <span class="number">1322</span>|   <span class="number">208</span>|</span><br><span class="line">|  <span class="number">1339</span>|   <span class="number">385</span>|</span><br><span class="line">+------+------+</span><br><span class="line">only showing top <span class="number">20</span> rows</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Flume安装与使用"><a href="#Flume安装与使用" class="headerlink" title="Flume安装与使用"></a>Flume安装与使用</h2><p>==1、<strong>上传安装包，解压配置</strong>==</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tar <span class="operator">-</span>zxvf apache<span class="operator">-</span>flume<span class="number">-1.9</span><span class="number">.0</span><span class="operator">-</span>bin.tar.gz</span><br><span class="line">mv apache<span class="operator">-</span>flume<span class="number">-1.8</span><span class="number">.0</span><span class="operator">-</span>bin flume</span><br><span class="line">修改配置文件</span><br><span class="line">cp flume<span class="operator">-</span>env.sh.template flume<span class="operator">-</span>env.sh</span><br><span class="line">vim flume<span class="operator">-</span>env.sh</span><br><span class="line">export JAVA_HOME<span class="operator">=</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>src<span class="operator">/</span>jdk</span><br><span class="line">配置环境变量</span><br><span class="line">vim <span class="operator">/</span>etc<span class="operator">/</span>profile</span><br><span class="line"></span><br><span class="line">## FLUME_HOME</span><br><span class="line">export FLUME_HOME<span class="operator">=</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>flume</span><br><span class="line">export PATH<span class="operator">=</span>$PATH:$FLUME_HOME<span class="operator">/</span>bin</span><br><span class="line">测试 Flume 环境配置</span><br><span class="line">flume<span class="operator">-</span>ng version</span><br></pre></td></tr></table></figure><p>==2、<strong>Flume 入门案例</strong>==</p><ul><li><p>采集需求：监控本地指定端口（44444)，采集数据到控制台日志显示 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># example.conf</span><br><span class="line"></span><br><span class="line"># 定义Agent的名称、Source、Channel、Sink的名称</span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"># 配置 Source 组件属性</span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = localhost</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"># 配置 Channel 组件属性</span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line"># 内存最大存储的 event 数量</span><br><span class="line">a1.channels.c1.capacity = 10000</span><br><span class="line"># 每次最大从source中拿到sink中的event数量</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"># 配置 Sink 组件属性</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"># 将源和接收器绑定到通道</span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flume<span class="operator">-</span>ng agent <span class="comment">--name a1 --conf $FLUME_HOME/conf --conf-file $FLUME_HOME/conf/example.conf</span></span><br><span class="line"><span class="operator">-</span>Dflume.root.logger<span class="operator">=</span>INFO,console</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>n <span class="operator">-</span>c <span class="operator">-</span>f </span><br></pre></td></tr></table></figure><p>本地监控需要安装</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc localhost <span class="number">44444</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>监控指定目录采集数据保存到HDFS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">a1表示代理名称</span></span><br><span class="line">a1.sources=s1</span><br><span class="line">a1.sinks=k1</span><br><span class="line">a1.channels=c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置source1  监控目录是否有文件数据生成</span></span><br><span class="line">a1.sources.s1.type=spooldir</span><br><span class="line">a1.sources.s1.spoolDir=/opt/datas/flume/TestDir</span><br><span class="line">a1.sources.s1.channels=c1</span><br><span class="line">a1.sources.s1.fileHeader = false</span><br><span class="line">a1.sources.s1.interceptors = i1</span><br><span class="line">a1.sources.s1.interceptors.i1.type = timestamp</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置sink1  将检测到的数据sink到hdfs上</span></span><br><span class="line">a1.sinks.k1.type=hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path=hdfs://bigdata.ibeifeng.com:8020/flume</span><br><span class="line">a1.sinks.k1.hdfs.fileType=DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat=TEXT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">600s后hdfs上文件才没有tmp，否则有，有tmp则不能看</span></span><br><span class="line">a1.sinks.k1.hdfs.rollInterval=60</span><br><span class="line">a1.sinks.k1.channel=c1</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix=%Y-%m-%d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通道是以内存方式存储</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置channel1</span></span><br><span class="line">a1.channels.c1.type=memory</span><br><span class="line">a1.channels.c1.capacity=10000</span><br><span class="line">a1.channels.c1.transactionCapacity=100</span><br><span class="line"></span><br><span class="line">a1.sources.r1.channels=c1</span><br><span class="line">a1.sinks.k1.channel=c1</span><br></pre></td></tr></table></figure></li><li><p>监控指定文件采集数据保存到HDFS</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span>.type=exec</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span>.command=tail -F /opt/data/t1<span class="selector-class">.txt</span></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.hdfs</span>.path= hdfs:<span class="comment">//master:8020/flume/%Y-%m-%d/%H</span></span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.hdfs</span><span class="selector-class">.roundUnit</span> = hour</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.hdfs</span><span class="selector-class">.useLocalTimeStamp</span> = true</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Namenode 端口:</span><br><span class="line"><span class="number">2.</span>x端口<span class="number">3.</span>x端口name<span class="keyword">desc</span></span><br><span class="line"><span class="number">50470</span><span class="number">9871</span>dfs.namenode.https<span class="operator">-</span>addressThe namenode secure http server address <span class="keyword">and</span> port.</span><br><span class="line"><span class="number">50070</span><span class="number">9870</span>dfs.namenode.http<span class="operator">-</span>addressThe address <span class="keyword">and</span> the base port <span class="keyword">where</span> the dfs namenode web ui will listen on.</span><br><span class="line"><span class="number">8020</span><span class="number">9820</span>fs.defaultFS指定HDFS运行时nameNode地址</span><br><span class="line">Secondary NN 端口:</span><br><span class="line"><span class="number">2.</span>x端口<span class="number">3.</span>x端口name<span class="keyword">desc</span></span><br><span class="line"><span class="number">50091</span><span class="number">9869</span>dfs.namenode.secondary.https<span class="operator">-</span>addressThe secondary namenode HTTPS server address <span class="keyword">and</span> port</span><br><span class="line"><span class="number">50090</span><span class="number">9868</span>dfs.namenode.secondary.http<span class="operator">-</span>addressThe secondary namenode HTTPS server address <span class="keyword">and</span> port</span><br><span class="line">Datanode 端口:</span><br><span class="line"><span class="number">2.</span>x端口<span class="number">3.</span>x端口name<span class="keyword">desc</span></span><br><span class="line"><span class="number">50020</span><span class="number">9867</span>dfs.datanode.ipc.addressThe datanode ipc server address <span class="keyword">and</span> port.</span><br><span class="line"><span class="number">50010</span><span class="number">9866</span>dfs.datanode.addressThe datanode server address <span class="keyword">and</span> port <span class="keyword">for</span> data transfer.</span><br><span class="line"><span class="number">50475</span><span class="number">9865</span>dfs.datanode.https.addressThe datanode secure http server address <span class="keyword">and</span> port</span><br><span class="line"><span class="number">50075</span><span class="number">9864</span>dfs.datanode.http.addressThe datanode http server address <span class="keyword">and</span> por</span><br><span class="line">Yarn 端口</span><br><span class="line"><span class="number">2.</span>x端口<span class="number">3.</span>x端口name<span class="keyword">desc</span></span><br><span class="line"><span class="number">8088</span><span class="number">8088</span>yarn.resourcemanager.webapp.addresshttp服务端口</span><br></pre></td></tr></table></figure><h2 id="Linux权限"><a href="#Linux权限" class="headerlink" title="Linux权限"></a>Linux权限</h2><p><a href="https://blog.csdn.net/qq_63992711/article/details/127042653">https://blog.csdn.net/qq_63992711/article/details/127042653</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rwx rw- r-- 这就是 111 110 100 最终即 764 权限。</span><br><span class="line"></span><br><span class="line">修改file.txt文件的权限分配设置为 rwx rw- r-- 就可以操作为 chmod 764 file.txt</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h1 id="模块B：数据分析-30分"><a href="#模块B：数据分析-30分" class="headerlink" title="模块B：数据分析(30分)"></a>模块B：数据分析(30分)</h1><blockquote><p>花了两天把省赛样题一做了一遍，感觉还不错，难点就是在前期的数据的处理上，对于所处数据的格式要有分辨，是对列处理，还是对表处理。另外对数据异常值和空值的处理时候会出现问题，就可以用替换的方式,fillna处理的时候要注意替换成数值类型的时候，需要将源数据的格式astype为数值类型。对于画图这里，其实还是对数据进行处理，难点就是对于轴处理和值处理，对于x,y最好还是zip一下或者enumerate。这一模块练的就是对数据的敏感性，还是得多刷点算法题练思维</p></blockquote><h2 id="省赛样卷一：模块B"><a href="#省赛样卷一：模块B" class="headerlink" title="省赛样卷一：模块B"></a>省赛样卷一：模块B</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来正常显示中文标签，SimHei是黑体的英文名称</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># 解决符号显示为方块的问题</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="任务1：数据读取（1分）"><a href="#任务1：数据读取（1分）" class="headerlink" title="任务1：数据读取（1分）"></a>任务1：数据读取（1分）</h3><blockquote><p>这里任务书说着是只读取一个文件，到比赛很可能就是读取两张表进行合并</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">任务1：数据读取（1分）</span></span><br><span class="line"><span class="string">• 载入 movies.csv 文件，数据路径为 ../data/movies.csv • 结果以变量data保存</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data1 = pd.read_csv(<span class="string">&#x27;tmdb_5000_movies.csv&#x27;</span>)</span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;tmdb_5000_credits.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 合并表</span></span><br><span class="line">data = data1.merge(data2,how=<span class="string">&#x27;left&#x27;</span>, left_on=<span class="string">&#x27;id&#x27;</span>, right_on=<span class="string">&#x27;movie_id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这里合并完成之后可能会有重复的列，python会自动识别然后添加_x,_y这种的字段，比赛的时候要看清楚，这里可以自定义删除和重命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data.rename(&#123;<span class="string">&#x27;title_x&#x27;</span>:t1,<span class="string">&#x27;title_y&#x27;</span>:t2&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 删除有多种方式</span></span><br><span class="line"><span class="keyword">del</span> data[<span class="string">&#x27;title_x&#x27;</span>]</span><br><span class="line">data.drop(columns=[<span class="string">&#x27;title_x&#x27;</span>,<span class="string">&#x27;title_y&#x27;</span>])</span><br></pre></td></tr></table></figure><p>合并完表之后可以重置索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = data.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#data.index += 1</span></span><br></pre></td></tr></table></figure><p>做完这一部分之后可以保存一些防止后期用到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">&#x27;movie.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="任务2：数据处理（9分）"><a href="#任务2：数据处理（9分）" class="headerlink" title="任务2：数据处理（9分）"></a>任务2：数据处理（9分）</h3><h4 id="任务2-1（1分）"><a href="#任务2-1（1分）" class="headerlink" title="任务2-1（1分）"></a>任务2-1（1分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">删除指定字段，具体要求如下：</span></span><br><span class="line"><span class="string">•删除homepage, original_title, overview, spoken_languages, status, tagline, movie_id字段</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data.drop(columns=[<span class="string">&#x27;homepage&#x27;</span>, <span class="string">&#x27;original_title&#x27;</span>, <span class="string">&#x27;overview&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;spoken_languages&#x27;</span>, <span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;tagline&#x27;</span>, <span class="string">&#x27;movie_id&#x27;</span>],inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="任务2-2（1分）"><a href="#任务2-2（1分）" class="headerlink" title="任务2-2（1分）"></a>任务2-2（1分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">增加profit字段，该字段为每部电影的收益，具体要求如下：</span></span><br><span class="line"><span class="string">•计算每部电影的收益，收益=电影票房-电影预算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data.loc[:,<span class="string">&#x27;profit&#x27;</span>] = data[<span class="string">&#x27;revenue&#x27;</span>] - data[<span class="string">&#x27;budget&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="任务2-4（1分）"><a href="#任务2-4（1分）" class="headerlink" title="任务2-4（1分）"></a>任务2-4（1分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">处理runtime字段的缺失值，该字段有两个缺失值，具体要求如下：</span></span><br><span class="line"><span class="string">•将id为370980的缺失值填充为98</span></span><br><span class="line"><span class="string">•将id为459488的缺失值填充为81</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 先查看数据类型</span></span><br><span class="line">data[<span class="string">&#x27;runtime&#x27;</span>].dtype</span><br><span class="line"><span class="comment"># 如果不是数值类型就改成数值类型</span></span><br><span class="line">data[<span class="string">&#x27;runtime&#x27;</span>] = data[<span class="string">&#x27;runtime&#x27;</span>].astype(<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># 查看空值</span></span><br><span class="line">data[data[<span class="string">&#x27;runtime&#x27;</span>].isnull()]</span><br><span class="line"><span class="comment"># 查看非空值</span></span><br><span class="line">data[~data[<span class="string">&#x27;runtime&#x27;</span>].isnull()]</span><br><span class="line"><span class="comment">#填充</span></span><br><span class="line">data.loc[(data[<span class="string">&#x27;runtime&#x27;</span>].isnull()) &amp; (data[<span class="string">&#x27;id&#x27;</span>] == <span class="number">370980</span>),<span class="string">&#x27;runtime&#x27;</span>] = <span class="number">98</span></span><br><span class="line">data.loc[(data[<span class="string">&#x27;runtime&#x27;</span>].isnull()) &amp; (data[<span class="string">&#x27;id&#x27;</span>] == <span class="number">459488</span>),<span class="string">&#x27;runtime&#x27;</span>] = <span class="number">81</span></span><br></pre></td></tr></table></figure><p>这里遇到些问题还没解决，就是对于缺失值处理我是用<code>fillna</code>函数，并且在格式正确的情况下，inplace=True不生效，查了查百度是因为链式原因，多次调用了指定的id，那就麻烦点直接对原始数据进行替换。</p><p>如果填充的时候报错可能是索引的问题去重新搞一下索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="任务2-5（2分）"><a href="#任务2-5（2分）" class="headerlink" title="任务2-5（2分）"></a>任务2-5（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分别对genres, keywords, production_companies, production_countries字段进行处理，具体要求如下：</span></span><br><span class="line"><span class="string">•每个字段只保留该字段内容中name键值对应的value值，并以|分隔</span></span><br><span class="line"><span class="string">提示：例如[&#123;&quot;id&quot;: 28, &quot;name&quot;: &quot;Action&quot;&#125;, &#123;&quot;id&quot;: 12, &quot;name&quot;: &quot;Adventure&quot;&#125;, &#123;&quot;id&quot;: 14, &quot;name&quot;: &quot;Fantasy&quot;&#125;, &#123;&quot;id&quot;: 878, &quot;name&quot;: &quot;Science Fiction&quot;&#125;]，处理后变为Action|Adventure|Fantasy|Science Fiction</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 这里需要导入json</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串装成字典列表类型</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2_5</span>(<span class="params">datas</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(datas, <span class="built_in">str</span>):</span><br><span class="line">        datas = json.loads(datas)</span><br><span class="line">    names = [i[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> datas]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;|&#x27;</span>.join(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">data[<span class="string">&#x27;genres&#x27;</span>] = data[<span class="string">&#x27;genres&#x27;</span>].apply(task2_5)</span><br><span class="line">data[<span class="string">&#x27;keywords&#x27;</span>] = data[<span class="string">&#x27;keywords&#x27;</span>].apply(task2_5)</span><br><span class="line">data[<span class="string">&#x27;production_companies&#x27;</span>] = data[<span class="string">&#x27;production_companies&#x27;</span>].apply(task2_5)</span><br><span class="line">data[<span class="string">&#x27;production_countries&#x27;</span>] = data[<span class="string">&#x27;production_countries&#x27;</span>].apply(task2_5)</span><br></pre></td></tr></table></figure><h4 id="任务2-6（2分）"><a href="#任务2-6（2分）" class="headerlink" title="任务2-6（2分）"></a>任务2-6（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对crew字段进行处理，具体要求如下：</span></span><br><span class="line"><span class="string">•只保留导演的名字，并以|分隔</span></span><br><span class="line"><span class="string">•将crew字段列名改为director</span></span><br><span class="line"><span class="string">提示：导演的job为Director</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2_6</span>(<span class="params">datas</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(datas, <span class="built_in">str</span>):</span><br><span class="line">        datas = json.loads(datas)</span><br><span class="line">    names = [i[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> datas <span class="keyword">if</span> i[<span class="string">&#x27;job&#x27;</span>] == <span class="string">&#x27;Director&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;|&#x27;</span>.join(names)</span><br><span class="line">data[<span class="string">&#x27;crew&#x27;</span>] = data[<span class="string">&#x27;crew&#x27;</span>].apply(task2_6)</span><br><span class="line">data.rename(columns=&#123;<span class="string">&#x27;crew&#x27;</span>:<span class="string">&#x27;director&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>最后保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">&#x27;movie2.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="任务3：数据可视化（20分）"><a href="#任务3：数据可视化（20分）" class="headerlink" title="任务3：数据可视化（20分）"></a>任务3：数据可视化（20分）</h3><h4 id="任务3-1（2分）"><a href="#任务3-1（2分）" class="headerlink" title="任务3-1（2分）"></a>任务3-1（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对电影的关键词制作词云图</span></span><br><span class="line"><span class="string">•成功制作词云图（1分）</span></span><br><span class="line"><span class="string">•词云图图形为video（1分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 这里可以导入jieba进行分词,PIL进行img获取</span></span><br><span class="line"><span class="comment"># import jieba</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">keywords_res = keywords.<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>).explode().unique()</span><br><span class="line">key_res = <span class="string">&#x27; &#x27;</span>.join(keywords_res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置版图口罩</span></span><br><span class="line">video_mask = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;./img/map.jpg&#x27;</span>))</span><br><span class="line">color_list = [<span class="string">&#x27;black&#x27;</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">colormap = colors.ListedColormap(color_list)</span><br><span class="line"></span><br><span class="line">wordclound = WordCloud(</span><br><span class="line">    mask = video_mask,</span><br><span class="line">    background_color=<span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">    colormap=colormap</span><br><span class="line">).generate(key_res)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">plt.imshow(wordclound, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.savefig(<span class="string">&#x27;wordcloud_map.png&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>词云图绘制要注意几个问题，最终genreate_from_text一定是以空格隔开的文本文字，如果比赛的时候提供了jieba包就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里text是一维的列表格式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">cut = jieba.cut(text)</span><br><span class="line">string = <span class="string">&#x27; &#x27;</span>.join(cut)</span><br></pre></td></tr></table></figure><p>如果需要自动化保存n张图片可以使用随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ranInt = random.randint(<span class="number">1</span>,<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">f&#x27;./static/cloud/<span class="subst">&#123;ranInt&#125;</span>.png&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">f&#x27;./static/cloud/<span class="subst">&#123;ranInt&#125;</span>.png&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="任务3-2（2分）"><a href="#任务3-2（2分）" class="headerlink" title="任务3-2（2分）"></a>任务3-2（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">制作电影的时长频率分布直方图</span></span><br><span class="line"><span class="string">•直方图图形类型正确（0.5分）</span></span><br><span class="line"><span class="string">•直方图颜色为蓝色，透明度为 0.5，框线为黑色（0.5分）</span></span><br><span class="line"><span class="string">•概率密度曲线以虚线表示（0.5分）</span></span><br><span class="line"><span class="string">•X轴和Y轴标签正确，左轴为直方图Y轴，右侧为概率密度曲线轴（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 绘制直方图</span></span><br><span class="line"><span class="string">n, bins, patches = plt.hist(runtimes, bins=20, color=&#x27;skyblue&#x27;, alpha=0.5, edgecolor=&#x27;black&#x27;, density=True)# 这里的density=True是显示频率，False是频数</span></span><br><span class="line"><span class="string"># 计算组距</span></span><br><span class="line"><span class="string">bin_width = bins[1] - bins[0]</span></span><br><span class="line"><span class="string"># 计算频率/组距</span></span><br><span class="line"><span class="string">frequency = n / bin_width</span></span><br><span class="line"><span class="string"># 计算频率密度</span></span><br><span class="line"><span class="string">total_count = len(runtimes)</span></span><br><span class="line"><span class="string">density = frequency / total_count</span></span><br><span class="line"><span class="string"># 计算频率密度</span></span><br><span class="line"><span class="string"># freq_density = n / (len(runtimes) * bin_width)</span></span><br><span class="line"><span class="string"># 打印频率/组距和频率密度</span></span><br><span class="line"><span class="string">print(&quot;频率/组距:&quot;, frequency)</span></span><br><span class="line"><span class="string">print(&quot;频率密度1:&quot;, density)</span></span><br><span class="line"><span class="string">print(&quot;频率密度2:&quot;, freq_density)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">runtimes = data[<span class="string">&#x27;runtime&#x27;</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;电影时长频率分布直方图&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;电影时长&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;频率/组距&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n,  bins, p = plt.hist(runtime,bins=<span class="number">32</span>, color=<span class="string">&#x27;skyblue&#x27;</span>, alpha=<span class="number">0.5</span>, density=<span class="literal">True</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2 = plt.twinx()</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;频率密度&#x27;</span>)</span><br><span class="line">ax2.plot(bins[:-<span class="number">1</span>],n, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例</span></span><br><span class="line">ax2.legend([<span class="string">&#x27;频率密度&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分化子图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n, bins, patches = plt.hist(runtimes, bins=<span class="number">20</span>, color=<span class="string">&#x27;blue&#x27;</span>, alpha=<span class="number">0.5</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">bin_width = bins[<span class="number">1</span>] - bins[<span class="number">0</span>]</span><br><span class="line">freq_density = n / (<span class="built_in">len</span>(runtimes) * bin_width)</span><br><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax2.plot(bins[:-<span class="number">1</span>], freq_density, linestyle=<span class="string">&#x27;--&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;电影时长（分钟）&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;频率/组距&#x27;</span>)</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;频率密度&#x27;</span>)</span><br><span class="line">ax2.legend([<span class="string">&#x27;频率密度&#x27;</span>], loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="任务3-3（2分）"><a href="#任务3-3（2分）" class="headerlink" title="任务3-3（2分）"></a>任务3-3（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">制作电影产地分布玫瑰图</span></span><br><span class="line"><span class="string">•统计不同产地的电影数量，电影数量低于前五的产地，全部归为others</span></span><br><span class="line"><span class="string">•成功制作玫瑰图（0.5分）</span></span><br><span class="line"><span class="string">•标题为电影产地分布（0.5分）</span></span><br><span class="line"><span class="string">•标签数值正确（0.5分）</span></span><br><span class="line"><span class="string">•标签为国家：百分比，百分比保留两位小数，例如：Canada: 2.53%（0.5分）</span></span><br><span class="line"><span class="string">Canada: 2.53%，此数据为虚构的，真实数值需要自行计算</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">task3_3 = data[<span class="string">&#x27;production_countries&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>).apply(np.unique).explode()</span><br><span class="line">task3_3 = task3_3.value_counts()</span><br><span class="line">top5 = task3_3.head(<span class="number">5</span>)</span><br><span class="line">other = task3_3[~task3_3.index.isin(top5.index)]</span><br><span class="line">other = pd.Series(other.<span class="built_in">sum</span>(), index=[<span class="string">&#x27;other&#x27;</span>])</span><br><span class="line">task3_3_1 = top5.append(other)</span><br><span class="line"></span><br><span class="line">x = task3_3_1.index</span><br><span class="line">y = (task3_3_1 / task3_3_1.<span class="built_in">sum</span>() * <span class="number">100</span>).<span class="built_in">round</span>(<span class="number">2</span>).values</span><br><span class="line"></span><br><span class="line">res = [[a,<span class="built_in">float</span>(b)] <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x,y)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(</span><br><span class="line">        series_name=<span class="string">&quot;&quot;</span>,</span><br><span class="line">        data_pair=res,</span><br><span class="line">        radius=[<span class="string">&#x27;30%&#x27;</span>,<span class="string">&#x27;50%&#x27;</span>],</span><br><span class="line">        start_angle=<span class="number">21</span>,</span><br><span class="line">        rosetype=<span class="literal">True</span>,</span><br><span class="line">        label_opts=options.LabelOpts(is_show=<span class="literal">True</span>,formatter=<span class="string">&#x27;&#123;b&#125;:&#123;d&#125;%&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=options.TitleOpts(is_show=<span class="literal">True</span>, title=<span class="string">&#x27;电影产地分布&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure><p>isin的反函数是<code>~</code> ，isin是一个非常好用的判断存在与否的函数，多用反正思维来做，比正向节省许多代码量</p><h4 id="任务3-4（2分）"><a href="#任务3-4（2分）" class="headerlink" title="任务3-4（2分）"></a>任务3-4（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">统计票房均值Top10的导演，并以条形图展示</span></span><br><span class="line"><span class="string">•票房均值以整数表示，四舍五入</span></span><br><span class="line"><span class="string">•标题为票房排名Top10的导演（0.5分）</span></span><br><span class="line"><span class="string">•标签数值正确（0.5分）</span></span><br><span class="line"><span class="string">•标签位置放置右侧（0.5分）</span></span><br><span class="line"><span class="string">•纵坐标导演名字显示完全（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">task3_4 = data[[<span class="string">&#x27;director&#x27;</span>,<span class="string">&#x27;revenue&#x27;</span>]].groupby(<span class="string">&#x27;director&#x27;</span>).agg(&#123;<span class="string">&#x27;revenue&#x27;</span>:<span class="string">&#x27;mean&#x27;</span>&#125;).astype(<span class="string">&#x27;int64&#x27;</span>).sort_values(by=<span class="string">&#x27;revenue&#x27;</span>).tail(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x = task3_4.index</span><br><span class="line">y = task3_4.values.flatten()</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;票房排名Top10的导演&#x27;</span>, loc=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">1500000000</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">1700000000</span>, <span class="number">300000000</span>))</span><br><span class="line"></span><br><span class="line">plt.gca().spines[<span class="string">&#x27;right&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.gca().spines[<span class="string">&#x27;top&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.barh(x, y, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="任务3-5（2分）"><a href="#任务3-5（2分）" class="headerlink" title="任务3-5（2分）"></a>任务3-5（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分析原创电影与改编电影在收益、票房、预算方面的表现，以旋风图展示：</span></span><br><span class="line"><span class="string">•成功制作旋风图（0.5分）</span></span><br><span class="line"><span class="string">•旋风图标签数值正确，以万为单位，取整数（四舍五入）（0.5分）</span></span><br><span class="line"><span class="string">•标题为原创电影与改编电影对比图（万）（0.5分）</span></span><br><span class="line"><span class="string">•添加图例（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">x1 = np.array([<span class="number">47</span>, <span class="number">23</span>, <span class="number">21</span>, <span class="number">19</span>,  <span class="number">7</span>])</span><br><span class="line">x2 = np.array([<span class="number">17</span>, <span class="number">33</span>, <span class="number">11</span>, <span class="number">2</span>,  <span class="number">17</span>])</span><br><span class="line">y = np.arange(<span class="number">5</span>)</span><br><span class="line">labels=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;特征1&#x27;</span>,<span class="string">&#x27;特征2&#x27;</span>,<span class="string">&#x27;特征三&#x27;</span>,<span class="string">&#x27;特征四&#x27;</span>,<span class="string">&#x27;特征五&#x27;</span>]</span><br><span class="line"><span class="comment"># fig, ax1 = plt.subplots()</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ax2 = ax1.twinx()</span></span><br><span class="line"><span class="comment">#plot</span></span><br><span class="line">ax1.barh(y, x1,<span class="number">0.8</span>,color =<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;改变&#x27;</span>)</span><br><span class="line">ax1.barh(y, -x2,<span class="number">0.8</span>,color =<span class="string">&#x27;k&#x27;</span>, label=<span class="string">&#x27;远程&#x27;</span>)</span><br><span class="line">ax1.set_yticklabels(labels,fontsize=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_xlim(-<span class="number">60</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#setting</span></span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;竞品分析&#x27;</span>,color=<span class="string">&#x27;k&#x27;</span>,fontsize=<span class="number">16</span>)</span><br><span class="line"><span class="comment"># ax1.set_ylabel(&#x27;竞品分析&#x27;, color=&#x27;k&#x27;,fontsize=16)</span></span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x1,y):</span><br><span class="line">    plt.text(a+<span class="number">5</span>, b, <span class="string">&#x27;%0.00f&#x27;</span> % a, ha=<span class="string">&#x27;center&#x27;</span>, va= <span class="string">&#x27;center&#x27;</span>,fontsize=<span class="number">16</span>,color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x2,y):</span><br><span class="line">    plt.text(-a-<span class="number">5</span>, b, <span class="string">&#x27;%0.00f&#x27;</span> % a, ha=<span class="string">&#x27;center&#x27;</span>, va= <span class="string">&#x27;center&#x27;</span>,fontsize=<span class="number">16</span>,color=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="任务3-6（2分）"><a href="#任务3-6（2分）" class="headerlink" title="任务3-6（2分）"></a>任务3-6（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">统计各种电影类型所占的比例，以饼图展示</span></span><br><span class="line"><span class="string">•设置other类，当电影类型所占比例小于%1时，全部归到other类中（0.5分）</span></span><br><span class="line"><span class="string">•所占比例小于或等于%2时，对应的饼状图往外突出一截（0.5分）</span></span><br><span class="line"><span class="string">•数值正确，百分比保留一位小数（0.5分）</span></span><br><span class="line"><span class="string">•标题为各种电影类型所占的比例（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">task3_6 = data[<span class="string">&#x27;genres&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>).apply(np.unique).explode()</span><br><span class="line">task3_6 = task3_6[task3_6.apply(<span class="keyword">lambda</span> x : <span class="built_in">len</span>(x) &gt; <span class="number">0</span>)].reset_index(drop=<span class="literal">True</span>).value_counts()</span><br><span class="line"></span><br><span class="line">task3_6_1 = (task3_6 / task3_6.<span class="built_in">sum</span>() * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">other = task3_6_1[task3_6_1 &lt; <span class="number">1</span>].<span class="built_in">sum</span>().<span class="built_in">round</span>(<span class="number">1</span>)</span><br><span class="line">other = pd.Series(other, index=[<span class="string">&#x27;other&#x27;</span>])</span><br><span class="line"></span><br><span class="line">res = task3_6_1[task3_6_1 &gt; <span class="number">1</span>].<span class="built_in">round</span>(<span class="number">1</span>).append(other)</span><br><span class="line">x = res.index</span><br><span class="line">y = res.values</span><br><span class="line">explode = [<span class="number">0.1</span> <span class="keyword">if</span> i &lt;= <span class="number">2</span> <span class="keyword">else</span> <span class="number">0.02</span> <span class="keyword">for</span> i <span class="keyword">in</span> y]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>),dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;各种电影类型所占的比例&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.pie(y,labels=x,explode=explode, autopct=<span class="string">&#x27;%.1f%%&#x27;</span>, startangle=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="任务3-7（2分）"><a href="#任务3-7（2分）" class="headerlink" title="任务3-7（2分）"></a>任务3-7（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">任务3-7（2分）</span></span><br><span class="line"><span class="string">统计电影风格（类型）Top5随时间（1980年至今）的变化趋势，以折线图展示</span></span><br><span class="line"><span class="string">•折线图设置为顺滑模式（0.5分）</span></span><br><span class="line"><span class="string">•标题和图例不能重叠（0.5分）</span></span><br><span class="line"><span class="string">•数据起点和纵坐标没有间隙（0.5分）</span></span><br><span class="line"><span class="string">•为最大值做标记（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">task3_7 = data[[<span class="string">&#x27;genres&#x27;</span>,<span class="string">&#x27;year&#x27;</span>]]</span><br><span class="line">task3_7 = task3_7[task3_7[<span class="string">&#x27;genres&#x27;</span>].apply(<span class="keyword">lambda</span> x:<span class="built_in">len</span>(x) &gt; <span class="number">0</span>)].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">task3_7[<span class="string">&#x27;genres&#x27;</span>] = task3_7[<span class="string">&#x27;genres&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>).apply(np.unique)</span><br><span class="line"></span><br><span class="line">top5_index= task3_7[<span class="string">&#x27;genres&#x27;</span>].explode().value_counts().nlargest(<span class="number">5</span>).index</span><br><span class="line"></span><br><span class="line">task3_7_1 = task3_7.explode(column=[<span class="string">&#x27;genres&#x27;</span>])</span><br><span class="line">task3_7_1[<span class="string">&#x27;number&#x27;</span>] = <span class="number">1</span></span><br><span class="line">task3_7_1 = task3_7_1[task3_7_1[<span class="string">&#x27;genres&#x27;</span>].isin(top5_index)]</span><br><span class="line"></span><br><span class="line">task3_7_2 = task3_7_1.pivot_table(index=[<span class="string">&#x27;year&#x27;</span>], columns=[<span class="string">&#x27;genres&#x27;</span>],values=[<span class="string">&#x27;number&#x27;</span>],aggfunc=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = task3_7_2.index</span><br><span class="line"></span><br><span class="line">y1 = task3_7_2[<span class="string">&#x27;number&#x27;</span>][<span class="string">&#x27;Action&#x27;</span>]</span><br><span class="line">y2 = task3_7_2[<span class="string">&#x27;number&#x27;</span>][<span class="string">&#x27;Comedy&#x27;</span>]</span><br><span class="line">y3 = task3_7_2[<span class="string">&#x27;number&#x27;</span>][<span class="string">&#x27;Drama&#x27;</span>]</span><br><span class="line">y4 = task3_7_2[<span class="string">&#x27;number&#x27;</span>][<span class="string">&#x27;Romance&#x27;</span>]</span><br><span class="line">y5 = task3_7_2[<span class="string">&#x27;number&#x27;</span>][<span class="string">&#x27;Thriller&#x27;</span>]</span><br><span class="line"></span><br><span class="line">y1.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">y2.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">y3.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">y4.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">y5.fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">max_id = y3.idxmax()</span><br><span class="line">max_value = <span class="built_in">int</span>(y3.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.interpolate <span class="keyword">import</span> make_interp_spline</span><br><span class="line"></span><br><span class="line">x_smooth = np.linspace(<span class="built_in">int</span>(x.<span class="built_in">min</span>()), <span class="built_in">int</span>(x.<span class="built_in">max</span>()), <span class="number">400</span>)</span><br><span class="line">y1_smooth = make_interp_spline(x,y1)(x_smooth)</span><br><span class="line">y2_smooth = make_interp_spline(x,y2)(x_smooth)</span><br><span class="line">y3_smooth = make_interp_spline(x,y3)(x_smooth)</span><br><span class="line">y4_smooth = make_interp_spline(x,y4)(x_smooth)</span><br><span class="line">y5_smooth = make_interp_spline(x,y5)(x_smooth)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>),dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;电影风格（类型）Top5随时间（1980年至今）的变化趋势&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">150</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>,<span class="number">180</span>,<span class="number">30</span>))</span><br><span class="line">plt.xlim(<span class="number">1980</span>,<span class="number">2017</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">1980</span>,<span class="number">2018</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(x_smooth,y1_smooth)</span><br><span class="line">plt.plot(x_smooth,y2_smooth)</span><br><span class="line">plt.plot(x_smooth,y3_smooth)</span><br><span class="line">plt.plot(x_smooth,y4_smooth)</span><br><span class="line">plt.plot(x_smooth,y5_smooth)</span><br><span class="line"></span><br><span class="line">plt.text(max_id,max_value+<span class="number">5</span>,max_value, va=<span class="string">&#x27;bottom&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="任务3-8（2分）"><a href="#任务3-8（2分）" class="headerlink" title="任务3-8（2分）"></a>任务3-8（2分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">统计不同风格（类型）电影的收益能力，以条形图和折线图混合展示</span></span><br><span class="line"><span class="string">•条形图为不同电影类型的收益总和，以千亿为单位，保留两位小数（0.5分）</span></span><br><span class="line"><span class="string">•折线图为不同电影类型的收益率，收益率=收益/预算（0.5分）</span></span><br><span class="line"><span class="string">•条形图标签数值正确（0.5分）</span></span><br><span class="line"><span class="string">•折线图不显示标签数值（0.5分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">task3_8 = data[[<span class="string">&#x27;genres&#x27;</span>,<span class="string">&#x27;profit&#x27;</span>,<span class="string">&#x27;budget&#x27;</span>]]</span><br><span class="line">task3_8 = task3_8[task3_8[<span class="string">&#x27;genres&#x27;</span>].apply(<span class="keyword">lambda</span> x : <span class="built_in">len</span>(x) &gt; <span class="number">0</span>)].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">task3_8[<span class="string">&#x27;genres&#x27;</span>] = task3_8[<span class="string">&#x27;genres&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">task3_8_1 = task3_8.explode(column=<span class="string">&#x27;genres&#x27;</span>).groupby(<span class="string">&#x27;genres&#x27;</span>).agg(<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">task3_8_1[<span class="string">&#x27;pre&#x27;</span>] = (task3_8_1[<span class="string">&#x27;profit&#x27;</span>] / task3_8_1[<span class="string">&#x27;budget&#x27;</span>] * <span class="number">100</span>)</span><br><span class="line">task3_8_1[<span class="string">&#x27;profit&#x27;</span>] = (task3_8_1[<span class="string">&#x27;profit&#x27;</span>] / <span class="number">100000000000</span>).<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">task3_8_1 = task3_8_1.sort_values(by=<span class="string">&#x27;profit&#x27;</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">task3_8_1[<span class="string">&#x27;profit&#x27;</span>] = task3_8_1[<span class="string">&#x27;profit&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="number">0</span> <span class="keyword">if</span>(x == -<span class="number">0.00</span>) <span class="keyword">else</span> x)</span><br><span class="line"></span><br><span class="line">x = task3_8_1.index</span><br><span class="line">y1 = task3_8_1[<span class="string">&#x27;profit&#x27;</span>].values</span><br><span class="line">y2 = task3_8_1[<span class="string">&#x27;pre&#x27;</span>].values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>),dpi=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=-<span class="number">45</span>, ha=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1.2</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>,<span class="number">1.4</span>,<span class="number">0.2</span>))</span><br><span class="line">plt.bar(x,y1, color=<span class="string">&#x27;red&#x27;</span>,label=<span class="string">&#x27;收益&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(x,y1):</span><br><span class="line">    plt.text(a,b+<span class="number">0.02</span>,b,ha=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">ax2 = plt.twinx()</span><br><span class="line">ax2.set_ylim(-<span class="number">100</span>, <span class="number">300</span>)</span><br><span class="line">ax2.set_yticks(np.arange(-<span class="number">100</span>, <span class="number">350</span>, <span class="number">50</span>))</span><br><span class="line">ax2.set_yticklabels([(<span class="built_in">str</span>(i)+<span class="string">&quot;%&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> np.arange(-<span class="number">100</span>, <span class="number">350</span>, <span class="number">50</span>)])</span><br><span class="line">ax2.set_ylabel(<span class="string">&#x27;收益率&#x27;</span>)</span><br><span class="line">ax2.plot(x, y2, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">&#x27;收益率&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">0.95</span>))</span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.gca().spines[<span class="string">&#x27;top&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="任务3-9（4分）"><a href="#任务3-9（4分）" class="headerlink" title="任务3-9（4分）"></a>任务3-9（4分）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">统计电影类型Top5，以条形图展示</span></span><br><span class="line"><span class="string">•条形图颜色依次为#BCEE68, #EBBDBF, #D6A5DD, #A020F0, #76CBE8 （0.5分）</span></span><br><span class="line"><span class="string">•条形图右端添加象形图片，symbols已提前给出，象形图框线为灰色grey （2分）</span></span><br><span class="line"><span class="string">•标签数值正确（0.5分）</span></span><br><span class="line"><span class="string">•标签放置条形图右侧，显示完全，不能被遮挡（1分）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data2 = pd.read_csv(<span class="string">&#x27;movie2.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data2[<span class="string">&#x27;genres&#x27;</span>] = data2[<span class="string">&#x27;genres&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">top5_genres = data2.explode(<span class="string">&#x27;genres&#x27;</span>).groupby(<span class="string">&#x27;genres&#x27;</span>).size().reset_index(name=<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line"></span><br><span class="line">top5_res = top5_genres.nlargest(<span class="number">5</span>,columns=<span class="string">&#x27;number&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">genresnumber</span></span><br><span class="line"><span class="string">6Drama2297</span></span><br><span class="line"><span class="string">3Comedy1722</span></span><br><span class="line"><span class="string">17Thriller1274</span></span><br><span class="line"><span class="string">0Action1154</span></span><br><span class="line"><span class="string">14Romance894</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">genres = top5_res[<span class="string">&#x27;genres&#x27;</span>]</span><br><span class="line">number = top5_res[<span class="string">&#x27;number&#x27;</span>]</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">&#x27;#BCEE68&#x27;</span>, <span class="string">&#x27;#EBBDBF&#x27;</span>, <span class="string">&#x27;#D6A5DD&#x27;</span>, <span class="string">&#x27;#A020F0&#x27;</span>, <span class="string">&#x27;#76CBE8&#x27;</span>]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">ax.barh(genres, number, color=colors, edgecolor=<span class="string">&#x27;grey&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加Unicode字符作为象形图片</span></span><br><span class="line">symbols = [<span class="string">&#x27;⚔️&#x27;</span>, <span class="string">&#x27;🌍&#x27;</span>, <span class="string">&#x27;🧙‍♂️&#x27;</span>, <span class="string">&#x27;🚀&#x27;</span>, <span class="string">&#x27;🐰&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(genres,number):</span><br><span class="line">    ax.text(b, a, symbols[i], va=<span class="string">&#x27;center&#x27;</span>, ha=<span class="string">&#x27;left&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;数量&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;电影类型&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;电影类型Top5&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_visible(<span class="literal">False</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="模块C：机器学习"><a href="#模块C：机器学习" class="headerlink" title="模块C：机器学习"></a>模块C：机器学习</h1><blockquote><p>四天把机器学习的几种算法过了一遍，难点在特征工程，对于模型的选择只需要明白是回归，分类还是聚类就好了，另外就是对于特征值和目标值的提取需要注意，由于没有数据练，只能找b站的几个数据练了</p></blockquote><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><p>API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.feature_extraction</span><br></pre></td></tr></table></figure><h4 id="1、字典特征提取"><a href="#1、字典特征提取" class="headerlink" title="1、字典特征提取"></a>1、字典特征提取</h4><p>需要先将数据转换成字典类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转换成字典</span></span><br><span class="line">x = x.to_dict(orient=<span class="string">&quot;recorda&quot;</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是调用转换器之后返回的是稀疏矩阵，这里sparse需要设置成false才不会返回sparse</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> feature_extraction <span class="keyword">as</span> fe</span><br><span class="line"></span><br><span class="line">data = [&#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;bj&#x27;</span>, <span class="string">&#x27;tem&#x27;</span>:<span class="number">100</span>&#125;,</span><br><span class="line">       &#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;tem&#x27;</span>:<span class="number">300</span>&#125;,</span><br><span class="line">       &#123;<span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;sd&#x27;</span>, <span class="string">&#x27;tem&#x27;</span>:<span class="number">50</span>&#125;]</span><br><span class="line">transfer = fe.DictVectorizer(sparse=<span class="literal">False</span>)<span class="comment"># 需要设置成False</span></span><br><span class="line">data_new = transfer.fit_transform(data)</span><br><span class="line">data_new</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[  1.,   0.,   0., 100.],</span></span><br><span class="line"><span class="string">       [  0.,   0.,   1., 300.],</span></span><br><span class="line"><span class="string">       [  0.,   1.,   0.,  50.]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2、文本特征提取"><a href="#2、文本特征提取" class="headerlink" title="2、文本特征提取"></a>2、文本特征提取</h4><ul><li><p>英文文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> feature_extraction <span class="keyword">as</span> fe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本特征提取</span></span><br><span class="line">data = [<span class="string">&quot;Lift is short, i like python&quot;</span>,</span><br><span class="line">       <span class="string">&quot;Lift is too long, i dislike sleep&quot;</span>]</span><br><span class="line">transfer = fe.text.CountVectorizer()</span><br><span class="line">data_new = transfer.fit_transform(data)</span><br><span class="line"><span class="built_in">print</span>(data_new.toarray())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[0 1 1 1 0 1 1 0 0]</span></span><br><span class="line"><span class="string"> [1 1 1 0 1 0 0 1 1]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>中文文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 中文文本提取</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">data = [<span class="string">&#x27;我爱北京天安门&#x27;</span>, <span class="string">&#x27;天安门上太阳升&#x27;</span>]</span><br><span class="line">data_new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    data_new.append(<span class="string">&quot; &quot;</span>.join(<span class="built_in">list</span>(jieba.cut(i))))</span><br><span class="line">data_new</span><br><span class="line">transfer = fe.text.CountVectorizer()</span><br><span class="line">data_final = transfer.fit_transform(data_new)</span><br><span class="line">data_final.toarray()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[1, 1, 0],</span></span><br><span class="line"><span class="string">       [0, 1, 1]], dtype=int64)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>3、TF-IDF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TFidf文本提取</span></span><br><span class="line">fe.text.TfidfVectorizer().fit_transform(data_new).toarray()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.81480247, 0.57973867, 0.        ],</span></span><br><span class="line"><span class="string">       [0.        , 0.57973867, 0.81480247]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特征降维"><a href="#特征降维" class="headerlink" title="特征降维"></a>特征降维</h3><p>降维是指在某些限定条件下，降低随机变量(特征)的个数，得到一组”不想关”主变量的过程大致就是我如果有三个特征，但是这三个特征之中有两个相关系数非常大，就选择这两者之一</p><p>降维之前要注意我所有的列是类似ont-hot一样的编码格式，不能出现英文或者中文</p><p>==<strong>降维方式</strong>==</p><ul><li>特征选择</li><li>主成分分析（可以理解一种特征提取的方式）</li></ul><h4 id="1、特征选择"><a href="#1、特征选择" class="headerlink" title="1、特征选择"></a>1、特征选择</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Filter过滤式</span><br><span class="line">- 方差选择法：地方查特征过滤</span><br><span class="line">- 相关系数</span><br><span class="line">  - 衡量特征与特征之间的相关性</span><br><span class="line"></span><br><span class="line">Embeded嵌入式</span><br><span class="line">- 决策树</span><br><span class="line">- 正则化</span><br><span class="line">- 深度学习</span><br></pre></td></tr></table></figure><p>==<strong>过滤式</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variance_demo</span>():</span><br><span class="line">    data = pd.read_csv(<span class="string">r&quot;E:\Code\Pywork\Machine\data\factor_returns.csv&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>,data)</span><br><span class="line">    data = data.iloc[:, <span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data:\n&quot;</span>,data)</span><br><span class="line">    <span class="comment"># 这里的threshold是阈值大于它的就会被删去</span></span><br><span class="line">    transfer = VarianceThreshold(threshold=<span class="number">5</span>)</span><br><span class="line">    data_new = transfer.fit_transform(data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;data_new:\n&quot;</span>, data_new, data_new.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    variance_demo()</span><br></pre></td></tr></table></figure><p>==<strong>相关系数</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">variance_demo</span>():</span><br><span class="line">    data = pd.read_csv(<span class="string">r&quot;E:\Code\Pywork\Machine\data\factor_returns.csv&quot;</span>)</span><br><span class="line">    data = data.iloc[:, <span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">    r = pearsonr(data[<span class="string">&#x27;pe_ratio&#x27;</span>],data[<span class="string">&#x27;pb_ratio&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相关系数:&quot;</span>,r)</span><br><span class="line"><span class="comment">#     相关系数: PearsonRResult(statistic=-0.004389322779936274, pvalue=0.8327205496564927)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    variance_demo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、主成分分析-PCA"><a href="#2、主成分分析-PCA" class="headerlink" title="2、主成分分析(PCA)"></a>2、主成分分析(PCA)</h4><p>高维转低维</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.decomposition.<span class="keyword">PCA</span></span><br></pre></td></tr></table></figure><blockquote><p>交叉表使用: table = pd.crosstab(data[‘user_id’],data[‘aisle’])</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;array([[0.81480247, 0.57973867, 0.        ],</span></span><br><span class="line"><span class="string">       [0.        , 0.57973867, 0.81480247]])&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> decomposition <span class="keyword">as</span> sd</span><br><span class="line">transfer = sd.PCA(n_components=<span class="number">0.95</span>)<span class="comment">#小数表示保留多少原始信息，整数表示获取到几维数据</span></span><br><span class="line">data_new = transfer.fit_transform(data2)</span><br><span class="line"><span class="built_in">print</span>(data_new)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[ 0.57615236]</span></span><br><span class="line"><span class="string"> [-0.57615236]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h3><h4 id="网格搜索和交叉验证"><a href="#网格搜索和交叉验证" class="headerlink" title="网格搜索和交叉验证"></a>网格搜索和交叉验证</h4><p>API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line">ms.GridSearchCV(model,param_grid=xxx,cv=xxx)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors <span class="keyword">as</span> sn</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line">iris = sd.load_iris()</span><br><span class="line">transfer = PCA(n_components=<span class="number">0.95</span>)</span><br><span class="line"></span><br><span class="line">x = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">x = transfer.fit_transform(x)</span><br><span class="line"></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, shuffle=<span class="literal">True</span>, random_state=<span class="number">5</span>, train_size=<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">transfer = sp.StandardScaler()</span><br><span class="line">train_x = transfer.fit_transform(train_x)</span><br><span class="line">test_x = transfer.transform(test_x</span><br><span class="line">                            </span><br><span class="line">model = sn.KNeighborsClassifier()</span><br><span class="line">                            </span><br><span class="line">ms.GridSearchCV(model,param_grid=&#123;<span class="string">&quot;n_neighbors&quot;</span>:&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>&#125;&#125;,cv=<span class="number">20</span>)</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line">                            </span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;micro&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><h4 id="1、均值移除-标准差标准化"><a href="#1、均值移除-标准差标准化" class="headerlink" title="1、均值移除 (标准差标准化)"></a>1、<strong>均值移除 (标准差标准化)</strong></h4><blockquote><p>由于一个样本的不同特征值差异较大，不利于使用现有机器学习算法进行样本处理。<br>标准差标准化也叫零均值标准化或分数标准化，是当前使用最广泛的数据标准化方法。经过该方法处理的数据均值移除可以让样本矩阵中的每一列的平均值为0，标准差为1。<br>如何使样本矩阵中的每一列的平均值为0呢？</p></blockquote><script type="math/tex; mode=display">X* = （X-mean）/ std</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"></span><br><span class="line">arr01 = np.array([</span><br><span class="line">    [<span class="number">17</span>, <span class="number">100</span>, <span class="number">4000</span>],</span><br><span class="line">    [<span class="number">20</span>, <span class="number">80</span>, <span class="number">5000</span>],</span><br><span class="line">    [<span class="number">23</span>, <span class="number">75</span>, <span class="number">5500</span>]</span><br><span class="line">])</span><br><span class="line">arr01</span><br><span class="line"><span class="comment"># 调用类，生成实例化对象</span></span><br><span class="line">scaler = sp.StandardScaler()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先调用fit, 再调用transform()</span></span><br><span class="line">scaler.fit(arr01).transform(arr01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用fit_transform()</span></span><br><span class="line">std_samples = scaler.fit_transform(arr01)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[-1.22474487,  1.38873015, -1.33630621],</span></span><br><span class="line"><span class="string">       [ 0.        , -0.46291005,  0.26726124],</span></span><br><span class="line"><span class="string">       [ 1.22474487, -0.9258201 ,  1.06904497]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆转</span></span><br><span class="line">scaler.inverse_transform(std_samples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用方法</span></span><br><span class="line">sp.scale(arr01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义算法</span></span><br><span class="line">array01_mean = arr01.mean(axis=<span class="number">0</span>)</span><br><span class="line">arr01_new = (arr01-array01_mean)/arr01.std(axis=<span class="number">0</span>)</span><br><span class="line">arr01_new.mean(axis=<span class="number">0</span>)</span><br><span class="line">arr01_new.std(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.preprocessing.StandardScaler(*, copy=<span class="literal">True</span>, with_mean=<span class="literal">True</span>, with_std=<span class="literal">True</span>)</span><br><span class="line">参数：</span><br><span class="line">with_mean：<span class="built_in">bool</span>, default=<span class="literal">True</span>：如果为<span class="literal">True</span>，则在缩放之前将数据居中。这在操作稀疏矩阵时不起作用（并且会引发一个异常），因为将它们居中需要构建一个密集矩阵，在常见的用例中，密集矩阵可能太大而无法容纳在内存中。</span><br><span class="line">with_std：<span class="built_in">bool</span>, default=<span class="literal">True</span>：如果为<span class="literal">True</span>，则将数据缩放为单位方差（或等效的单位标准差）。</span><br><span class="line">属性：</span><br><span class="line">scale_ ：ndarray of shape (n_features,) <span class="keyword">or</span> <span class="literal">None</span>：数据的每个特征相对缩放，以实现零均值和单位方差。通常使用np.sqrt（var）计算。如果方差为零，我们无法实现单位方差，数据保持原样，给出缩放因子<span class="number">1</span>。当with_std=<span class="literal">False</span>时，scale_等于<span class="literal">None</span>。</span><br><span class="line">mean_ ：ndarray of shape (n_features,) <span class="keyword">or</span> <span class="literal">None</span> ：训练集中每个特征的平均值。当_mean=<span class="literal">False</span>时，等于<span class="literal">None</span>。</span><br><span class="line">var_ ：ndarray of shape (n_features,) <span class="keyword">or</span> <span class="literal">None</span>：训练集中每个特征的方差。用于计算scale_ 。当std=<span class="literal">False</span>时，等于<span class="literal">None</span>。</span><br><span class="line">示例：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scaler = StandardScaler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(scaler.fit(data))</span><br><span class="line">StandardScaler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(scaler.mean_)</span><br><span class="line">[<span class="number">0.5</span> <span class="number">0.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(scaler.transform(data))</span><br><span class="line">[[-<span class="number">1.</span> -<span class="number">1.</span>]</span><br><span class="line"> [-<span class="number">1.</span> -<span class="number">1.</span>]</span><br><span class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>]</span><br><span class="line"> [ <span class="number">1.</span>  <span class="number">1.</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(scaler.transform([[<span class="number">2</span>, <span class="number">2</span>]]))</span><br><span class="line">[[<span class="number">3.</span> <span class="number">3.</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、范围缩放（离差标准化）"><a href="#2、范围缩放（离差标准化）" class="headerlink" title="2、范围缩放（离差标准化）"></a>2、<strong>范围缩放（离差标准化）</strong></h4><blockquote><p>另一种标准化方法是将特征缩放到给定的最小值和最大值之间，通常介于0和1之间，或者将每个特征的最大绝对值缩放到单位大小。这可以分别使用MinMaxScaler或MaxAbsScaler实现。使用这种缩放的动机包括对非常小的特征标准差的鲁棒性，以及在稀疏数据中保持零条目。</p><p>将样本矩阵中的每一列的最小值和最大值设定为相同的区间，统一各列特征值的范围。一般情况下会把特征值缩放至[0, 1]区间。</p><p>离差标准化是对原始数据的一种线性变换，结果是将原始数据的数值映射到[0,1]区间之间。</p><script type="math/tex; mode=display">X^*=(X-min)/(max-min)</script><p>其中max为样本数据的最大值，min 为样本数据的最小值，max-min为极差。离差标准化保留了原始数据值之间的联系，是消除量纲和数据取值范围影响最简单的方法。</p><p>离差标准化的特点：</p><p>数据的整体分布情况并不会随离差标准化而发生改变，原先取值较大的数据，在做完离差标准化后的值依旧较大。</p><p>当数据和最小值相等的时候，通过离差标准化可以发现数据变为0。</p><p>同时，还可以看出离差标准化的缺点：若数据集中某个数值很大，则离差标准化的值就会接近于0，并且相互之间差别不大。若将来遇到超过目前属性[min,max]取值范围的时候，会引起系统出错，这时便需要重新确定min和max。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scaler = sp.MinMaxScaler()</span><br><span class="line"><span class="comment"># 调用fit_transform</span></span><br><span class="line">scaler.fit_transform(arr01)</span><br><span class="line"><span class="comment"># 手写</span></span><br><span class="line">max_ = arr01.<span class="built_in">max</span>(axis=<span class="number">0</span>)</span><br><span class="line">min_ = arr01.<span class="built_in">min</span>(axis=<span class="number">0</span>)</span><br><span class="line">(arr01 - min_) / (max_ - min_)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.        , 1.        , 0.        ],</span></span><br><span class="line"><span class="string">       [0.5       , 0.2       , 0.66666667],</span></span><br><span class="line"><span class="string">       [1.        , 0.        , 1.        ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3、异常值缩放数据"><a href="#3、异常值缩放数据" class="headerlink" title="3、异常值缩放数据"></a>3、<strong>异常值缩放数据</strong></h4><blockquote><p>如果数据中包含了许多异常值，那么使用数据的均值和方差进行缩放可能不会很好地工作。在这些情况下，您可以使用RobustScaler作为替代品。它对数据的中心和范围使用了更可靠的估计。</p><p>使用对异常值具有鲁棒性的统计数据来缩放特征。</p><p>此缩放器删除中值，并根据分位数范围（默认为IQR：四分位数范围）缩放数据。IQR是第一个四分位数（第25分位数）和第三个四分位（第75分位数）之间的范围。通过计算训练集中样本的相关统计信息，对每个特征进行居中和缩放。然后存储中值和四分位间距，以便使用转换方法用于后续数据。</p><p>数据集的标准化是许多机器学习估计器的共同要求。通常，这是通过去除平均值并缩放到单位方差来实现的。然而，异常值通常会以负面方式影响样本均值/方差。在这种情况下，中值和四分位数范围通常会给出更好的结果。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scaler = sp.RobustScaler()</span><br><span class="line">scaler.fit_transform(arr01)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[-1.        ,  1.6       , -1.33333333],</span></span><br><span class="line"><span class="string">       [ 0.        ,  0.        ,  0.        ],</span></span><br><span class="line"><span class="string">       [ 1.        , -0.4       ,  0.66666667]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="4、归一化"><a href="#4、归一化" class="headerlink" title="4、归一化"></a>4、<strong>归一化</strong></h4><blockquote><p>归一化/标准化可以去除数据单位对计算带来的影响，也就是所谓的去量纲行为，归一化/标准化实质是一种线性变换，线性变换有很多良好的性质，这些性质决定了对数据改变后不会造成“失效”，反而能提高数据的表现，这些性质是归一化/标准化的前提。</p><p>归一化/标准化的去量纲作用能够带来以下两个好处： </p><p>1）提升模型的精度。一些分类器需要计算样本之间的距离（如欧氏距离），例如KNN。如果一个特征值域范围非常大，那么距离计算就主要取决于这个特征，从而与实际情况相悖（比如这时实际情况是值域范围小的特征更重要）。 </p><p>2）提高收敛速度。对于线性模型来说，数据归一化/标准化后，最优解的寻优过程明显会变得平缓，更容易正确的收敛到最优解。</p><p>有些情况每个样本的每个特征值具体的值并不重要，但是每个样本特征值的占比更加重要。</p><div class="table-container"><table><thead><tr><th></th><th>动作</th><th>爱情</th><th>科幻</th></tr></thead><tbody><tr><td>小明</td><td>20</td><td>10</td><td>5</td></tr><tr><td>小王</td><td>4</td><td>2</td><td>1</td></tr><tr><td>小李</td><td>15</td><td>11</td><td>13</td></tr></tbody></table></div><p>所以归一化即是用每个样本的每个特征值除以该样本各个特征值绝对值的总和。变换后的样本矩阵，每个样本的特征值绝对值之和为1。</p><p>将样本单独归一化为单位范数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">API：</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.preprocessing.Normalizer(norm=<span class="string">&#x27;l2&#x27;</span>, *, copy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">norm：&#123;‘l1’, ‘l2’, ‘<span class="built_in">max</span>’&#125;, default=’l2’：用于标准化每个非零样本的范数。如果使用norm=<span class="string">&#x27;max&#x27;</span>，则值将按绝对值的最大值重新缩放。</span><br><span class="line"></span><br><span class="line">这里： l1 是曼哈顿距离l2 是欧几里得距离</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">copy：<span class="built_in">bool</span>, default=<span class="literal">True</span>：设置为<span class="literal">False</span>以执行在位行规范化并避免复制（如果输入已经是numpy数组或scipy.sparse CSR矩阵）。</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scaler = sp.Normalizer(norm=<span class="string">&#x27;l2&#x27;</span>)</span><br><span class="line">scaler.fit_transform(arr01)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.00424863, 0.02499197, 0.99967862],</span></span><br><span class="line"><span class="string">       [0.00399946, 0.01599782, 0.99986403],</span></span><br><span class="line"><span class="string">       [0.00418139, 0.01363498, 0.9998983 ]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">scaler1 = sp.Normalizer(norm=<span class="string">&#x27;l1&#x27;</span>)</span><br><span class="line">scaler1.fit_transform(arr01)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0.00412922, 0.02428953, 0.97158125],</span></span><br><span class="line"><span class="string">       [0.00392157, 0.01568627, 0.98039216],</span></span><br><span class="line"><span class="string">       [0.00410861, 0.01339764, 0.98249375]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5、二值化"><a href="#5、二值化" class="headerlink" title="5、二值化"></a>5、二值化</h4><blockquote><p>有些业务并不需要分析矩阵的详细完整数据（比如图像边缘识别只需要分析出图像边缘即可），可以根据一个事先给定的阈值，用0和1表示特征值不高于或高于阈值。二值化后的数组中每个元素非0即1，达到简化数学模型的目的。大于阈值的值映射到1，而小于或等于阈值的值则映射到0。默认阈值为0时，只有正值映射到1。</p><p>二值化是对文本计数数据的一种常见操作，分析人员可以决定只考虑特征的存在或不存在，而不是量化的出现次数。它还可以用作考虑布尔随机变量的估计器的预处理步骤（例如，在贝叶斯设置中使用伯努利分布建模）。</p><p>API：</p><p>class sklearn.preprocessing.Binarizer(*, threshold=0.0, copy=True)</p><p>参数：</p><p><code>threshold：float</code>, default=0.0：低于或等于此的特征值由0替换，高于此值由1替换。对于稀疏矩阵上的操作，阈值不能小于0。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scaler = sp.Binarizer(threshold=<span class="number">80</span>)</span><br><span class="line">scaler.fit_transform(arr01)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[0, 1, 1],</span></span><br><span class="line"><span class="string">       [0, 0, 1],</span></span><br><span class="line"><span class="string">       [0, 0, 1]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h4 id="6、独热编码（onehot）"><a href="#6、独热编码（onehot）" class="headerlink" title="6、独热编码（onehot）"></a>6、独热编码（<code>onehot</code>）</h4><blockquote><p>将分类特征编码为一个热点数字数组。为样本特征的每个值建立一个由一个1和若干个0组成的序列，用该序列对所有的特征值进行编码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">两个数三个数四个数</span><br><span class="line"><span class="number">1</span><span class="number">3</span><span class="number">2</span></span><br><span class="line"><span class="number">7</span><span class="number">5</span><span class="number">4</span></span><br><span class="line"><span class="number">1</span><span class="number">8</span><span class="number">6</span></span><br><span class="line"><span class="number">7</span><span class="number">3</span><span class="number">9</span></span><br><span class="line">为每一个数字进行独热编码：</span><br><span class="line"><span class="number">1</span>-&gt;<span class="number">10</span>    <span class="number">3</span>-&gt;<span class="number">100</span>  <span class="number">2</span>-&gt;<span class="number">1000</span></span><br><span class="line"><span class="number">7</span>-&gt;01    <span class="number">5</span>-&gt;<span class="number">0</span>10   <span class="number">4</span>-&gt;<span class="number">0</span>100</span><br><span class="line"><span class="number">8</span>-&gt;001   <span class="number">6</span>-&gt;<span class="number">00</span>10  <span class="number">9</span>-&gt;0001</span><br><span class="line">编码完毕后得到最终经过独热编码后的样本矩阵：</span><br><span class="line"><span class="number">101001000</span></span><br><span class="line"><span class="number">0</span>10100100</span><br><span class="line"><span class="number">100010010</span></span><br><span class="line">011000001</span><br><span class="line">API：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.preprocessing.OneHotEncoder(*, categories=<span class="string">&#x27;auto&#x27;</span>, drop=<span class="literal">None</span>, sparse=<span class="literal">True</span>, dtype=&lt;<span class="keyword">class</span> <span class="string">&#x27;numpy.float64&#x27;</span>&gt;, handle_unknown=<span class="string">&#x27;error&#x27;</span>, min_frequency=<span class="literal">None</span>, max_categories=<span class="literal">None</span>)</span><br><span class="line">参数:</span><br><span class="line">categories：‘auto’ <span class="keyword">or</span> a <span class="built_in">list</span> of array-like, default=’auto’：</span><br><span class="line">“auto”：根据培训数据自动确定类别。</span><br><span class="line"><span class="built_in">list</span>:categories[i]包含第i列中预期的类别。传递的类别不应在单个功能中混合字符串和数值，并且应在数值的情况下进行排序。</span><br><span class="line">sparse：<span class="built_in">bool</span>, default=<span class="literal">True</span>：如果设置为<span class="literal">True</span>，将返回稀疏矩阵，否则将返回数组。</span><br><span class="line">min_frequency：<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>, default=<span class="literal">None</span>：指定最低频率，低于该频率类别将被视为不常见。</span><br><span class="line">max_categories：<span class="built_in">int</span>, default=<span class="literal">None</span>：在考虑不常用类别时，为每个输入要素指定输出要素数量的上限。如果存在不常见的类别，max_categories将包括表示不常见类别的类别以及常见类别。如果无，则输出特征的数量没有限制。</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = OneHotEncoder(handle_unknown=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[<span class="string">&#x27;Male&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;Female&#x27;</span>, <span class="number">3</span>], [<span class="string">&#x27;Female&#x27;</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc.fit(X)</span><br><span class="line">OneHotEncoder(handle_unknown=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc.categories_ <span class="comment"># 每个特征的类别</span></span><br><span class="line">[array([<span class="string">&#x27;Female&#x27;</span>, <span class="string">&#x27;Male&#x27;</span>], dtype=<span class="built_in">object</span>), array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=<span class="built_in">object</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc.transform([[<span class="string">&#x27;Female&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;Male&#x27;</span>, <span class="number">4</span>]]).toarray() <span class="comment"># 将结果转为数组</span></span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将编码反转为原来的形式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc.inverse_transform([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]) </span><br><span class="line">array([[<span class="string">&#x27;Male&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="literal">None</span>, <span class="number">2</span>]], dtype=<span class="built_in">object</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc.get_feature_names_out([<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;group&#x27;</span>])</span><br><span class="line">array([<span class="string">&#x27;gender_Female&#x27;</span>, <span class="string">&#x27;gender_Male&#x27;</span>, <span class="string">&#x27;group_1&#x27;</span>, <span class="string">&#x27;group_2&#x27;</span>, <span class="string">&#x27;group_3&#x27;</span>], ...)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7、标签编码"><a href="#7、标签编码" class="headerlink" title="7、标签编码"></a>7、标签编码</h4><blockquote><p>对值介于0和n_classes-1之间的目标标签进行编码。根据字符串形式的特征值在特征序列中的位置，为其指定一个数字标签，用于提供给基于数值算法的学习模型。该转换器应用于编码目标值，即y，而不是输入X。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">API：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.preprocessing.LabelEncoder()</span><br><span class="line">无参数</span><br><span class="line">属性：</span><br><span class="line">classes_：ndarray of shape (n_classes,)：保存每个类的标签。</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> sp</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>raw_samples = np.array([</span><br><span class="line"><span class="meta">... </span>   <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;ford&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>   <span class="string">&#x27;ford&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;ford&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>   <span class="string">&#x27;audi&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(raw_samples)</span><br><span class="line">lbe = sp.LabelEncoder()</span><br><span class="line">lbe_samples = lbe.fit_transform(raw_samples)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(lbe_samples)</span><br><span class="line">inv_samples = lbe.inverse_transform(lbe_samples)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(inv_samples)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8、常用"><a href="#8、常用" class="headerlink" title="8、常用"></a>8、常用</h4><div class="table-container"><table><thead><tr><th>类名</th><th>方法名</th></tr></thead><tbody><tr><td>sklearn.preprocessing.Binarizer()</td><td>sklearn.preprocessing.binarize()</td></tr><tr><td>sklearn.preprocessing.LabelBinarizer()</td><td>sklearn.preprocessing.label_binarize()</td></tr><tr><td>sklearn.preprocessing.MaxAbsScaler()</td><td>sklearn.preprocessing.maxabs_scale()</td></tr><tr><td>sklearn.preprocessing.MinMaxScaler()</td><td>sklearn.preprocessing.minmax_scale()</td></tr><tr><td>sklearn.preprocessing.Normalizer()</td><td>sklearn.preprocessing.normalize()</td></tr><tr><td>sklearn.preprocessing.StandardScaler()</td><td>sklearn.preprocessing.scale()</td></tr><tr><td>sklearn.preprocessing.RobustScaler()</td><td>sklearn.preprocessing.robust_scale()</td></tr></tbody></table></div><h2 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h2><blockquote><p>回归问题是一种常见的监督机器学习任务，在很多领域均有广泛应用。其典型应用包括销量预测、库存预测、股票价格预测、天气预测等</p><p>大纲：</p><p>线性回归模型的目标函数（损失函数和正则函数）、线性回归模型的优化求解、回归任务的性能指标、线性回归模型的超参数调优以及使用sklearn实现线性回归模型的应用案例。</p></blockquote><h3 id="1、线性回归简介"><a href="#1、线性回归简介" class="headerlink" title="1、线性回归简介"></a>1、线性回归简介</h3><blockquote><p>回归分析：回归分析法指利用数据统计原理，对大量统计数据进行数学处理，并确定因变量y与某些自变量x的相关关系，建立一个相关性较好的回归方程（函数表达式），并加以外推，用于预测今后的因变量的变化分析方法。回归的目标是学习一个输入x到输出y的映射f，并根据该模型预测新的测试数据x对应的响应y=f(x)’公式：</p></blockquote><script type="math/tex; mode=display">f(x,w)=w^T+b</script><h3 id="2、一元线性回归"><a href="#2、一元线性回归" class="headerlink" title="2、一元线性回归"></a>2、一元线性回归</h3><p><img src="https://picco.eu.org//img/bizhi20230710153626.png" alt=""></p><p>可以看出来最后求的就是损失函数，获取最小值min    即距离线距离和最短</p><p>可以理解我每一段都需要获取最小值，</p><h5 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h5><blockquote><p>损失函数就是总样本误差关于模型参数的函数，该函数属于三维数学模型，即需要找到一组<code>w0</code>，<code>w1</code>使得loss取极小值。</p><p>核心：找到w0和w1的值，使得预测值和真实值之间的平均差异最小。</p><p>损失：机器学习模型关于单个样本的预测值与真实值的差，损失越小，模型越好；如果预测值与真实值相等，就是没有损失。</p><p>损失函数：用于计算损失的函数模型每一次预测的好坏用损失函数来度量。</p><p>常见的损失函数：</p><p>l 平均平方误差（Mean Squared Error （<code>MSE</code>））：也称为 <code>L2</code> Loss，是机器学习、深度学习回归任务中最常用的一种损失函数，对离群点敏感。</p><p>l 平均绝对误差（ Mean Absolute Error（MAE））：也称为<code>L1</code> Loss，使用绝对值，<code>L1</code>损失对离群点不敏感。</p><p>l 胡伯损失（Huber）：综合了<code>L2</code>损失和<code>L1</code>损失的优点。</p></blockquote><h5 id="线性回归模型的优化求解"><a href="#线性回归模型的优化求解" class="headerlink" title="线性回归模型的优化求解"></a>线性回归模型的优化求解</h5><blockquote><p>模型的目标函数确定后，我们就可以采用合适的优化方法寻找最佳的模型参数。在线性回归模型中，模型参数包括线性回归系数<code>w1</code>，和截距<code>w0</code>。当训练数据集不大时，最小二乘线性回归可采用解析求解法求解，解析求解法涉及到大量公式推导，此处暂不做讲解。除此以外还可以使用梯度下降法求解。</p></blockquote><h5 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h5><p>直接求解W</p><p>举例：    </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y <span class="operator">=</span> ax^<span class="number">2</span> + bx +<span class="keyword">c</span></span><br><span class="line">y&#x27; <span class="operator">=</span> <span class="number">2</span>ax + b <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">x</span> <span class="operator">=</span> - b / <span class="number">2</span>a</span><br><span class="line"></span><br><span class="line">同理是矩阵求导<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="梯度下降（Gradient-Descent）"><a href="#梯度下降（Gradient-Descent）" class="headerlink" title="梯度下降（Gradient Descent）"></a>梯度下降（Gradient Descent）</h5><blockquote><p>梯度下降法是求解无约束优化问题最常用的方法之一，亦被称为最速下降法。最小二乘回归和岭回归均可采用梯度下降法求解，Lasso回归由于目标函数中有L1正则函数而不可导，因此不能采用梯度下降法求解。梯度下降法是一种基于搜索的最优化方法，在机器学习中，熟练的使用梯度法（下降法或上升法）求取目标函数的最优解是非常重要的。线性回归算法模型的本质就是最小化一个损失函数，然后求出损失函数的参数的数学解； 梯度下降法是在机器学习领域中最小化损失函数的最为常用的方法。</p></blockquote><p><img src="https://picco.eu.org//img/bizhi/20230710205448.png" alt=""></p><blockquote><p>假如你迷失在山上的浓雾之中，完全看不见下山的方向，你能感觉到的只有脚下的路面坡度。快速到达山脚的一个策略就是沿着最陡的方向下坡。这就是梯度下降的做法：通过测量参数向量θ相关的损失函数的局部梯度，并不断沿着降低梯度的方向调整，直到梯度将为0，达到最小值！ 每下降一步都去选择最陡峭的方向，然后踏出一步。因此没迭代一次需要考虑两个变量，一个是方向（朝哪边走），一个是步长（走多少）。方向就是向量θ的斜率，步长是一个超参数叫做学习率（learning_rate）。</p></blockquote><p>==<strong>学习速率（learning_rate）</strong>==</p><blockquote><p>学习率是一个超参数，学习率的取值会影响获得最优解的速度; 太小，算法需要经过大量迭代才能收敛，这将耗费很长时间；反过来学习率太大，可能会越过最小值直接到达另一边，甚至有可能比之前的起点还要高，这会导致算法发散，值越来越大，无法找到最优解。学习率是超参数需要手动调节，取值范围一般在[0, 1]之间。下图展示了不同学习率对梯度下降的影响。</p></blockquote><p><img src="https://picco.eu.org//img/bizhi/20230710205526.png" alt=""></p><h3 id="3、回归相关API"><a href="#3、回归相关API" class="headerlink" title="3、回归相关API"></a>3、回归相关<code>API</code></h3><blockquote><p><code>sklearn.linear_model</code>模块下提供了线性分类器（Linear classifiers）和经典线性回归（Classical linear regressors）两种问题的实现类。其中Linear classifiers中的类是用线性回归的思想解决分类问题的，其中包含了逻辑回归分类器（<code>LogisticRegression</code>），岭回归分类器（<code>RidgeClassifier</code>），交叉验证逻辑回归分类器（<code>RidgeClassifierCV</code>），线性感知器分类器（<code>Perceptron</code>），<code>SGD</code>训练的线性分类器（<code>SGDClassifier</code>）等多种分类器。Classical linear regressors模块中提供了线性回归（<code>LinearRegression</code>），岭回归（Ridge），交叉验证岭回归（<code>RidgeCV</code>），随机梯度下降回归（<code>SGDRegressor</code>）。除此以外还有带有变量选择的回归器（Regressors with variable selection）；贝叶斯回归（Bayesian regressors）；具有变量选择的多任务线性回归器（Multi-task linear regressors with variable selection）；离群稳健回归（<code>Outlier-robust regressors</code>）；回归的广义线性模型（Generalized linear models (<code>GLM</code>) for regression）；混合模型（Miscellaneous）等。</p></blockquote><p>==1.<strong><code>LinearRegression()</code></strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">普通最小二乘线性回归。线性回归拟合系数w=（w1，…，wp）的线性模型，以最小化数据集中观察到的目标与线性近似预测的目标之间的残差平方和。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">sklearn.linear_model.LinearRegression(*, fit_intercept=<span class="literal">True</span>, normalize=<span class="literal">False</span>, copy_X=<span class="literal">True</span>, n_jobs=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td>fit_intercept</td><td>是否计算此模型的截距。如果设置为False，则不会在计算中使用截距（即，预计数据将居中）。</td></tr><tr><td>normalize</td><td>当fit_intercept设置为False时，将忽略此参数。如果为True，则回归前将通过减去平均值并除以l2范数对回归X进行归一化。如果您希望标准化，请在对normalize=False的估计器调用fit之前使用StandardScaler。</td></tr><tr><td>copy_X</td><td>如果为True，将复制X；否则，可能会被覆盖。</td></tr><tr><td>n_jobs</td><td>用于计算的作业数</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>coef_</td><td>系数。形状为（n_features，）或（n_targets，n_features）的数组</td></tr><tr><td>rank_</td><td>矩阵的等级X</td></tr><tr><td>intercept_</td><td>截距</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>fit(X, y)</td><td>拟合线性模型</td></tr><tr><td>get_params([deep])</td><td>获取此估计器的参数。</td></tr><tr><td>predict(X)</td><td>使用线性模型进行预测。</td></tr><tr><td>score(X, y)</td><td>返回预测的确定系数。</td></tr><tr><td>set_params()</td><td>设置此估计器的参数。</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例代码：</span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="comment"># 创建模型</span></span><br><span class="line">model = lm.LinearRegression()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 输入为一个二维数组表示的样本矩阵</span></span><br><span class="line"><span class="comment"># 输出为每个样本最终的结果</span></span><br><span class="line">model.fit(输入, 输出) <span class="comment"># 通过梯度下降法计算模型参数</span></span><br><span class="line"><span class="comment"># 预测输出  </span></span><br><span class="line"><span class="comment"># 输入array是一个二维数组，每一行是一个样本，每一列是一个特征。</span></span><br><span class="line">result = model.predict(array)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==2.<strong><code>SGDRegressor()</code></strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">通过SGD最小化正则化经验损失拟合的线性模型。SGD代表随机梯度下降：一次估计每个样本的损失梯度，并以递减的强度计划（即学习率）更新模型。正则化器是添加到损失函数的惩罚，其使用平方欧几里德范数L2或绝对范数L1或两者的组合（弹性网）将模型参数收缩到零向量。如果参数更新由于正则化器而与0.0值交叉，则更新将被截断为0.0，以允许学习稀疏模型并实现在线特征选择。此实现可以处理表示为特征浮点值密集numpy数组的数据。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.linear_model.SGDRegressor(loss=<span class="string">&#x27;squared_error&#x27;</span>, *, penalty=<span class="string">&#x27;l2&#x27;</span>, alpha=<span class="number">0.0001</span>, l1_ratio=<span class="number">0.15</span>, fit_intercept=<span class="literal">True</span>, max_iter=<span class="number">1000</span>, tol=<span class="number">0.001</span>, shuffle=<span class="literal">True</span>, verbose=<span class="number">0</span>, epsilon=<span class="number">0.1</span>, random_state=<span class="literal">None</span>, learning_rate=<span class="string">&#x27;invscaling&#x27;</span>, eta0=<span class="number">0.01</span>, power_t=<span class="number">0.25</span>, early_stopping=<span class="literal">False</span>, validation_fraction=<span class="number">0.1</span>, n_iter_no_change=<span class="number">5</span>, warm_start=<span class="literal">False</span>, average=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>loss</td><td>损失函数，str，默认值为：squared_error，可选：‘squared_error’,  ‘huber’, ‘epsilon_insensitive’, or ‘squared_epsilon_insensitive’</td></tr><tr><td>penalty</td><td>正则项，可选：{‘l2’,  ‘l1’, ‘elasticnet’}, 默认值为’l2’</td></tr><tr><td>alpha</td><td>正则强度，浮点型，默认值为：0.0001。值越大，正则化越强。</td></tr><tr><td>fit_intercept</td><td>是否计算截距，布尔型，默认值为：True。是否应估计截距。如果为False，则假定数据已居中。</td></tr><tr><td>learning_rate</td><td>学习率，字符串，默认值为：invscaling，不按比例缩放。</td></tr><tr><td>eta0</td><td>学习率的初始值，浮点型，  ‘constant’, ‘invscaling’ or ‘adaptive’初始学习率，默认为0.01</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>coef_</td><td>指定要素的权重斜率。</td></tr><tr><td>intercept_</td><td>截距项。</td></tr><tr><td>n<em>iter</em></td><td>达到停止标准之前的实际迭代次数。</td></tr><tr><td>t_</td><td>训练期间执行的体重更新次数</td></tr><tr><td>n<em>features_in</em></td><td>装配过程中看到的特征数量。</td></tr><tr><td>feature<em>names_in</em></td><td>装配过程中看到的特征名称。仅当X具有全部字符串的要素名称时才定义。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>fit(X, y)</td><td>用随机梯度下降拟合线性模型。</td></tr><tr><td>predict(X)</td><td>使用模型预测</td></tr><tr><td>get_params(deep=True)</td><td>获取此估计器的参数。</td></tr><tr><td>sparsify()</td><td>将系数矩阵转换为稀疏格式。</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDRegressor</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n_samples, n_features = <span class="number">10</span>, <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = rng.randn(n_samples)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = rng.randn(n_samples, n_features)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Always scale the input. The most convenient way is to use a pipeline.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reg = make_pipeline(StandardScaler(),</span><br><span class="line"><span class="meta">... </span>                    SGDRegressor(max_iter=<span class="number">1000</span>, tol=<span class="number">1e-3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reg.fit(X, y)</span><br><span class="line">Pipeline(steps=[(<span class="string">&#x27;standardscaler&#x27;</span>, StandardScaler()),</span><br><span class="line">                (<span class="string">&#x27;sgdregressor&#x27;</span>, SGDRegressor())])</span><br></pre></td></tr></table></figure><h3 id="4、案例实战：加利福尼亚房屋价格回归分析"><a href="#4、案例实战：加利福尼亚房屋价格回归分析" class="headerlink" title="4、案例实战：加利福尼亚房屋价格回归分析"></a>4、案例实战：加利福尼亚房屋价格回归分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="keyword">as</span> sl</span><br><span class="line"></span><br><span class="line">data = sd.fetch_california_housing()</span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">查看形状</span></span><br><span class="line"><span class="string">x.shape</span></span><br><span class="line"><span class="string">y.shape</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">数据介绍</span></span><br><span class="line"><span class="string">print(data[&#x27;DESCR&#x27;])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 数据已经处理好了不需要进行特征工程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分：训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = sm.train_test_split(x, y, train_size=<span class="number">0.75</span>, test_size=<span class="number">0.25</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">145</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里:</span></span><br><span class="line"><span class="string">train_size + test_size = 1</span></span><br><span class="line"><span class="string">shuffle = True 混洗</span></span><br><span class="line"><span class="string">random_state = 145随机数种子</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">model = sl.LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">预测这里主要看的就是看预测值与测试值之间的区别</span></span><br><span class="line"><span class="string">预测值:</span></span><br><span class="line"><span class="string">array([0.0696445 , 0.61678432, 2.02419006, ..., 1.9095006 , 2.67847098,</span></span><br><span class="line"><span class="string">       2.07215543])</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">测试值:</span></span><br><span class="line"><span class="string">array([0.988, 1.572, 1.609, ..., 1.361, 2.727, 3.167])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line">sm.mean_squared_error(test_y, pred_y)<span class="comment">#0.5406765977332207</span></span><br></pre></td></tr></table></figure><p>从上面可以看出来随机数种子的选择和对测试集和训练集的划分对最后模型的评估有着很重要的作用</p><h3 id="5、回归模型评价指标"><a href="#5、回归模型评价指标" class="headerlink" title="5、回归模型评价指标"></a>5、回归模型评价指标</h3><p>sklearn度量模块实现了几个损失、分数和效用函数来度量回归性能。其中一些已被增强以处理多输出情况：mean_squared_error、mean_absolute_error，r2_score，explained_variance_score、mean_pinball_loss、d2_pinball_score和d2_absolute _error_score。</p><div class="table-container"><table><thead><tr><th>方法名称</th><th>最优值</th><th>sklearn函数</th></tr></thead><tbody><tr><td>平均绝对误差</td><td>0.0</td><td>metrics. mean_absolute_error(y_true, y_pred)</td></tr><tr><td>平均均方误差</td><td>0.0</td><td>metrics. mean_squared_error(y_true, y_pred)</td></tr><tr><td>均方对数误差</td><td>0.0</td><td>metrics.mean_squared_log_error(y_true, y_pred)</td></tr><tr><td>中位绝对误差</td><td>0.0</td><td>metrics. median_absolute_error(y_true, y_pred)</td></tr><tr><td>最大误差</td><td>0.0</td><td>metrics.max_error(y_true, y_pred)</td></tr><tr><td>可解释方差值</td><td>1.0</td><td>metrics. explained_variance_score(y_true,  y_pred)</td></tr><tr><td>R方值</td><td>1.0</td><td>metrics. r2_score(y_true, y_pred)</td></tr></tbody></table></div><p>示例：</p><p>线性回归模型训练完毕后，可以利用测试集评估训练结果误差。sklearn.metrics提供了计算模型误差的几个常用算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 平均绝对值误差：1/m∑|实际输出-预测输出|</span></span><br><span class="line"> sm.mean_absolute_error(test_y, pred_y)</span><br><span class="line"><span class="comment"># 平均平方误差：SQRT(1/mΣ(实际输出-预测输出)^2)</span></span><br><span class="line"> sm.mean_squared_error(test_y, pred_y)</span><br><span class="line"><span class="comment"># 中位绝对值误差：MEDIAN(|实际输出-预测输出|)</span></span><br><span class="line"> sm.median_absolute_error(test_y, pred_y)</span><br><span class="line"><span class="comment"># 解释方差回归评分：最好分数是 1.0，越低模型越不好</span></span><br><span class="line"> sm.explained_variance_score(test_y, y_pred)</span><br><span class="line"><span class="comment"># R2得分，(0,1]区间的分值,分数越高，误差越小。</span></span><br><span class="line"> sm.r2_score(test_y, pred_y)</span><br></pre></td></tr></table></figure><h3 id="6、过拟合和欠拟合"><a href="#6、过拟合和欠拟合" class="headerlink" title="6、过拟合和欠拟合"></a>6、过拟合和欠拟合</h3><p>欠拟合</p><ul><li>原因: 学习导数据的特征过少</li><li>解决办法: 增加数据的特征数量</li></ul><p>过于简单的模型，无论对于训练数据还是测试数据都无法给出足够高的预测精度，这种现象叫做欠拟合。</p><p>过拟合</p><ul><li>原因: 原始特征过多，存在一些嘈杂特征，模型过于复杂是因为模型查实去兼顾各个测试数据点</li><li>解决办法: 正则化</li></ul><p>过于复杂的模型，对于训练数据可以得到较高的预测精度，但对于测试数据通常精度较低，这种现象叫做过拟合。</p><p>一个性能可以接受的学习模型应该对训练数据和测试数据都有接近的预测精度，而且精度不能太低。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">训练集R2  测试集R2</span><br><span class="line"> <span class="number">0.3</span>    <span class="number">0.4</span>    欠拟合：过于简单，无法反映数据的规则</span><br><span class="line"> <span class="number">0.9</span>    <span class="number">0.2</span>    过拟合：过于复杂，太特殊，缺乏一般性</span><br><span class="line"> <span class="number">0.7</span>    <span class="number">0.6</span>    可接受：复杂度适中，既反映数据的规则，同时又不失一般性</span><br></pre></td></tr></table></figure><h3 id="7、多元线性回归"><a href="#7、多元线性回归" class="headerlink" title="7、多元线性回归"></a>7、多元线性回归</h3><p>在回归分析中，如果有两个或两个以上的自变量，就称为多元回归。</p><p>例如房屋价格预测，其中房屋价格会受到房屋面积，卧室数量，楼层，房屋年限等多种因素的影响，每个自变量对价格（因变量）的影响程度不一样</p><p><img src="https://picco.eu.org//img/bizhi/20230710205809.png" alt=""></p><h3 id="8、多项式回归"><a href="#8、多项式回归" class="headerlink" title="8、多项式回归"></a>8、多项式回归</h3><blockquote><p>如果数据比直线更复杂怎么办？可以使用线性模型来拟合非线性数据。一个简单的方法就是将每个特征的幂次方添加为一个新特征，然后在此扩展特征集上训练一个线性模型。这种技术称为多项式回归。</p></blockquote><h3 id="9、正则化线性模型"><a href="#9、正则化线性模型" class="headerlink" title="9、正则化线性模型"></a>9、正则化线性模型</h3><blockquote><p>减少过拟合的一个好方法是对模型进行正则化（即约束模型）：它拥有的自由度越少，则过拟合数据的难度就越大。</p><p>多项式模型正则化的一种简单方法是减少多项式的次数。</p><p>线性模型正则化通常是通过约束模型的权重来实现的。</p><p>岭回归、Lasso回归和弹性网络，它们实现了三种限制权重的方法</p></blockquote><p>我的理解就是数据种有脏数据，有异常值即过大或过小，而正则化就是排除这些异常</p><p>各个范式的理解：</p><p>​    <a href="https://blog.csdn.net/vincent_duan/article/details/117305250">https://blog.csdn.net/vincent_duan/article/details/117305250</a></p><ul><li><p>==<strong>岭回归</strong>==</p><p>岭回归也称为Tikhonov正则化，是线性回归的正则化版本。普通线性回归模型使用基于梯度下降的最小二乘法，在最小化损失函数的前提下，寻找最优模型参数，于此过程中，包括<strong>少数异常样本</strong>在内的全部训练数据都会对最终模型参数造成程度相等的影响，异常值对模型所带来影响<strong>无法在训练过程中</strong>被识别出来。为此，岭回归在模型迭代过程所依据的损失函数中<strong>增加了正则项</strong>，以限制模型参数对异常样本的匹配程度，进而提高模型面对多数正常样本的拟合精度。</p><p>​    线性回归+L2正则项：Ridge 回归（岭回归）</p><ol><li>超参数γ控制要对模型进行正则化的程度。如果γ=0，则岭回归仅是线性回归。如果γ非常大，则所有权重最终都非常接近于零，结果是一条经过数据均值的平线。</li><li>在执行岭回归之前缩放数据（例如使用StandardScaler）很重要，因为它对输入特征的缩放敏感</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 岭回归API：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sklearn</span>.linear_model.Ridge(alpha=<span class="number">1.0</span>, *, fit_intercept=<span class="literal">True</span>, copy_X=<span class="literal">True</span>, max_iter=<span class="literal">None</span>, tol=<span class="number">0.0001</span>, solver=<span class="string">&#x27;auto&#x27;</span>, positive=<span class="literal">False</span>, random_state=<span class="literal">None</span>, normalize=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>normalize设置为True相当于先进行了一次标准化</li><li>alpha是正则化力度，取值: 0-1 1-10</li><li>solver:会根据数据自动选择优化方法<ul><li>sag:如果数据集、特征都比较大，选择该随机梯度下降优化</li></ul></li></ul></li><li><p>==<strong>Lasso 回归</strong>==</p><p>线性回归+L1正则项：Lasso 回归（套索回归）</p><p>与岭回归一样，它也是向成本函数添加一个正则项，但是它增加的是权重向量的L1范数，而不是L2范数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rom sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"></span><br><span class="line">linear_model.Lasso(alpha=<span class="number">1.0</span>, *, fit_intercept=<span class="literal">True</span>, normalize=<span class="literal">False</span>, precompute=<span class="literal">False</span>, copy_X=<span class="literal">True</span>, max_iter=<span class="number">1000</span>, tol=<span class="number">0.0001</span>, warm_start=<span class="literal">False</span>, positive=<span class="literal">False</span>, random_state=<span class="literal">None</span>, selection=<span class="string">&#x27;cyclic&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>==<strong>弹性网络</strong>==</p><p>弹性网络是介于岭回归和Lasso回归之间的中间地带。正则项是岭和Lasso正则项的简单混合，可以控制混合比ρ。</p><ul><li><p>当ρ=0时，弹性网络等效于岭回归；</p></li><li><p>当ρ=1时，弹性网络等于Lasso回归；</p></li></ul><blockquote><p>那么什么时候使用普通的线性回归岭、Lasso或弹性网络呢？通常，有正则化，哪怕很小，总比没有更可取一些，所以大部分情况下，应该避免使用纯线性回归。岭回归是个不错的默认选择，但是如果实际用到的特征只有少数几个，那就应该更倾向于Lasso回归或者弹性网络，因为它们会将无用特征的权重降为零。一般，弹性网络优于Lasso回归，因为当特征数量超过训练实例数量，又或者是几个特征强相关时，Lasso回归的表现可能非常不稳定。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> ElasticNet</span><br><span class="line"></span><br><span class="line">ElasticNet(alpha=<span class="number">1.0</span>, *, l1_ratio=<span class="number">0.5</span>, fit_intercept=<span class="literal">True</span>, normalize=<span class="literal">False</span>, precompute=<span class="literal">False</span>, max_iter=<span class="number">1000</span>, copy_X=<span class="literal">True</span>, tol=<span class="number">0.0001</span>, warm_start=<span class="literal">False</span>, positive=<span class="literal">False</span>, random_state=<span class="literal">None</span>, selection=<span class="string">&#x27;cyclic&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><blockquote><p>逻辑回归分类模型是一种基于回归思想实现分类业务的分类模型。</p><p>逻辑回归的工作原理：与线性回归模型一样，逻辑回归模型也是计算输入特征的加权和（加上偏置项），但是不同于线性回归模型直接输出结果，它输出的是结果的数理逻辑。分类问题可以分为二元分类（OvO:one-versus-all）和多元分类(OvR:one-versus-all)。</p><p> <img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230711084936733.png" alt="image-20230711084936733"></p><p>逻辑回归做二元分类时的核心思想为： </p><p>针对输出为{0, 1}的已知训练样本训练一个回归模型，使得训练样本的预测输出限制在(0, 1)的数值区间。该模型使原类别为0的样本的输出更接近于0，原类别为1的样本的输出更接近于1。这样就可以使用相同的回归模型来完成分类预测。</p></blockquote><h3 id="1、逻辑回归原理"><a href="#1、逻辑回归原理" class="headerlink" title="1、逻辑回归原理"></a>1、逻辑回归原理</h3><p>逻辑回归目标函数：</p><script type="math/tex; mode=display">逻辑函数(sigmoid)：y=1/(1+e^(-z) ); z=w^T x+b</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑回归相关API：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm<span class="comment"># logist:逻辑</span></span><br><span class="line"><span class="comment"># 构建逻辑回归器 </span></span><br><span class="line"><span class="comment"># solver：逻辑函数中指数的函数关系（liblinear为线型函数关系）</span></span><br><span class="line"><span class="comment"># C：参数代表正则强度，为了防止过拟合。正则越大拟合效果越小。</span></span><br><span class="line">model = lm.LogisticRegression(solver=<span class="string">&#x27;liblinear&#x27;</span>, C=正则强度)</span><br><span class="line">model.fit(训练输入集，训练输出集)</span><br><span class="line">result = model.predict(带预测输入集)</span><br></pre></td></tr></table></figure><h3 id="2、交叉验证"><a href="#2、交叉验证" class="headerlink" title="2、交叉验证"></a>2、交叉验证</h3><blockquote><p>在机器学习中，因为训练集和测试集的数据划分是随机的，所以有时会重复地使用数据，以便更好地评估模型的有效性，并选出最好的模型，该做法称为交叉验证。具体而言就是对原始样本数据进行切分，然后组合成为多组不同的训练集和测试集，用训练集训练模型，用测试集评估模型。某次的训练集可能是下次的测试集，故而称为交叉验证。</p><p>交叉验证的方法有简单交叉验证、K折交叉验证和留一交叉验证3种。其中K折交叉验证应用较为广泛，它是指将数据集随机等分为K份，每次选取K-1份作为训练集，用剩下的1份作为测试集，得到K个模型后将这K个模型的平均测试效果作为最终的模型效果。</p><p> 通常来说，如果训练集相对较小，则增大K值，这样在每次迭代过程中将会有更多数据用于模型训练，同时算法时间延长；如果训练集相对较大，则减小K值，这样可以降低模型在不同的数据块上进行重复拟合性能评估的计算成本，在平均性能的基础上获得模型的准确评估。</p><p> 除了更精确地评估模型，交叉验证的另一个重要作用就是利用更精确的评估结果对模型进行参数调优，它经常与<code>GridSearch</code>网格搜索配合使用。</p></blockquote><p>就是把将训练集分为不同的折，然后将测试集交叉放进去与训练集拟合，好处就是可以学到训练集的细节</p><p><img src="C:\Users\beihai\Desktop\grid_search_cross_validation.png" alt="grid_search_cross_validation"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sklearn提供了交叉验证相关API：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line">指标值数组 = ms.cross_val_score(模型, 输入集, 输出集, cv=折叠数, scoring=指标名)</span><br></pre></td></tr></table></figure><h3 id="3、数据集划分"><a href="#3、数据集划分" class="headerlink" title="3、数据集划分"></a>3、数据集划分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据集划分相关API：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> ms</span><br><span class="line"> </span><br><span class="line"> X_train, X_test, y_train, y_test = ms.train_test_split(X, y, test_size=测试集占比, random_state=随机种子)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>*arrays</td><td>接收一个或多个数据集。代表需要划分的数据集，若为分类回归则分别传入数据和标签，若为聚类则传入数 据。无默认。</td></tr><tr><td>test_size</td><td>接收float，int，None类型的数据。代表测试集的大小。如果传入的为float类型的数据则需要限定在0-1之 间，代表测试集在总数中的占比；如果传入为int类型的数据，则表示测试集记录的绝对数目。该参数与  train_size可以只传入一个。在0.21版本前，若test_size和train_size均为默认则testsize为25%。</td></tr><tr><td>train_size</td><td>接收float，int，None类型的数据。代表训练集的大小。该参数与test_size可以只传入一个。</td></tr><tr><td>random_state</td><td>接收int。代表随机种子编号，相同随机种子编号产生相同的随机结果，不同的随机种子编号产生不同的随机结果。默认为None。random_state就是为了保证程序每次运行都分割一样的训练集合测试集。</td></tr><tr><td>shuffle</td><td>接收boolean。代表是否进行有放回抽样。若该参数取值为True则stratify参数必须不能为空。</td></tr><tr><td>stratify</td><td>接收array或者None。如果不为None，则使用传入的标签进行分层抽样。</td></tr></tbody></table></div><p>train_test_split是最常用的数据划分方法，在model_selection模块中还提供了其他数据集划分的函数，如<code>PredefinedSplit</code>，<code>ShuffleSplit</code>等。</p><p>划分训练集和测试集在某种程度上也是为了检查模型是否出现过拟合。过拟合指模型在训练样本中拟合程度过高，虽然它很好地契合了训练集数据，但是却丧失了泛化能力，因而不具有推广性，导致在测试集数据中的预测表现不佳。就好比每次模考都做同一份卷子，训练时得分很高，但是期末考试换了一套卷子就得分很低。而划分训练集和测试集可以用来对模型进行更好的检验。</p><h3 id="4、模型搭建"><a href="#4、模型搭建" class="headerlink" title="4、模型搭建"></a>4、模型搭建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模型的搭建相对比较容易，逻辑回归相关API：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.linear_model <span class="keyword">as</span> lm</span><br><span class="line"> <span class="comment"># 构建逻辑回归器 </span></span><br><span class="line"> <span class="comment"># solver：逻辑函数中指数的函数关系（liblinear为线型函数关系）</span></span><br><span class="line"> <span class="comment"># C：参数代表正则强度，反值，为了防止过拟合。正则越大拟合效果越小。</span></span><br><span class="line"></span><br><span class="line"> model = lm.LogisticRegression(solver=<span class="string">&#x27;liblinear&#x27;</span>, C=正则强度)</span><br><span class="line"> model.fit(X_train，y_train)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果这里solver不选择liblinear 会默认选择 lbfgs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">官网这样说的：The ‘newton-cg’, ‘sag’, and ‘lbfgs’ solvers support only L2 regularization with primal formulation, or no regularization. The ‘liblinear’ solver supports both L1 and L2 regularization, with a dual formulation only for the L2 penalty. The Elastic-Net regularization is only supported by the ‘saga’ solver.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5、分类问题模型评估"><a href="#5、分类问题模型评估" class="headerlink" title="5、分类问题模型评估"></a>5、分类问题模型评估</h3><ul><li><p>==<strong>一级指标</strong>==</p><blockquote><p>分类模型的评价指标：真假与正类负类</p><p>a. 真正例(TP) 是指模型将正类别样本正确地预测为正类别。</p><p>b. 真负例(TN) 是指模型将负类别样本正确地预测为负类别。</p><p>c. 假正例(FP) 是指模型将负类别样本错误地预测为正类别。</p><p>d. 假负例(FN) 是指将正类别样本错误地预测为负类别。</p></blockquote><p><strong>混淆矩阵</strong></p><p>混淆矩阵（也称误差矩阵，Confusion Matrix）就是分别统计分类模型归错类，归对类的观测值个数，然后把结果放在一个表里展示出来。这个表就是混淆矩阵。</p><p>|        |          | 真实值      | 真实值      |<br>| ——— | ———— | —————- | —————- |<br>|        |          | Positive    | Negative    |<br>| 预测值 | Positive | 真正例（TP) | 假正例（FP) |<br>| 预测值 | Negative | 假负例（FN) | 真负例（TN) |</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取模型分类结果的混淆矩阵的相关API：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.metrics <span class="keyword">as</span> sm</span><br><span class="line">混淆矩阵 = sm.confusion_matrix(实际输出, 预测输出)</span><br></pre></td></tr></table></figure></li><li><p>==<strong>二级指标</strong>==</p><p>准确率(accuracy)：是指模型预测正确的样本数比上总样本数的比重。</p><p>计算公式：accuracy = (TP + TN) / (TP + TN + FP + FN)</p><p>精确率(precision_weighted)：针对每一个类别，预测正确的样本数比上预测出来的样本数。</p><p> 计算公式：precision_weighted = TP / TP + FP</p><p>召回率(recall_weighted)：针对每一个类别，预测正确的样本数比上实际存在的样本数。</p><p>​       计算公式：recall_weighted = TP / TP + FN</p><p>   某池塘有1400条鲤鱼，300只虾，300只鳖。现在以捕鲤鱼为目的。 撒一大网，逮着了700条鲤鱼，200只虾，100只鳖。那么，这些指标 分别如下：<br> 精确率 = 700 / (700 + 200 + 100) = 70%<br> 召回率 = 700 / 1400 = 50%<br> F值 = 70% <em> 50% </em> 2 / (70% + 50%) = 58.3%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">sm.accuracy_score(test_y, pred_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确率</span></span><br><span class="line">sm.precision_score(test_y, pred_y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这里会报错：</span></span><br><span class="line"><span class="string">ValueError: Target is multiclass but average=&#x27;binary&#x27;. Please choose another average setting, one of [None, &#x27;micro&#x27;, &#x27;macro&#x27;, &#x27;weighted&#x27;].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">只需要更改：</span></span><br><span class="line"><span class="string">sm.precision_score(test_y, pred_y, average=None)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 更改为；</span></span><br><span class="line">sm.precision_score(test_y, pred_y, average=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([0.8       , 0.94444444, 1.        ])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确率</span></span><br><span class="line">sm.precision_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9148148148148149</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 召回率</span></span><br><span class="line">sm.recall_score(test_y, pred_y, average=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([0.88888889, 0.89473684, 1.        ])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 召回率</span></span><br><span class="line">sm.recall_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9278752436647174</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>精确率和召回率有一定关系 -&gt;</p><ol><li>精确率是预测正确的比上预测出来的</li><li>召回率是预测正确的比上原来就有的</li><li>记住一个结论：精确率和召回率是此消彼长的关系</li><li>例如：抖音审核，精确率上升，召回率下降</li></ol></li><li><p>==<strong>三级指标</strong>==</p><blockquote><p>•      F1_Score(f1_weighted)：2x精确率x召回率/(精确率+召回率)</p><p>分类模型对测试集进行预测而得出的准确率(accuracy)并不能很好地反映模型的性能，为了有效判断一个预测模型的性能表现，需要结合真实值，计算出精确率(precision_weighted)、召回率(recall_weighted)、F1_Score和Cohen’s Kappa系数等指标来衡量。分值越高越好。</p><p>要全面评估模型的有效性，必须<strong>同时</strong>检查精确率(precision_weighted)和召回率(recall_weighted)。遗憾的是，精确率和召回率往往是此消彼长的情况。也就是说，提高精确率通常会降低召回率值，反之亦然。提高分类阈值，精确率可能会提高（因为FP可能会减小）；召回率会下降或保持不变（因为TP会减少或不变，且FN会增加或不变）。降低分类阈值，精确率可能会下降（因为FP可能会增加），而召回率（FN可能会减少）可能会有所提高。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f1得分  -&gt; 召回率和精确率</span></span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9203413940256047</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类报告</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       0.80      0.89      0.84         9</span></span><br><span class="line"><span class="string">           1       0.94      0.89      0.92        19</span></span><br><span class="line"><span class="string">           2       1.00      1.00      1.00        17</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.93        45</span></span><br><span class="line"><span class="string">   macro avg       0.91      0.93      0.92        45</span></span><br><span class="line"><span class="string">weighted avg       0.94      0.93      0.93        45</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6、红酒分类"><a href="#6、红酒分类" class="headerlink" title="6、红酒分类"></a>6、红酒分类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data = sd.load_wine()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一些数据详情</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&#x27;DESCR&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> ============================= ==== ===== ======= =====</span></span><br><span class="line"><span class="string">                                   Min   Max   Mean     SD</span></span><br><span class="line"><span class="string">    ============================= ==== ===== ======= =====</span></span><br><span class="line"><span class="string">    Alcohol:                      11.0  14.8    13.0   0.8</span></span><br><span class="line"><span class="string">    Malic Acid:                   0.74  5.80    2.34  1.12</span></span><br><span class="line"><span class="string">    Ash:                          1.36  3.23    2.36  0.27</span></span><br><span class="line"><span class="string">    Alcalinity of Ash:            10.6  30.0    19.5   3.3</span></span><br><span class="line"><span class="string">    Magnesium:                    70.0 162.0    99.7  14.3</span></span><br><span class="line"><span class="string">    Total Phenols:                0.98  3.88    2.29  0.63</span></span><br><span class="line"><span class="string">    Flavanoids:                   0.34  5.08    2.03  1.00</span></span><br><span class="line"><span class="string">    Nonflavanoid Phenols:         0.13  0.66    0.36  0.12</span></span><br><span class="line"><span class="string">    Proanthocyanins:              0.41  3.58    1.59  0.57</span></span><br><span class="line"><span class="string">    Colour Intensity:              1.3  13.0     5.1   2.3</span></span><br><span class="line"><span class="string">    Hue:                          0.48  1.71    0.96  0.23</span></span><br><span class="line"><span class="string">    OD280/OD315 of diluted wines: 1.27  4.00    2.61  0.71</span></span><br><span class="line"><span class="string">    Proline:                       278  1680     746   315</span></span><br><span class="line"><span class="string">    ============================= ==== ===== ======= =====</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征值和目标值</span></span><br><span class="line">x = data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">y = data[<span class="string">&#x27;target&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.75</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">model = lm.LogisticRegression(solver=<span class="string">&#x27;liblinear&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这里solver切记要切换模型 不然下面训练模型会出错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([2, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 1, 1, 2, 0, 0, 0, 1,</span></span><br><span class="line"><span class="string">       1, 1, 0, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 1, 2, 2, 0, 2, 0, 0, 2, 2,</span></span><br><span class="line"><span class="string">       1])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对比真实值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([2, 0, 2, 2, 1, 2, 1, 0, 1, 2, 0, 1, 2, 1, 1, 1, 1, 2, 0, 0, 1, 1,</span></span><br><span class="line"><span class="string">       1, 1, 0, 2, 1, 2, 2, 2, 1, 0, 2, 1, 1, 1, 2, 2, 0, 2, 0, 1, 2, 2,</span></span><br><span class="line"><span class="string">       1])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 混淆矩阵</span></span><br><span class="line">sm.confusion_matrix(test_y, pred_y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([[ 8,  1,  0],</span></span><br><span class="line"><span class="string">       [ 2, 17,  0],</span></span><br><span class="line"><span class="string">       [ 0,  0, 17]], dtype=int64)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这里横轴相加为真实值的各个类的总和</span></span><br><span class="line"><span class="string">纵轴相加为预测值的各个类的总和</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="comment"># 准确率</span></span><br><span class="line">sm.accuracy_score(test_y, pred_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确率</span></span><br><span class="line">sm.precision_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9148148148148149</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 召回率</span></span><br><span class="line">sm.recall_score(test_y, pred_y, average=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([0.88888889, 0.89473684, 1.        ])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 召回率</span></span><br><span class="line">sm.recall_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9278752436647174</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f1得分  -&gt; 召回率和精确率</span></span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;macro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9203413940256047</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类报告</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       0.80      0.89      0.84         9</span></span><br><span class="line"><span class="string">           1       0.94      0.89      0.92        19</span></span><br><span class="line"><span class="string">           2       1.00      1.00      1.00        17</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.93        45</span></span><br><span class="line"><span class="string">   macro avg       0.91      0.93      0.92        45</span></span><br><span class="line"><span class="string">weighted avg       0.94      0.93      0.93        45</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><p><strong>决策树模型的几个重要概念：</strong>父节点和子节点、根节点和叶子节点。</p><p>父节点和子节点是相对的，子节点由父节点根据某一规则分裂而来，然后子节点作为新的父节点继续分裂，直至不能分裂为止。</p><p>根节点则和叶子节点是绝对的，根节点是没有父节点的节点，即初始节点，叶子节点则是没有子节点的节点，即最终节点。</p><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230711104500841.png" alt="image-20230711104500841"></p><p><strong>决策树模型的关键：</strong>就是如何选择合适的节点进行分裂。</p><h3 id="1、决策树回归器模型相关API"><a href="#1、决策树回归器模型相关API" class="headerlink" title="1、决策树回归器模型相关API"></a>1、决策树回归器模型相关API</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sklearn.tree <span class="keyword">as</span> st</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 决策树分类模型接口</span></span><br><span class="line"> sklearn.tree.DecisionTreeClassifier(*, criterion=<span class="string">&#x27;gini&#x27;</span>, splitter=<span class="string">&#x27;best&#x27;</span>, max_depth=<span class="literal">None</span>, min_samples_split=<span class="number">2</span>, min_samples_leaf=<span class="number">1</span>, min_weight_fraction_leaf=<span class="number">0.0</span>, max_features=<span class="literal">None</span>, random_state=<span class="literal">None</span>, max_leaf_nodes=<span class="literal">None</span>, min_impurity_decrease=<span class="number">0.0</span>, min_impurity_split=<span class="literal">None</span>, class_weight=<span class="literal">None</span>, ccp_alpha=<span class="number">0.0</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 决策树回归模型接口</span></span><br><span class="line"> sklearn.tree.DecisionTreeRegressor(*, criterion=<span class="string">&#x27;mse&#x27;</span>, splitter=<span class="string">&#x27;best&#x27;</span>, max_depth=<span class="literal">None</span>, min_samples_split=<span class="number">2</span>, min_samples_leaf=<span class="number">1</span>, min_weight_fraction_leaf=<span class="number">0.0</span>, max_features=<span class="literal">None</span>, random_state=<span class="literal">None</span>, max_leaf_nodes=<span class="literal">None</span>, min_impurity_decrease=<span class="number">0.0</span>, min_impurity_split=<span class="literal">None</span>, ccp_alpha=<span class="number">0.0</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>criterion:{“gini”, “entropy”}, default=”gini”</td><td>衡量分类的质量“entropy”代表信息增益,”gini”代表基尼系数</td></tr><tr><td>max_depth</td><td>树的最大深度</td></tr><tr><td>min_samples_split</td><td>一个内部节点需要的最少的样本数</td></tr><tr><td>min_samples_leaf</td><td>一个叶节点所需要的最小样本数</td></tr><tr><td>max_leaf_nodes</td><td>最大叶子节点的值</td></tr><tr><td>class_weight</td><td>类的关联权值</td></tr></tbody></table></div><h3 id="2、鸢尾花回归决策树"><a href="#2、鸢尾花回归决策树" class="headerlink" title="2、鸢尾花回归决策树"></a>2、鸢尾花回归决策树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">data = sd.load_iris()</span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.75</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">model = st.DecisionTreeClassifier()</span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"><span class="comment"># 预测模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘画决策树</span></span><br><span class="line">st.plot_tree(model,feature_names=[<span class="string">&#x27;sepal length&#x27;</span>, <span class="string">&#x27;sepal width&#x27;</span>, <span class="string">&#x27;petal length&#x27;</span>, <span class="string">&#x27;petal width&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看特征的重要性</span></span><br><span class="line">model.feature_importances_</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([0.01786711, 0.        , 0.0329131 , 0.94921978])</span></span><br><span class="line"><span class="string">所以我们选择data的时候只需要后面两列就ok</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230711110745356.png" alt="image-20230711110745356"></p><h2 id="集合算法"><a href="#集合算法" class="headerlink" title="集合算法"></a>集合算法</h2><blockquote><p>集合算法也叫集成学习模型，它是使用一系列弱学习器（也称为基础模型或基模型）进行学习，并将各个弱学习器的结果进行整合，从而获得比单个学习器更好的学习效果。集成学习模型的常见算法有Bagging算法和Boosting算法两种。Bagging算法的典型机器学习模型为随机森林模型，而Boosting算法的典型机器学习模型为：AdaBoost、GBDT、XGBoost和LightGBM模型。</p><p>Bagging算法</p><p>Bagging算法的原理类似投票，每个弱学习器都有一票，最终根据所有弱学习器的投票，按照“少数服从多数”的原则产生最终的预测结果。</p><p>假设原始数据共有10000条，从中随机有放回地抽取10000次数据构成一个新的训练集（因为是随机有放回抽样，所以可能出现某一条数据多次被抽中，也有可能某一条数据一次也没有被抽中），每次使用一个训练集训练一个弱学习器。这样有放回地随机抽取n次后，训练结束时就能获得由不同的训练集训练出的n个弱学习器，根据这n个弱学习器的预测结果，按照“少数服从多数”的原则，获得一个更加准确、合理的最终预测结果。具体来说，在分类问题中是用n个弱学习器投票的方式获取最终结果，在回归问题中则是取n个弱学习器的平均值作为最终结果。</p><p>Boosting算法</p><p>Boosting算法的本质是将弱学习器提升为强学习器，它和Bagging算法的区别在于：Bagging算法对待所有的弱学习器一视同仁；而Boosting算法则会对弱学习器“区别对待”，通俗来讲就是注重“培养精英”和“重视错误”。</p><p>”培养精英”就是每一轮训练后对预测结果较准确的弱学习器给予较大的权重，对表现不好的弱学习器则降低其权重。这样在最终预测时，“优秀模型”的权重是大的，相当于它可以投出多票，而“一般模型”只能投出一票或不能投票。</p><p>“重视错误”就是在每一轮训练后改变训练集的权值或概率分布，通过提高在前一轮被弱学习器预测错误的样例的权值，降低前一轮被弱学习器预测正确的样例的权值，来提高弱学习器对预测错误的数据的重视程度，从而提升模型的整体预测效果。</p></blockquote><h3 id="1、随机森林"><a href="#1、随机森林" class="headerlink" title="1、随机森林"></a>1、随机森林</h3><p>​                随机森林（Random Forest）是一种经典的Bagging模型，其弱学习器为决策树模型。随机森林模型会在原始数据集中随机抽样，构成n个不同的样本数据集，然后根据这些数据集搭建n个不同的决策树模型，最后根据这些决策树模型的平均值（针对回归模型）或者投票情况（针对分类模型）来获取最终结果。为了保证模型的泛化能力（或者说通用能力），随机森林模型在建立每棵树时，往往会遵循<strong>数据随机</strong>和<strong>特征随机</strong>这两个基本原则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随机森林相关API：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.ensemble <span class="keyword">as</span> se</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林回归模型（属于集合算法的一种）</span></span><br><span class="line"><span class="comment"># max_depth：决策树最大深度10</span></span><br><span class="line"><span class="comment"># n_estimators：构建1000棵决策树，训练模型</span></span><br><span class="line"><span class="comment"># min_samples_split: 子表中最小样本数 若小于这个数字，则不再继续向下拆分</span></span><br><span class="line">model = se.RandomForestRegressor(max_depth=<span class="number">10</span>, n_estimators=<span class="number">1000</span>,min_samples_split=<span class="number">2</span>,random_state=<span class="number">7</span>)</span><br><span class="line">model.fit(X,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随集森林分类模型</span></span><br><span class="line">model=RandomForestClassifier(max_depth=<span class="number">10</span>, n_estimators=<span class="number">1000</span>,min_samples_split=<span class="number">2</span>,random_state=<span class="number">7</span>)</span><br><span class="line">model.fit(X,y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==<strong>案例</strong>==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">data = sd.load_iris()</span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.75</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">model = se.RandomForestClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看权重</span></span><br><span class="line">model.feature_importances_</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">array([0.06178603, 0.0128437 , 0.47481514, 0.45055513])</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 稀疏矩阵</span></span><br><span class="line">sm.confusion_matrix(test_y, pred_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.8947368421052632</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">              precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       1.00      1.00      1.00        11</span></span><br><span class="line"><span class="string">           1       0.86      0.86      0.86        14</span></span><br><span class="line"><span class="string">           2       0.85      0.85      0.85        13</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.89        38</span></span><br><span class="line"><span class="string">   macro avg       0.90      0.90      0.90        38</span></span><br><span class="line"><span class="string">weighted avg       0.89      0.89      0.89        38</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、AdaBoost"><a href="#2、AdaBoost" class="headerlink" title="2、AdaBoost"></a>2、AdaBoost</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model <span class="keyword">as</span> lm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble <span class="keyword">as</span> se</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data = sd.load_iris()</span><br><span class="line"></span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.8</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">sgd = lm.SGDClassifier()</span><br><span class="line">model = se.AdaBoostClassifier(estimator=sgd, algorithm=<span class="string">&#x27;SAMME&#x27;</span>, n_estimators=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       1.00      1.00      1.00        11</span></span><br><span class="line"><span class="string">           1       1.00      0.71      0.83        14</span></span><br><span class="line"><span class="string">           2       0.76      1.00      0.87        13</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.89        38</span></span><br><span class="line"><span class="string">   macro avg       0.92      0.90      0.90        38</span></span><br><span class="line"><span class="string">weighted avg       0.92      0.89      0.89        38</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h2><blockquote><p>贝叶斯分类是机器学习中应用极为广泛的分类算法之一，其产生自英国数学家贝叶斯对于逆概问题的思考。朴素贝叶斯是贝叶斯模型当中最简单的一种。</p><p><strong>贝叶斯公式</strong> <strong>: </strong></p><script type="math/tex; mode=display">P(A|B) = P(B|A)P(A) / P(B)</script><p>其中P（A）为事件A发生的概率，P（B）为事件B发生的概率，P（A|B）表示在事件B发生的条件下事件A发生的概率，同理P（B|A）则表示在事件A发生的条件下事件B发生的概率。</p><p><strong>朴素贝叶斯分类是贝叶斯分类中最简单，也是常见的一种分类方法</strong>。</p><script type="math/tex; mode=display">P( Y|X1,X2,...,Xn ) = p( X1,X2,...Xn|Y) P(Y) / P(X1,X2,...Xn)</script><p>朴素贝叶斯模型假设给定目标值后各个特征之间相互独立，分子的计算公式可以写成如下形式:</p><script type="math/tex; mode=display">P( X1,X2,....Xn|Y)P(Y) = P(X1|Y)P(X2|Y)P(X3|Y)...P(Xn|Y)P(Y)</script><p>。其中<code>P（X1|Y）、P（X2|Y）、P（Y）</code>等数据都是已知的，由此可以计算在n个特征变量取不同的值的条件下，目标变量取某个值的概率，并且选择概率更高者对样本进行分类。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#朴素贝叶斯模型相关API:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建高斯分布朴素贝叶斯分类器,它适用于任何连续数值型的数据集。</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> feature_extraction <span class="keyword">as</span> fe</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> naive_bayes <span class="keyword">as</span> nb</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">data = sd.fetch_20newsgroups()</span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line"></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.75</span>, random_state=<span class="number">6</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">transfer = fe.text.TfidfVectorizer()</span><br><span class="line">train_x = transfer.fit_transform(train_x)</span><br><span class="line">test_x = transfer.transform(test_x)</span><br><span class="line"></span><br><span class="line">model = nb.MultinomialNB()</span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"></span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="string">&#x27;micro&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0.8462354188759279</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="支持向量机-SVM"><a href="#支持向量机-SVM" class="headerlink" title="支持向量机(SVM)"></a>支持向量机(SVM)</h2><p><strong>支持向量机</strong>(<strong>SVM</strong>)是一组用于分类、回归和异常值检测的监督学习方法。</p><p>支持向量机的优点是：</p><ul><li><p>在高维空间中有效。</p></li><li><p>在维数大于样本数的情况下仍然有效。</p></li><li><p>在决策函数中使用训练点的子集（称为支持向量），因此它也是内存高效的。</p></li><li><p>通用性：可以为决策函数指定不同的内核函数。提供了通用内核，但也可以指定自定义内核。</p></li></ul><p>支持向量机的缺点包括：</p><ul><li><p>​     如果特征数量远大于样本数量，在选择核函数时避免过度拟合，正则化项至关重要。</p></li><li><p>​      SVM不直接提供概率估计，这些是使用昂贵的五折交叉验证计算的。</p></li></ul><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230711150419453.png" alt="image-20230711150419453"></p><h3 id="分类（SVC）"><a href="#分类（SVC）" class="headerlink" title="分类（SVC）"></a>分类（SVC）</h3><p>SVC，NuSVC、LinearSVC是能够对数据集执行二进制和多类分类的类。</p><p>SVC和NuSVC是类似的方法，但接受的参数集略有不同，并具有不同的数学公式。另一方面，LinearSVC对于线性核的情况，是支持向量分类的另一种（更快）实现。请注意， LinearSVC不接受参数kernel，因为它被假定为线性的。</p><p> 作为其他分类器，SVC、NuSVC和 LinearSVC将两个数组作为输入：一个包含训练样本X的形状数组，以及一个形状类标签（字符串或整数）数组：(n_samples, n_features) y(n_samples)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sklearn.svm.LinearSVC(penalty=<span class="string">&#x27;l2&#x27;</span>, loss=<span class="string">&#x27;squared_hinge&#x27;</span>, *, dual=<span class="literal">True</span>, tol=<span class="number">0.0001</span>, C=<span class="number">1.0</span>, multi_class=<span class="string">&#x27;ovr&#x27;</span>, fit_intercept=<span class="literal">True</span>, intercept_scaling=<span class="number">1</span>, class_weight=<span class="literal">None</span>, verbose=<span class="number">0</span>, random_state=<span class="literal">None</span>, max_iter=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">sklearn.svm.NuSVC(*, nu=<span class="number">0.5</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, degree=<span class="number">3</span>, gamma=<span class="string">&#x27;scale&#x27;</span>, coef0=<span class="number">0.0</span>, shrinking=<span class="literal">True</span>, probability=<span class="literal">False</span>, tol=<span class="number">0.001</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, verbose=<span class="literal">False</span>, max_iter=-<span class="number">1</span>, decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>, break_ties=<span class="literal">False</span>, random_state=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">sklearn.svm.SVC(*, C=<span class="number">1.0</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, degree=<span class="number">3</span>, gamma=<span class="string">&#x27;scale&#x27;</span>, coef0=<span class="number">0.0</span>, shrinking=<span class="literal">True</span>, probability=<span class="literal">False</span>, tol=<span class="number">0.001</span>, cache_size=<span class="number">200</span>, class_weight=<span class="literal">None</span>, verbose=<span class="literal">False</span>, max_iter=-<span class="number">1</span>, decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>, break_ties=<span class="literal">False</span>, random_state=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="回归（SVR）"><a href="#回归（SVR）" class="headerlink" title="回归（SVR）"></a>回归（SVR）</h3><p>支持向量分类的方法可以扩展到解决回归问题。这种方法称为支持向量回归。</p><p>SVM算法非常全面，它不仅支持线性和非线性分类，而且还支持线性和非线性回归。SVM回归要做的就是让尽可能多的实例位于街道上，同时限制间隔违例（也就是不在街道上的实例）。街道的宽度由超参数ε控制，ε值越大，间隔越大；ε值越小，间隔越小。在间隔内添加更多的实例不会影响模型的预测，所以这个模型被称为ε不敏感。</p><p>支持向量分类生成的模型（如上所述）仅依赖于训练数据的一个子集，因为构建模型的成本函数不关心超出边界的训练点。类似地，支持向量回归生成的模型仅依赖于训练数据的一个子集，因为成本函数忽略了预测接近其目标的样本。</p><p>支持向量回归有 3 种不同的实现：<code>SVR、NuSVR和LinearSVR</code>。</p><p><code>LinearSVR</code>提供比<code>SVR</code>(仅考虑线性内核)更快的实现，同时<code>NuSVR</code>实现与<code>SVR</code>略有不同的公式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># API</span></span><br><span class="line"></span><br><span class="line">sklearn.svm.LinearSVR(*, epsilon=<span class="number">0.0</span>, tol=<span class="number">0.0001</span>, C=<span class="number">1.0</span>, loss=<span class="string">&#x27;epsilon_insensitive&#x27;</span>, fit_intercept=<span class="literal">True</span>, intercept_scaling=<span class="number">1.0</span>, dual=<span class="literal">True</span>, verbose=<span class="number">0</span>, random_state=<span class="literal">None</span>, max_iter=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">sklearn.svm.NuSVR(*, nu=<span class="number">0.5</span>, C=<span class="number">1.0</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, degree=<span class="number">3</span>, gamma=<span class="string">&#x27;scale&#x27;</span>, coef0=<span class="number">0.0</span>, shrinking=<span class="literal">True</span>, tol=<span class="number">0.001</span>, cache_size=<span class="number">200</span>, verbose=<span class="literal">False</span>, max_iter=- <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sklearn.svm.NuSVR(*, nu=<span class="number">0.5</span>, C=<span class="number">1.0</span>, kernel=<span class="string">&#x27;rbf&#x27;</span>, degree=<span class="number">3</span>, gamma=<span class="string">&#x27;scale&#x27;</span>, coef0=<span class="number">0.0</span>, shrinking=<span class="literal">True</span>, tol=<span class="number">0.001</span>, cache_size=<span class="number">200</span>, verbose=<span class="literal">False</span>, max_iter=- <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">data = sd.load_iris()</span><br><span class="line">x = data.data</span><br><span class="line">y = data.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.75</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择分类模型</span></span><br><span class="line">model = svm.SVC()</span><br><span class="line"><span class="comment"># 训练分类模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"><span class="comment"># 预测分类模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"><span class="comment"># 分离模型评估</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*****************************************&quot;</span>)</span><br><span class="line">sm.f1_score(test_y, pred_y, average=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">              precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       1.00      1.00      1.00        11</span></span><br><span class="line"><span class="string">           1       0.76      0.93      0.84        14</span></span><br><span class="line"><span class="string">           2       0.90      0.69      0.78        13</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.87        38</span></span><br><span class="line"><span class="string">   macro avg       0.89      0.87      0.87        38</span></span><br><span class="line"><span class="string">weighted avg       0.88      0.87      0.87        38</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*****************************************</span></span><br><span class="line"><span class="string">array([1.        , 0.83870968, 0.7826087 ])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回归模型构建</span></span><br><span class="line">model2 = svm.SVR()</span><br><span class="line"><span class="comment"># 训练回归模型</span></span><br><span class="line">model2.fit(train_x, train_y)</span><br><span class="line">sm.r2_score(test_y, pred_y)</span><br></pre></td></tr></table></figure><h2 id="ROC曲线与AUC指标"><a href="#ROC曲线与AUC指标" class="headerlink" title="ROC曲线与AUC指标"></a>ROC曲线与AUC指标</h2><ul><li><p>AUC只能用来评价二分类</p></li><li><p>AUC非常适合评价样本不平衡中的分类器性能</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score</span><br></pre></td></tr></table></figure><h2 id="模型保存和加载"><a href="#模型保存和加载" class="headerlink" title="模型保存和加载"></a>模型保存和加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">joblib.dump(model, <span class="string">&quot;titanic.pkl&quot;</span>)</span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model2 = joblib.load(<span class="string">&quot;titanic.pkl&quot;</span>)</span><br><span class="line">model2.predict(test_x)</span><br></pre></td></tr></table></figure><h2 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h2><h3 id="K-means聚类"><a href="#K-means聚类" class="headerlink" title="K-means聚类"></a>K-means聚类</h3><p>就是设置K值，在特征空间中随机找K个特征作为聚类中心，然后去找和中心点最近的并标为同一类，全部标为同一颜色后重新寻找这些聚类后的K个中心点，然后重复，当最后聚类的点和初始点一样时候就停止</p><p>API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sklearn.cluster.KMeans(n_clusters=<span class="number">8</span>,init=<span class="string">&#x27;k-means++&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>外部距离最大化，内部距离最小化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 轮廓系数</span></span><br><span class="line">sklearn.metrics.slihouette_score(特征, 预测值)</span><br></pre></td></tr></table></figure><h2 id="信用卡诈骗检测"><a href="#信用卡诈骗检测" class="headerlink" title="信用卡诈骗检测"></a>信用卡诈骗检测</h2><p><img src="C:\Users\beihai\AppData\Roaming\Typora\typora-user-images\image-20230714155343300.png" alt="image-20230714155343300"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">f&quot;C:\\Users\\beihai\\workpace\\金砖\\模块C\\数据\\creditcard.csv&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取目标值和特征值</span></span><br><span class="line">x = data.iloc[:,<span class="number">1</span>:<span class="number">30</span>]</span><br><span class="line">y = data.iloc[:,-<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分训练集和测试集</span></span><br><span class="line">train_x, test_x, train_y, test_y = ms.train_test_split(x, y, train_size=<span class="number">0.8</span>, shuffle=<span class="literal">True</span>, random_state=<span class="number">21</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">print(train_x.shape)</span></span><br><span class="line"><span class="string">print(test_x.shape)</span></span><br><span class="line"><span class="string">(227845, 29)</span></span><br><span class="line"><span class="string">(56962, 29)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line">model = svm.SVC()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模型</span></span><br><span class="line">model.feature_names_in_</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([&#x27;V1&#x27;, &#x27;V2&#x27;, &#x27;V3&#x27;, &#x27;V4&#x27;, &#x27;V5&#x27;, &#x27;V6&#x27;, &#x27;V7&#x27;, &#x27;V8&#x27;, &#x27;V9&#x27;, &#x27;V10&#x27;, &#x27;V11&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;V12&#x27;, &#x27;V13&#x27;, &#x27;V14&#x27;, &#x27;V15&#x27;, &#x27;V16&#x27;, &#x27;V17&#x27;, &#x27;V18&#x27;, &#x27;V19&#x27;, &#x27;V20&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;V21&#x27;, &#x27;V22&#x27;, &#x27;V23&#x27;, &#x27;V24&#x27;, &#x27;V25&#x27;, &#x27;V26&#x27;, &#x27;V27&#x27;, &#x27;V28&#x27;, &#x27;Amount&#x27;],</span></span><br><span class="line"><span class="string">      dtype=object)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">              precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       1.00      1.00      1.00     56853</span></span><br><span class="line"><span class="string">           1       0.91      0.29      0.44       109</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           1.00     56962</span></span><br><span class="line"><span class="string">   macro avg       0.96      0.65      0.72     56962</span></span><br><span class="line"><span class="string">weighted avg       1.00      1.00      1.00     56962</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f1_score评分</span></span><br><span class="line">sm.f1_score(test_y, pred_y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.4444444444444445</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">f&quot;C:\\Users\\beihai\\workpace\\金砖\\模块C\\数据\\creditcard.csv&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">count_classes = pd.value_counts(data[<span class="string">&#x27;Class&#x27;</span>], sort = <span class="literal">True</span>).sort_index()</span><br><span class="line"><span class="built_in">print</span>(count_classes)</span><br><span class="line">count_classes.plot(kind=<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Fraud class histograam&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;Class&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Frequency&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">data[<span class="string">&#x27;normAmount&#x27;</span>] = StandardScaler().fit_transform(data[<span class="string">&#x27;Amount&#x27;</span>].to_numpy().reshape(-<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">data = data.drop([<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;Amount&#x27;</span>], axis = <span class="number">1</span>)</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下采样：使得0 和 1 所占数据一样多</span></span><br><span class="line">x = data.loc[:, data.columns != <span class="string">&#x27;Class&#x27;</span>]</span><br><span class="line">y = data.loc[:, data.columns == <span class="string">&#x27;Class&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(284807, 29)</span></span><br><span class="line"><span class="string">(284807, 1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">number_recored_fraud = <span class="built_in">len</span>(data[data.Class == <span class="number">1</span>])</span><br><span class="line">fraud_indicies = np.array(data[data.Class == <span class="number">1</span>].index)</span><br><span class="line"><span class="built_in">print</span>(number_recored_fraud)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(fraud_indicies))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">492</span></span><br><span class="line"><span class="string">492</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">normal_indices = data[data.Class == <span class="number">0</span>].index</span><br><span class="line">random_normal_indices = np.random.choice(normal_indices, number_recored_fraud, replace=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(random_normal_indices)</span><br><span class="line">random_normal_indices = np.array(random_normal_indices)</span><br><span class="line"><span class="built_in">print</span>(random_normal_indices)</span><br><span class="line"></span><br><span class="line">under_sample_indices = np.concatenate([fraud_indicies, random_normal_indices])</span><br><span class="line">under_sample_data = data.iloc[under_sample_indices,:]</span><br><span class="line">x_undersample = under_sample_data.iloc[:,under_sample_data.columns != <span class="string">&#x27;Class&#x27;</span>]</span><br><span class="line">y_undersample = under_sample_data.iloc[:,under_sample_data.columns == <span class="string">&#x27;Class&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x_undersample),<span class="built_in">len</span>(y_undersample)) </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">984 984</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line">model = svm.SVC()</span><br><span class="line">model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(train_x, train_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测模型</span></span><br><span class="line">pred_y = model.predict(test_x)</span><br><span class="line">pred_y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics <span class="keyword">as</span> sm</span><br><span class="line">sm.f1_score(test_y, pred_y)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0.9236363636363637</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(sm.classification_report(test_y, pred_y))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              precision    recall  f1-score   support</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           0       0.88      0.99      0.93       149</span></span><br><span class="line"><span class="string">           1       0.99      0.86      0.92       147</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    accuracy                           0.93       296</span></span><br><span class="line"><span class="string">   macro avg       0.94      0.93      0.93       296</span></span><br><span class="line"><span class="string">weighted avg       0.94      0.93      0.93       296</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Malplotlib</title>
      <link href="/posts/7ebdeef6.html"/>
      <url>/posts/7ebdeef6.html</url>
      
        <content type="html"><![CDATA[<p>今天下午跟着chatgpt把matplotlib的各种图画了一遍，就是一个套路</p><ol><li>先需要进行数据的分类，X轴，Y轴；或者有的就比如饼图这种就不需要x,y灵活运用吧</li><li>创建画布，如果只有一张图没有子图的话可以不设置</li><li>对图形进行调参，颜色，线宽，透明度…</li></ol><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><blockquote><p><code>Matplotlib</code> 是一个功能强大的 Python 可视化库，可以绘制各种类型的图形。下面是 <code>Matplotlib</code> 可以绘制的一些常见图形类型：</p><ol><li>折线图（Line Plot）：用于显示数据随时间或有序变量而变化的趋势。</li><li>散点图（Scatter Plot）：用于显示两个变量之间的关系，每个数据点用一个点表示。</li><li>条形图（Bar Plot）：用于比较不同类别或组之间的数据。</li><li>直方图（Histogram）：用于显示连续变量的分布情况。</li><li>饼图（Pie Chart）：用于显示不同类别在总体中的占比情况。</li><li>箱线图（Box Plot）：用于显示数据的分散程度和异常值情况。</li><li>热力图（<code>Heatmap</code>）：用于显示两个离散变量之间的关系，通过颜色来表示关联程度。</li><li><code>3D</code> 图（<code>3D</code> Plot）：用于显示三维数据的可视化效果。</li><li>柱状图（Histogram）：用于显示多个连续变量之间的对比情况。</li><li>面积图（Area Plot）：用于显示多个变量随时间变化的总体趋势和相对大小。</li><li>简单地图（Simple Map）：用于显示地理数据，如国家、州、城市的分布情况。</li></ol></blockquote><h1 id="1-折线图"><a href="#1-折线图" class="headerlink" title="1. 折线图"></a>1. 折线图</h1><h2 id="1-1-创建图形对象和坐标系对象"><a href="#1-1-创建图形对象和坐标系对象" class="headerlink" title="1.1 创建图形对象和坐标系对象"></a>1.1 创建图形对象和坐标系对象</h2><p>创建图形对象和坐标系：使用 plt.figure() 创建一个图形对象，并使用 fig.add_subplot() 创建一个坐标系。坐标系可以理解为一个绘图区域，可以在上面绘制图形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建图形对象和坐标系</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>第一个参数 <code>1</code>：表示子图网格的总行数。</li><li>第二个参数 <code>1</code>：表示子图网格的总列数。</li><li>第三个参数 <code>1</code>：表示当前选择的子图在子图网格中的位置。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形对象和坐标系</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">ax.plot(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签和标题</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X Label&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y Label&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Line Chart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-设置中文"><a href="#1-2-设置中文" class="headerlink" title="1.2 设置中文"></a>1.2 设置中文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="1-3-设置线段属性"><a href="#1-3-设置线段属性" class="headerlink" title="1.3 设置线段属性"></a>1.3 设置线段属性</h2><p>下面是一些常用的参数和属性设置：</p><ul><li><code>color</code>：用于设置折线的颜色。可以使用颜色名称（如 <code>&quot;red&quot;</code>、<code>&quot;blue&quot;</code>）、颜色缩写（如 <code>&quot;r&quot;</code>、<code>&quot;b&quot;</code>）或十六进制颜色代码（如 <code>#FF0000</code>、<code>#0000FF</code>）来指定颜色。</li><li><code>linewidth</code> 或 <code>lw</code>：用于设置折线的线宽。可以指定一个数值来设置线宽的大小。</li><li><code>linestyle</code> 或 <code>ls</code>：用于设置折线的线型。常见的线型包括实线（<code>&quot;-&quot;</code>）、虚线（<code>&quot;--&quot;</code>）、点线（<code>&quot;:&quot;</code>）等。</li><li><code>marker</code>：用于设置折线上数据点的标记样式。可以使用各种标记样式，如圆点（<code>&quot;.&quot;</code>）、方形（<code>&quot;s&quot;</code>）、三角形（<code>&quot;^&quot;</code>）等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">2</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-设置图形"><a href="#1-4-设置图形" class="headerlink" title="1.4 设置图形"></a>1.4 设置图形</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置标题和坐标轴标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;Sine Wave&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-5-Live2D"><a href="#1-5-Live2D" class="headerlink" title="1.5 Live2D"></a>1.5 Live2D</h2><p>当需要对多条折线进行属性设置时，使用单个 <code>plot()</code> 函数的参数来设置可能会显得冗长。在这种情况下，可以使用 <code>Line2D</code> 对象来创建折线，并设置其属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.lines <span class="keyword">import</span> Line2D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y1 = np.sin(x)</span><br><span class="line">y2 = np.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Line2D 对象并设置属性</span></span><br><span class="line">line1 = Line2D(x, y1, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">2</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">line2 = Line2D(x, y2, color=<span class="string">&#x27;blue&#x27;</span>, linewidth=<span class="number">1</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, marker=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形对象和坐标系</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 Line2D 对象到坐标系</span></span><br><span class="line">ax.add_line(line1)</span><br><span class="line">ax.add_line(line2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题和坐标轴标签</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Sine and Cosine Waves&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-子图"><a href="#1-6-子图" class="headerlink" title="1.6 子图"></a>1.6 子图</h2><p>有两种方法</p><ul><li><p>```python<br>fig = plt.figure()<br>ax1 = fig.add_subplot(1, 2, 1)<br>ax2 = fig.add_subplot(1, 2, 2)</p><p>ax1.plot(x,y,color=’red’,linewidth=’2’,marker=’o’,linestyle=’—‘)<br>ax2.plot(x,y,color=’blue’,linewidth=’5’,marker=’s’,linestyle=’:’)</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">  import matplotlib.pyplot as plt</span><br><span class="line">  </span><br><span class="line">  # 创建子图网格</span><br><span class="line">  fig, axs = plt.subplots(2, 3)</span><br><span class="line">  </span><br><span class="line">  # 绘制子图</span><br><span class="line">  axs<span class="comment">[0, 0]</span>.plot(<span class="comment">[1, 2, 3]</span>, <span class="comment">[1, 2, 3]</span>)</span><br><span class="line">  axs<span class="comment">[0, 1]</span>.scatter(<span class="comment">[1, 2, 3]</span>, <span class="comment">[1, 2, 3]</span>)</span><br><span class="line">  axs<span class="comment">[0, 2]</span>.bar(<span class="comment">[1, 2, 3]</span>, <span class="comment">[1, 2, 3]</span>)</span><br><span class="line">  axs<span class="comment">[1, 0]</span>.hist(<span class="comment">[1, 2, 2, 3, 3, 3]</span>)</span><br><span class="line">  axs<span class="comment">[1, 1]</span>.pie(<span class="comment">[1, 2, 3]</span>)</span><br><span class="line">  axs<span class="comment">[1, 2]</span>.imshow(<span class="comment">[<span class="comment">[1, 2, 3]</span>, <span class="comment">[4, 5, 6]</span>]</span>)</span><br><span class="line">  </span><br><span class="line">  # 设置子图标题</span><br><span class="line">  axs<span class="comment">[0, 0]</span>.set_title(&#x27;Line Chart&#x27;)</span><br><span class="line">  axs<span class="comment">[0, 1]</span>.set_title(&#x27;Scatter Plot&#x27;)</span><br><span class="line">  axs<span class="comment">[0, 2]</span>.set_title(&#x27;Bar Chart&#x27;)</span><br><span class="line">  axs<span class="comment">[1, 0]</span>.set_title(&#x27;Histogram&#x27;)</span><br><span class="line">  axs<span class="comment">[1, 1]</span>.set_title(&#x27;Pie Chart&#x27;)</span><br><span class="line">  axs<span class="comment">[1, 2]</span>.set_title(&#x27;Image&#x27;)</span><br><span class="line">  </span><br><span class="line">  # 调整子图间距</span><br><span class="line">  plt.tight_layout()</span><br><span class="line">  </span><br><span class="line">  # 显示图形</span><br><span class="line">  plt.show()</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h2 id="1-7-注意事项"><a href="#1-7-注意事项" class="headerlink" title="1.7 注意事项"></a>1.7 注意事项</h2><blockquote><ol><li>数据的排序：折线图通常会按照数据的顺序连接数据点。确保你的数据点按照正确的顺序排列，以确保折线图的连续性和准确性。</li><li>坐标轴的刻度和范围：根据数据的取值范围和特点，选择适当的坐标轴刻度和范围。确保坐标轴刻度能够清晰地显示数据的趋势和变化。</li><li>折线的平滑性：默认情况下，折线图使用直线连接数据点。如果你希望折线图更加平滑，可以考虑使用曲线插值或平滑算法，如样条插值或移动平均。</li><li>多个折线的可区分性：如果你在同一张图中绘制多条折线，确保每条折线具有明显的区分度。可以通过使用不同的颜色、线型、标记样式等来区分不同的折线。</li><li>坐标轴标签和标题：记得为图表添加适当的坐标轴标签和标题，以便更好地说明和解释数据。标签应该清晰地描述坐标轴表示的数据内容。</li><li>数据的准确性和可视化的准确性：确保数据的准确性，并注意可视化的准确性。折线图应该准确地反映数据的趋势和变化，并且不应误导读者。</li><li>添加图例：如果你绘制了多条折线，添加图例可以帮助读者理解每条折线所代表的含义。图例可以说明每条折线对应的数据或变量，以及使用的颜色、线型等。</li></ol></blockquote><h2 id="1-8-实例"><a href="#1-8-实例" class="headerlink" title="1.8 实例"></a>1.8 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x=[<span class="string">&#x27;1月&#x27;</span>,<span class="string">&#x27;2月&#x27;</span>,<span class="string">&#x27;3月&#x27;</span>,<span class="string">&#x27;4月&#x27;</span>,<span class="string">&#x27;5月&#x27;</span>,<span class="string">&#x27;6月&#x27;</span>,<span class="string">&#x27;7月&#x27;</span>,<span class="string">&#x27;8月&#x27;</span>,<span class="string">&#x27;9月&#x27;</span>,<span class="string">&#x27;10月&#x27;</span>,<span class="string">&#x27;11月&#x27;</span>,<span class="string">&#x27;12月&#x27;</span>]</span><br><span class="line">y1=[<span class="number">39</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">38</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">41</span>,<span class="number">41</span>,<span class="number">45</span>,<span class="number">48</span>,<span class="number">52</span>,<span class="number">50</span>]</span><br><span class="line">y2=[<span class="number">45</span>,<span class="number">28</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>,<span class="number">70</span>,<span class="number">65</span>,<span class="number">50</span>,<span class="number">51</span>]</span><br><span class="line">plt.ylabel(<span class="string">&#x27;业务量(亿件)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2018、2019年快递业务量&#x27;</span>)</span><br><span class="line">plt.plot(x,y1,label=<span class="string">&#x27;2018年业务量&#x27;</span>,color=<span class="string">&#x27;#8B0000&#x27;</span>,linewidth=<span class="number">2.0</span>,linestyle=<span class="string">&#x27;--&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">plt.plot(x,y2,label=<span class="string">&#x27;2019年业务量&#x27;</span>,color=<span class="string">&#x27;#006374&#x27;</span>,linewidth=<span class="number">1.5</span>,linestyle=<span class="string">&#x27;-&#x27;</span>,marker=<span class="string">&#x27;^&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y1)):</span><br><span class="line">    plt.text(x[i], y1[i], <span class="string">f&#x27;<span class="subst">&#123;x[i]&#125;</span>,<span class="subst">&#123;y1[i]&#125;</span>&#x27;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;月份&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="2-散点图"><a href="#2-散点图" class="headerlink" title="2. 散点图"></a>2. 散点图</h1><h2 id="2-1-设置属性"><a href="#2-1-设置属性" class="headerlink" title="2.1 设置属性"></a>2.1 设置属性</h2><ul><li><code>c</code>：用于设置散点的颜色。可以传入单个颜色值（如 <code>&#39;red&#39;</code>、<code>&#39;blue&#39;</code>）、颜色的缩写代码（如 <code>&#39;r&#39;</code>、<code>&#39;b&#39;</code>）或者表示颜色的数字。你还可以传入一个列表或数组，根据数据的值来自动选择颜色。例如，可以使用 <code>c=&#39;red&#39;</code> 设置所有散点的颜色为红色。</li><li><code>marker</code>：用于设置散点的标记样式。可以传入标记名称或符号，如 <code>&#39;o&#39;</code> 表示圆形、<code>&#39;s&#39;</code> 表示方形、<code>&#39;^&#39;</code> 表示三角形等。默认值为 <code>&#39;o&#39;</code>，即圆形标记。</li><li><code>s</code>：用于设置散点的大小。可以传入一个标量值，表示散点的直径或面积。也可以传入一个与数据维度相同的列表或数组，根据数据的值来自动调整散点的大小。例如，可以使用 <code>s=30</code> 设置所有散点的大小为 30 个像素。</li><li><code>alpha</code>：用于设置散点的透明度。取值范围为 0 到 1，其中 0 表示完全透明，1 表示完全不透明。可以使用 <code>alpha=0.5</code> 设置散点的透明度为 0.5，即半透明状态。</li></ul><h2 id="2-2-实例"><a href="#2-2-实例" class="headerlink" title="2.2 实例"></a>2.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line">plt.scatter(x, y, c=<span class="string">&#x27;red&#x27;</span>, marker=<span class="string">&#x27;o&#x27;</span>, s=<span class="number">50</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图标题和坐标轴标签</span></span><br><span class="line">plt.title(<span class="string">&quot;🌂点图&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="2-3-添加标签"><a href="#2-3-添加标签" class="headerlink" title="2.3 添加标签"></a>2.3 添加标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.text(x, y, text, **kwargs)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>x</code>：文本标签的 x 坐标位置。</li><li><code>y</code>：文本标签的 y 坐标位置。</li><li><code>text</code>：要显示的文本内容。</li><li><code>**kwargs</code>：可选的关键字参数，用于设置文本样式、颜色、字体大小等。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">x = np.random.randn(<span class="number">100</span>)</span><br><span class="line">y = np.random.randn(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y,color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;这是x轴&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;这是y轴&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;🌂点图&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文本标签</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(y)):</span><br><span class="line">    plt.text(x[i], y[i], <span class="string">f&#x27;<span class="subst">&#123;x[i]&#125;</span>,<span class="subst">&#123;y[i]&#125;</span>&#x27;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-注意事项"><a href="#2-4-注意事项" class="headerlink" title="2.4 注意事项"></a>2.4 注意事项</h2><blockquote><ol><li>数据格式：散点图的数据可以是一维或二维的。如果只有一个数据序列，那么散点图将在 x 轴上绘制，y 轴上的值将被自动生成。如果有两个数据序列，那么第一个序列将被用作 x 值，第二个序列将被用作 y 值。</li><li>数据点的位置：散点图的数据点的位置是由 x 和 y 值确定的。确保提供正确的数据以获得预期的图形。</li><li>数据尺度：如果 x 和 y 的值具有不同的尺度，可能需要对数据进行归一化或缩放，以确保数据点在图形上以适当的比例显示。</li><li>图例：如果有多个数据序列，可以使用图例来标识每个序列对应的含义。可以使用 <code>plt.legend()</code> 函数创建图例，并通过设置 <code>label</code> 参数来指定每个数据序列的标签。</li><li>坐标轴范围：根据需要，可以使用 <code>plt.xlim()</code> 和 <code>plt.ylim()</code> 函数设置 x 和 y 轴的显示范围。这可以帮助更好地突出数据的变化。</li><li>数据标签：如果希望在散点图中显示每个数据点的具体数值，可以考虑添加数据标签。可以使用 <code>plt.text()</code> 函数在指定位置添加文本标签。</li><li>数据分组：如果要在散点图中显示多个数据组，并且希望为每个数据组使用不同的颜色、标记样式等，可以考虑使用循环或条件语句来逐个绘制每个数据组的散点图，或者使用 pandas 库进行数据分组和可视化。</li><li>颜色映射：如果有一个额外的数值序列，可以使用颜色映射来将数据点的颜色与该数值关联起来。可以使用 <code>c</code> 参数传入数值序列，并设置 <code>cmap</code> 参数来选择合适的颜色映射。</li></ol></blockquote><h1 id="3-条形图"><a href="#3-条形图" class="headerlink" title="3.条形图"></a>3.条形图</h1><h2 id="3-1-属性设置"><a href="#3-1-属性设置" class="headerlink" title="3.1 属性设置"></a>3.1 属性设置</h2><p><code>color</code> 参数设置条形的颜色</p><p><code>width</code> 参数设置条形的宽度。默认值为 <code>0.8</code></p><p><code>edgecolor</code> 和 <code>linewidth</code> 参数设置条形的边框颜色和宽度</p><p><code>alpha</code> 参数设置条形的透明度，取值范围为 <code>0.0</code> 到 <code>1.0</code></p><p><code>plt.text()</code> 函数在条形上方添加标签。可以指定标签的位置、内容和样式</p><p><code>label</code> 是用于标识每个条形的标签，需要有<code>plt.legend()</code>才能显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.bar(categories, values,label=<span class="string">&#x27;2018年业务量&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, width=<span class="number">0.5</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>, linewidth=<span class="number">1</span>, alpha=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(values):</span><br><span class="line">    plt.text(i, v, <span class="built_in">str</span>(v), ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-实例"><a href="#3-2-实例" class="headerlink" title="3.2 实例"></a>3.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">categories = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">values = [<span class="number">10</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">27</span>]</span><br><span class="line"></span><br><span class="line">plt.bar(categories, values,label=<span class="string">&#x27;2018年业务量&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Category&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Value&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Bar Chart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(categories)):</span><br><span class="line">    plt.text(categories[i],values[i],<span class="string">f&#x27;<span class="subst">&#123;categories[i]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><blockquote><ol><li>条形的宽度：条形图中每个条形的宽度默认是相等的，但你可以通过调整 <code>width</code> 参数来修改它们的宽度。较宽的条形可能会使图表显得混乱，因此要注意选择合适的宽度。</li><li>条形的对齐方式：条形图中条形的默认对齐方式是居中对齐，即条形在给定的位置上水平居中显示。你也可以通过设置 <code>align</code> 参数来改变对齐方式，包括 ‘center’（默认）、’edge’、’start’ 等。</li><li>条形的排序：在某些情况下，你可能希望对条形进行排序，例如按照某个属性或值的大小进行排序。你可以使用排序函数（如 <code>sorted()</code>）对数据进行排序，然后再绘制条形图。</li><li>条形的颜色：你可以通过设置 <code>color</code> 参数来为条形指定颜色。可以使用预定义的颜色名称（如 ‘red’、’blue’、’green’ 等），也可以使用十六进制颜色码或 RGB 值来自定义颜色。</li><li>条形的标签：可以通过使用 <code>plt.text()</code> 函数在每个条形上添加文本标签，显示每个条形的具体数值或其他相关信息。</li><li>坐标轴标签和标题：记得为图表添加适当的坐标轴标签和标题，以便更好地说明和解释数据。</li><li>数据的准确性和可视化的准确性：在绘制条形图时，要确保数据的准确性，并注意可视化的准确性。条形图应该准确地反映数据的大小关系，并且不应误导读者。</li></ol></blockquote><h1 id="4-直方图"><a href="#4-直方图" class="headerlink" title="4.直方图"></a>4.直方图</h1><h2 id="4-1-设置属性"><a href="#4-1-设置属性" class="headerlink" title="4.1 设置属性"></a>4.1 设置属性</h2><ul><li><code>bins</code>: 指定直方图的区间数量或划分方式。<ul><li><code>bins=&#39;auto&#39;</code>：自动选择合适的区间数量和划分方式。</li><li><code>bins=&#39;sturges&#39;</code>：使用<code>Sturges</code>公式确定区间数量。</li><li><code>bins=&#39;fd&#39;</code>：使用<code>Freedman-Diaconis</code>准则确定区间数量。</li><li><code>bins=array</code>：传递一个数组来指定每个区间的边界值。</li></ul></li><li><code>range</code>: 指定直方图的数据范围。</li><li><code>density</code>: 设置是否对直方图进行归一化，即将频数转换为频率。</li><li><code>color</code>: 设置直方图的填充颜色。</li><li><code>edgecolor</code>: 设置直方图边缘线的颜色。</li><li><code>alpha</code>: 设置直方图的透明度。</li><li><code>histtype</code>: 设置直方图的类型，如’bar’表示普通直方图，’step’表示阶梯状直方图。</li><li><code>align</code>: 设置直方图的对齐方式，如’left’表示左对齐，’mid’表示居中对齐。</li><li><code>orientation</code>: 设置直方图的方向，如’vertical’表示垂直方向，’horizontal’表示水平方向。</li><li><code>label</code>: 设置直方图的标签，用于图例显示。</li></ul><h2 id="4-2-实例"><a href="#4-2-实例" class="headerlink" title="4.2 实例"></a>4.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">plt.hist(data, bins=<span class="number">10</span>, color=<span class="string">&#x27;skyblue&#x27;</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>, alpha=<span class="number">0.8</span>, histtype=<span class="string">&#x27;bar&#x27;</span>, align=<span class="string">&#x27;mid&#x27;</span>, orientation=<span class="string">&#x27;horizontal&#x27;</span>, label=<span class="string">&#x27;Histogram&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签和标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X轴标签&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y轴标签&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;直方图&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="4-3-注意事项"><a href="#4-3-注意事项" class="headerlink" title="4.3 注意事项"></a>4.3 注意事项</h2><blockquote><ol><li>数据的合理分组：直方图的可解释性和有效性取决于数据的分组方式。选择合适的区间数量和划分方式是关键。不恰当的分组可能导致信息损失或误导。</li><li>数据的准备和处理：在绘制直方图之前，需要对数据进行适当的准备和处理。这可能包括数据清洗、缺失值处理和数据转换等步骤，以确保直方图能够准确地反映数据的分布情况。</li><li>柱形的宽度和间隔：柱形的宽度和间隔也需要适当设置，以便展示数据的分布特征。过宽或过窄的柱形可能使数据的分布不够清晰或容易产生误解。</li><li>坐标轴的标签和标题：确保直方图的坐标轴具有清晰的标签，以便读者能够理解数据的含义。此外，添加一个有意义的标题可以更好地说明直方图的主题或目的。</li><li>可视化效果的调整：根据需要，可以调整直方图的颜色、透明度、边框样式等可视化效果，以使直方图更具吸引力和易读性。</li><li>数据量的考虑：当数据量较大时，直方图可能会变得密集且难以解读。可以通过调整柱形宽度、使用分组的方式或通过其他图表类型来更好地展示大数据集的分布。</li></ol></blockquote><h1 id="5-饼图"><a href="#5-饼图" class="headerlink" title="5.饼图"></a>5.饼图</h1><h2 id="5-1-设置属性"><a href="#5-1-设置属性" class="headerlink" title="5.1 设置属性"></a>5.1 设置属性</h2><ol><li><p><code>labels</code>：设置饼图每个部分的标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">labels = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">plt.pie(sizes, labels=labels)</span><br></pre></td></tr></table></figure></li><li><p><code>colors</code>：设置饼图每个部分的颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">plt.pie(sizes, labels=labels, colors=colors)</span><br></pre></td></tr></table></figure></li><li><p><code>autopct</code>：设置饼图每个部分的显示格式，通常用于显示百分比。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(sizes, labels=labels, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>explode</code>：设置饼图中某个部分的偏移量，用于突出显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">codeexplode = [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">plt.pie(sizes, labels=labels, explode=explode)</span><br></pre></td></tr></table></figure></li><li><p><code>startangle</code>：设置饼图的起始角度，可以调整饼图的旋转位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(sizes, labels=labels, startangle=<span class="number">90</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>shadow</code>：设置是否显示饼图的阴影效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(sizes, labels=labels, shadow=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>radius</code>：设置饼图的半径大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.pie(sizes, labels=labels, radius=<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>wedgeprops</code>：设置饼图每个部分的属性，例如边框颜色、边框宽度等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wedgeprops = &#123;<span class="string">&#x27;linewidth&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;edgecolor&#x27;</span>: <span class="string">&#x27;black&#x27;</span>&#125;</span><br><span class="line">plt.pie(sizes, labels=labels, wedgeprops=wedgeprops)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-2-实例"><a href="#5-2-实例" class="headerlink" title="5.2 实例"></a>5.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x=[<span class="string">&#x27;童装&#x27;</span>,<span class="string">&#x27;奶粉辅食&#x27;</span>,<span class="string">&#x27;孕妈专区&#x27;</span>,<span class="string">&#x27;洗护喂养&#x27;</span>,<span class="string">&#x27;宝宝尿裤&#x27;</span>,<span class="string">&#x27;春夏新品&#x27;</span>,<span class="string">&#x27;童车童床&#x27;</span>,<span class="string">&#x27;玩具文娱&#x27;</span>,<span class="string">&#x27;童鞋&#x27;</span>]</span><br><span class="line">y=[<span class="number">29665</span>,<span class="number">3135.4</span>,<span class="number">4292.4</span>,<span class="number">5240.9</span>,<span class="number">5543.4</span>,<span class="number">5633.8</span>,<span class="number">6414.5</span>,<span class="number">9308.1</span>,<span class="number">10353</span>]</span><br><span class="line">plt.pie(y,labels=x,autopct=<span class="string">&#x27;%.1f%%&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;拼多多平台子类目的销售额&#x27;</span>)</span><br><span class="line">plt.legend(x, ncol=<span class="number">2</span>,bbox_to_anchor=(<span class="number">1.1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加表格</span></span><br><span class="line">columns = [<span class="string">&#x27;子类目&#x27;</span>, <span class="string">&#x27;销售额&#x27;</span>]</span><br><span class="line">cell_text = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    cell_text.append([x[i], y[i]])</span><br><span class="line">plt.table(cellText=cell_text, colLabels=columns, loc=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="5-3-注意事项"><a href="#5-3-注意事项" class="headerlink" title="5.3 注意事项"></a>5.3 注意事项</h2><blockquote><ol><li>饼图的数据应该是各个部分的数值或占比，确保数据的正确性和一致性。</li><li>饼图的部分数值或占比应该是非负数，否则可能导致绘制错误。</li><li>饼图的部分数值或占比应该总和为100%，以确保整个饼图代表完整的数据。</li><li>如果饼图的部分数值非常小，可能会导致饼图中的文本重叠或不可读。可以考虑使用<code>autopct</code>属性来显示百分比，并设置合适的格式。</li><li>在绘制饼图时，可以使用<code>explode</code>属性将某个部分偏移，以突出显示。</li><li>可以使用<code>startangle</code>属性调整饼图的起始角度，以更好地展示数据。</li><li>饼图可以添加标题和图例，以增加可读性和理解性。</li><li>可以根据需要自定义饼图的颜色、边框等属性，以使其更符合需求。</li><li>饼图适合用于显示相对比例，但不适合用于比较绝对数值的大小。在需要比较数据的大小时，可以考虑使用其他类型的图表。</li></ol></blockquote><h1 id="6-箱线图"><a href="#6-箱线图" class="headerlink" title="6.箱线图"></a>6.箱线图</h1><h2 id="6-1-设置属性"><a href="#6-1-设置属性" class="headerlink" title="6.1 设置属性"></a>6.1 设置属性</h2><ul><li><code>x</code>: 指定要绘制箱线图的数据，可以是单个列表或数组，或多个列表或数组组成的列表。</li><li><code>labels</code>: 指定每个数据集的标签，用于在图例中显示。</li><li><code>notch</code>: 控制箱线图的缺口效果，默认为False，表示传统的箱线图，True表示绘制缺口箱线图。</li><li><code>sym</code>: 指定异常值的标记符号，默认为’+’。</li><li><code>vert</code>: 控制箱线图的方向，默认为True，表示垂直方向绘制箱线图，False表示水平方向绘制。</li><li><code>patch_artist</code>: 控制是否给箱线图添加颜色填充，默认为False。</li><li><code>widths</code>: 指定箱线图的宽度。</li><li><code>whis</code>: 指定箱线图的边界范围，默认为1.5，表示上下边界分别为上四分位数加1.5倍的四分位距和下四分位数减1.5倍的四分位距。</li><li><code>showfliers</code>: 控制是否显示异常值，默认为True，显示异常值。</li><li><code>meanline</code>: 控制是否绘制均值线，默认为False。</li><li><code>meanprops</code>: 用于设置均值线的属性，如颜色、线型等。</li><li><code>medianprops</code>: 用于设置中位数线的属性。</li><li><code>boxprops</code>: 用于设置箱体的属性。</li><li><code>whiskerprops</code>: 用于设置须线的属性。</li><li><code>capprops</code>: 用于设置边界线的属性。</li></ul><p>这些属性可以根据需要进行设置，以满足绘制箱线图的需求。可以通过传递字典或关键字参数的方式来设置这些属性，例如<code>boxplot(data, patch_artist=True, boxprops=&#123;&#39;facecolor&#39;: &#39;red&#39;&#125;)</code>。</p><p>此外，还可以使用<code>plt.xticks()</code>和<code>plt.yticks()</code>等函数设置刻度标签，使用<code>plt.title()</code>设置标题，使用<code>plt.xlabel()</code>和<code>plt.ylabel()</code>设置轴标签等来进一步美化和定制箱线图。</p><h2 id="6-2-实例"><a href="#6-2-实例" class="headerlink" title="6.2 实例"></a>6.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">data = [np.random.normal(<span class="number">0</span>, std, <span class="number">100</span>) <span class="keyword">for</span> std <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形对象和坐标系</span></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制箱线图</span></span><br><span class="line">boxplot = ax.boxplot(data, patch_artist=<span class="literal">True</span>, notch=<span class="literal">True</span>, sym=<span class="string">&#x27;rx&#x27;</span>, widths=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置箱体颜色</span></span><br><span class="line">colors = [<span class="string">&#x27;lightblue&#x27;</span>, <span class="string">&#x27;lightgreen&#x27;</span>, <span class="string">&#x27;lightyellow&#x27;</span>, <span class="string">&#x27;lightpink&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> patch, color <span class="keyword">in</span> <span class="built_in">zip</span>(boxplot[<span class="string">&#x27;boxes&#x27;</span>], colors):</span><br><span class="line">    patch.set_facecolor(color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中位数线的颜色和线型</span></span><br><span class="line">boxplot[<span class="string">&#x27;medians&#x27;</span>][<span class="number">0</span>].<span class="built_in">set</span>(color=<span class="string">&#x27;red&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置须线和边界线的颜色和线型</span></span><br><span class="line"><span class="keyword">for</span> whisker, cap <span class="keyword">in</span> <span class="built_in">zip</span>(boxplot[<span class="string">&#x27;whiskers&#x27;</span>], boxplot[<span class="string">&#x27;caps&#x27;</span>]):</span><br><span class="line">    whisker.<span class="built_in">set</span>(color=<span class="string">&#x27;black&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    cap.<span class="built_in">set</span>(color=<span class="string">&#x27;black&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置异常值的标记符号和颜色</span></span><br><span class="line">boxplot[<span class="string">&#x27;fliers&#x27;</span>][<span class="number">0</span>].<span class="built_in">set</span>(marker=<span class="string">&#x27;o&#x27;</span>, markerfacecolor=<span class="string">&#x27;red&#x27;</span>, markersize=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴标签和标题</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;Data&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Values&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;Box Plot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-3-注意事项"><a href="#6-3-注意事项" class="headerlink" title="6.3 注意事项"></a>6.3 注意事项</h2><blockquote><ol><li>数据的准备：箱线图适用于展示多个数据集的统计特征，因此需要准备多个数据集。确保数据集之间的含义和维度相同，以便进行比较。</li><li>异常值处理：箱线图可以显示异常值，可以考虑在图中标记异常值或选择不显示异常值。根据数据的特点和分析目的，决定如何处理异常值。</li><li>箱体颜色和填充：通过<code>patch_artist=True</code>参数，可以使箱体具有颜色和填充效果。可以选择不同的颜色和填充样式来区分不同的数据集或表示特定的含义。</li><li>线条样式和颜色：可以通过<code>set</code>方法设置中位数线、须线、边界线的样式和颜色。选择适当的线型、线宽和颜色以增强可视化效果。</li><li>标记符号和颜色：对于异常值，可以选择不同的标记符号和颜色来突出显示。这样可以使异常值在图中更加显眼。</li><li>坐标轴标签和标题：为了更好地解释和说明箱线图，应该添加适当的坐标轴标签和标题。这样可以让读者明确图中所展示的数据和含义。</li><li>数据解读和分析：绘制箱线图不仅仅是为了展示数据，还要对数据进行解读和分析。要注意理解箱线图的含义，包括中位数、四分位数、须线等，以便正确地解读图表。</li><li>上下文和目标受众：绘制箱线图时，要考虑上下文和目标受众。选择合适的图表样式、颜色和注释，以便让观众更容易理解和解读图表。</li></ol></blockquote><h1 id="7-热力图"><a href="#7-热力图" class="headerlink" title="7.热力图"></a>7.热力图</h1><h2 id="7-1-设置属性"><a href="#7-1-设置属性" class="headerlink" title="7.1 设置属性"></a>7.1 设置属性</h2><ol><li><code>cmap</code>：指定颜色映射方案，即用于映射数值到颜色的颜色表。常见的选项包括 <code>&#39;hot&#39;</code>、<code>&#39;cool&#39;</code>、<code>&#39;viridis&#39;</code> 等。你可以根据需求选择适合的颜色映射方案。</li><li><code>vmin</code> 和 <code>vmax</code>：用于设置颜色映射的数值范围。可以通过指定这两个参数来调整颜色映射的动态范围，使得图像更加突出或者对比度更高。</li><li><code>interpolation</code>：用于指定插值方法，即确定图像中每个像素值的颜色。常见的选项有 <code>&#39;nearest&#39;</code>、<code>&#39;bilinear&#39;</code>、<code>&#39;bicubic&#39;</code> 等。你可以根据需要选择合适的插值方法。</li><li><code>aspect</code>：用于设置图像的纵横比。可以使用 <code>&#39;auto&#39;</code> 或者一个具体的数值来调整图像的宽高比。</li><li><code>alpha</code>：设置图像的透明度。可以使用一个范围在0到1之间的数值来指定透明度级别。</li><li><code>colorbar</code>：添加颜色标尺。可以使用 <code>colorbar</code> 函数自动添加颜色标尺，并设置相关的标签。</li></ol><h2 id="7-2-实例"><a href="#7-2-实例" class="headerlink" title="7.2 实例"></a>7.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成示例数据</span></span><br><span class="line">data = np.random.rand(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制热力图</span></span><br><span class="line">plt.imshow(data, cmap=<span class="string">&#x27;cool&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加颜色标尺</span></span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-3-注意事项"><a href="#7-3-注意事项" class="headerlink" title="7.3 注意事项"></a>7.3 注意事项</h2><blockquote><ol><li>数据格式：热力图通常用于展示二维数据的颜色分布情况，因此要确保你的数据是二维数组或矩阵的形式。</li><li>数据处理：根据数据的特点和需求，你可能需要对数据进行预处理，例如进行归一化、去除异常值或处理缺失值等操作，以确保热力图的结果更加准确和可解释。</li><li>色彩映射：选择合适的颜色映射方案对于热力图的可读性很重要。确保所选的颜色映射能够清晰地展示数据的变化趋势，避免使用过于饱和或不明显的颜色。</li><li>数据范围：根据数据的实际情况，设置合适的数据范围，以确保颜色映射能够充分显示数据的变化。可以使用 <code>vmin</code> 和 <code>vmax</code> 参数来调整颜色映射的数值范围。</li><li>插值方法：选择适当的插值方法可以影响热力图的平滑程度和细节展示。根据数据的稀疏程度和需求，选择合适的插值方法，例如最近邻插值、双线性插值或双立方插值等。</li><li>标签和标题：为热力图添加标签和标题可以提供更好的解读和可视化效果。确保标签和标题清晰、简洁，并能准确传达数据的含义。</li><li>色彩条和注释：添加色彩条可以帮助读者理解热力图的颜色对应关系。此外，对于特定的热力图，你可能需要添加注释或额外的标记来解释图中的特殊区域或值。</li><li>图像尺寸和布局：根据热力图的内容和展示需求，调整图像的尺寸和布局，以确保信息清晰可见，并适应展示平台的要求。</li></ol></blockquote><h1 id="8-3D图"><a href="#8-3D图" class="headerlink" title="8. 3D图"></a>8. 3D图</h1><h2 id="8-1设置属性"><a href="#8-1设置属性" class="headerlink" title="8.1设置属性"></a>8.1设置属性</h2><ol><li>坐标轴范围：可以使用<code>set_xlim()</code>, <code>set_ylim()</code>, <code>set_zlim()</code>方法来设置X、Y、Z轴的范围。</li><li>坐标轴标签：使用<code>set_xlabel()</code>, <code>set_ylabel()</code>, <code>set_zlabel()</code>方法来设置X、Y、Z轴的标签。</li><li>图形标题：使用<code>set_title()</code>方法设置图形的标题。</li><li>颜色映射：可以使用<code>colormap</code>参数来设置颜色映射，常用的颜色映射有<code>viridis</code>、<code>plasma</code>、<code>coolwarm</code>等。</li><li>图形样式：可以设置散点的大小、颜色、透明度等属性来调整图形的样式。</li><li>视角调整：可以使用<code>view_init(elev, azim)</code>方法来设置视角的方位角和仰角。</li><li>网格线：可以使用<code>grid()</code>方法来显示或隐藏网格线。</li><li>光照效果：可以使用<code>lightsource</code>类来调整光照效果，以改变3D图形的阴影和明暗度。</li><li>图例：可以使用<code>legend()</code>方法添加图例，说明不同的数据或图形含义。</li></ol><h2 id="8-2-实例"><a href="#8-2-实例" class="headerlink" title="8.2 实例"></a>8.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">y = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = np.sin(np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形对象和坐标系</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D图形</span></span><br><span class="line">ax.plot_surface(X, Y, Z, cmap=<span class="string">&#x27;viridis&#x27;</span>, linewidth=<span class="number">0</span>, antialiased=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴范围</span></span><br><span class="line">ax.set_xlim(-<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">ax.set_zlim(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形标题</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;3D Surface Plot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置视角</span></span><br><span class="line">ax.view_init(elev=<span class="number">30</span>, azim=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-3-注意事项"><a href="#8-3-注意事项" class="headerlink" title="8.3 注意事项"></a>8.3 注意事项</h2><blockquote><ol><li>数据准备：确保你有正确的数据集来绘制3D图形。通常情况下，你需要一个三维的数据集，包含X、Y和Z轴上的数值。</li><li>坐标系选择：使用<code>projection=&#39;3d&#39;</code>参数创建一个3D坐标系对象，例如<code>ax = fig.add_subplot(111, projection=&#39;3d&#39;)</code>。</li><li>绘制方法：使用适合的方法来绘制3D图形。例如，你可以使用<code>plot_surface()</code>方法来绘制表面图，使用<code>plot_wireframe()</code>方法来绘制线框图，使用<code>scatter()</code>方法来绘制散点图等。</li><li>坐标轴设置：根据你的数据范围来设置坐标轴的刻度和范围，以确保数据适当地显示在图形中。使用<code>set_xlim()</code>、<code>set_ylim()</code>和<code>set_zlim()</code>方法设置各个轴的范围。</li><li>坐标轴标签和标题：使用<code>set_xlabel()</code>、<code>set_ylabel()</code>和<code>set_zlabel()</code>方法设置各个轴的标签，使用<code>set_title()</code>方法设置图形的标题。</li><li>视角调整：使用<code>view_init()</code>方法来调整视角，通过设置<code>elev</code>参数和<code>azim</code>参数来改变观察者的仰角和方位角。</li><li>其他属性设置：根据需要，你还可以设置其他属性，如颜色映射、线宽、透明度等，以获得更好的可视化效果。</li><li>图形显示：最后，使用<code>plt.show()</code>来显示绘制的图形。</li></ol><p>注意：在使用<code>Matplotlib</code>绘制<code>3D</code>图形时，你需要确保已经安装了<code>mpl_toolkits.mplot3d</code>模块。可以通过<code>from mpl_toolkits.mplot3d import Axes3D</code>导入该模块。</p></blockquote><h1 id="9-柱状图"><a href="#9-柱状图" class="headerlink" title="9.柱状图"></a>9.<strong>柱状图</strong></h1><h2 id="9-1设置属性"><a href="#9-1设置属性" class="headerlink" title="9.1设置属性"></a>9.1设置属性</h2><ol><li>颜色：可以使用<code>color</code>参数设置柱状图的颜色，可以是单个颜色值或颜色列表。</li><li>宽度：可以使用<code>width</code>参数设置柱状图的宽度，默认为0.8。</li><li>边缘颜色和线型：可以使用<code>edgecolor</code>参数设置柱状图的边缘颜色，使用<code>linewidth</code>参数设置边缘线的宽度。</li><li>透明度：可以使用<code>alpha</code>参数设置柱状图的透明度，取值范围为0到1之间。</li><li>标签：可以使用<code>label</code>参数为柱状图添加标签，用于图例显示。</li><li>柱状图排列方式：可以使用<code>align</code>参数设置柱状图的排列方式，常见的取值有’center’（居中对齐，默认值）、’edge’（边缘对齐）等。</li><li>边缘线样式：可以使用<code>linestyle</code>参数设置柱状图边缘线的样式，常见的取值有’-‘（实线，默认值）、’—‘（虚线）等。</li></ol><p>这些属性可以在绘制柱状图时通过传递参数进行设置，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy code</span><br><span class="line">ax.bar(x, y, color=<span class="string">&#x27;blue&#x27;</span>, width=<span class="number">0.5</span>, edgecolor=<span class="string">&#x27;black&#x27;</span>, linew</span><br></pre></td></tr></table></figure><h2 id="9-2-实例"><a href="#9-2-实例" class="headerlink" title="9.2 实例"></a>9.2 实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># 柱状图的x轴坐标</span></span><br><span class="line">y = [<span class="number">10</span>, <span class="number">24</span>, <span class="number">36</span>, <span class="number">40</span>, <span class="number">5</span>]  <span class="comment"># 柱状图的高度值</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.bar(x, y)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X轴标签&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y轴标签&#x27;</span>)</span><br><span class="line">ax.set_title(<span class="string">&#x27;柱状图&#x27;</span>)</span><br><span class="line">ax.set_xticks(x)  <span class="comment"># 设置x轴刻度标签</span></span><br><span class="line">ax.set_xticklabels([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>])  <span class="comment"># 设置x轴刻度标签的名称</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-3-注意事项"><a href="#9-3-注意事项" class="headerlink" title="9.3 注意事项"></a>9.3 注意事项</h2><blockquote><ol><li>数据的准备：确保你有正确的数据集用于绘制柱状图。通常，柱状图需要提供每个柱子的高度或值。确保数据的准确性和一致性。</li><li>选择合适的柱状图类型：柱状图有多种类型，如垂直柱状图、水平柱状图、堆叠柱状图等。根据你的数据和展示需求，选择合适的柱状图类型。</li><li>坐标轴设置：柱状图通常需要设置合适的坐标轴刻度和标签，确保数据在可视化中能够准确显示。</li><li>柱状图的宽度和间距：柱状图的宽度和间距可以影响可视化效果和数据的解读。根据数据量和展示需求，调整柱状图的宽度和间距，使得柱子之间有合适的间隔和对比。</li><li>添加标签和图例：柱状图中的柱子可以添加标签，用于表示具体的数据值或类别信息。同时，为了解释柱状图中的不同组或不同颜色的柱子，可以添加图例，使得读者能够更好地理解图表含义。</li><li>避免信息重叠：当柱状图中的柱子数量较多或数据值较接近时，要注意避免柱子之间的信息重叠。可以考虑调整柱状图的宽度、间距或旋转柱子标签等方式，以确保数据的清晰可见性。</li><li>注意数据的排序：根据展示需求，可能需要对柱状图中的数据进行排序。确保数据按照适当的顺序排列，以便更好地传达信息。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/posts/f6491cfb.html"/>
      <url>/posts/f6491cfb.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络编程入门"><a href="#1-网络编程入门" class="headerlink" title="1. 网络编程入门"></a>1. 网络编程入门</h2><h3 id="1-1-网络编程概述"><a href="#1-1-网络编程概述" class="headerlink" title="1.1 网络编程概述"></a>1.1 网络编程概述</h3><ul><li><p>计算机网络</p><p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p></li><li><p>网络编程</p><p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p></li></ul><h3 id="1-2-网络编程三要素"><a href="#1-2-网络编程三要素" class="headerlink" title="1.2 网络编程三要素"></a>1.2 网络编程三要素</h3><ul><li><p>IP地址</p><p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p></li><li><p>端口</p><p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p></li><li><p>协议</p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p></li></ul><h3 id="1-3-IP地址"><a href="#1-3-IP地址" class="headerlink" title="1.3 IP地址"></a>1.3 IP地址</h3><p>IP地址：是网络中设备的唯一标识</p><ul><li>IP地址分为两大类<ul><li>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照TCP/IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”，这显然比1和0容易记忆得多</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量不够的问题</li></ul></li><li>DOS常用命令：<ul><li>ipconfig：查看本机IP地址</li><li>ping IP地址：检查网络是否连通</li></ul></li><li>特殊IP地址：<ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></li></ul><h3 id="1-4-InetAddress"><a href="#1-4-InetAddress" class="headerlink" title="1.4 InetAddress"></a>1.4 InetAddress</h3><p>InetAddress：此类表示Internet协议（IP）地址</p><ul><li><p>相关方法</p><p>| 方法名                                    | 说明                                                         |<br>| ————————————————————- | —————————————————————————————— |<br>| static InetAddress getByName(String host) | 确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址 |<br>| String getHostName()                      | 获取此IP地址的主机名                                         |<br>| String getHostAddress()                   | 返回文本显示中的IP地址字符串                                 |</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InetAddressDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line"><span class="comment">//InetAddress address = InetAddress.getByName(&quot;itheima&quot;);</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String getHostName()：获取此IP地址的主机名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> address.getHostName();</span><br><span class="line">        <span class="comment">//public String getHostAddress()：返回文本显示中的IP地址字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> address.getHostAddress();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主机名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;IP地址：&quot;</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-5-端口和协议"><a href="#1-5-端口和协议" class="headerlink" title="1.5 端口和协议"></a>1.5 端口和协议</h3><ul><li><p>端口</p><ul><li>设备上应用程序的唯一标识</li></ul></li><li><p>端口号</p><ul><li>用两个字节表示的整数，它的取值范围是0~65535。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</li></ul></li><li><p>协议</p><ul><li>计算机网络中，连接和通信的规则被称为网络通信协议</li><li><img src="E:\JAVA\笔记\JAVASE\images\it\OSI模型.png" alt="image-20240422084821623"></li><li><img src="E:\JAVA\笔记\JAVASE\images\it\TCP IP协议.png" alt="image-20240422085032009"></li></ul></li><li><p>UDP协议</p><ul><li>用户数据报协议(User Datagram Protocol)</li><li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li><li>由于使用UDP协议消耗系统资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li></ul></li><li><p>TCP协议</p><ul><li><p>传输控制协议 (Transmission Control Protocol)</p></li><li><p>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</p></li><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠</p><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</p><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</p><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接</p></li><li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p></li></ul></li></ul><p><img src="E:\JAVA\笔记\JAVASE\images\it\协议.png" alt="image-20240422085356675"></p><h2 id="2-UDP通信程序"><a href="#2-UDP通信程序" class="headerlink" title="2.UDP通信程序"></a>2.UDP通信程序</h2><p><strong>面向无连接的协议，不管是否有网络都会发送，使用数据报进行传输</strong></p><blockquote><p>数据报（Datagram）是一种网络层或传输层的通信协议，用于在网络中发送独立的消息。在网络通信中，数据报是承载数据的打包单位，它允许网络设备发送和接收独立的消息，而无需建立和维护一个持久的连接。</p></blockquote><h3 id="2-1-UDP发送数据"><a href="#2-1-UDP发送数据" class="headerlink" title="2.1 UDP发送数据"></a>2.1 UDP发送数据</h3><ul><li><p>Java中的UDP通信</p><ul><li>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</li><li>Java提供了DatagramSocket类作为基于UDP协议的Socket</li></ul></li><li><p>构造方法</p><p>| 方法名                                                      | 说明                                                 |<br>| —————————————————————————————- | —————————————————————————— |<br>| DatagramSocket()                                            | 创建数据报套接字并将其绑定到本机地址上的任何可用端口 |<br>| DatagramPacket(byte[] buf,int len,InetAddress add,int port) | 创建数据包,发送长度为len的数据包到指定主机的指定端口 |</p></li><li><p>相关方法</p><p>| 方法名                         | 说明                   |<br>| ——————————————— | ——————————— |<br>| void send(DatagramPacket p)    | 发送数据报包           |<br>| void close()                   | 关闭数据报套接字       |<br>| void receive(DatagramPacket p) | 从此套接字接受数据报包 |</p></li><li><p>发送数据的步骤</p><ul><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包</li><li>调用DatagramSocket对象的方法发送数据</li><li>关闭发送端</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span></span><br><span class="line">        <span class="comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span></span><br><span class="line">        <span class="type">byte</span>[] bys = <span class="string">&quot;hello,udp,我来了&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys,bys.length,InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        <span class="comment">//void send(DatagramPacket p) 从此套接字发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        <span class="comment">//void close() 关闭此数据报套接字</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-UDP接收数据"><a href="#2-2-UDP接收数据" class="headerlink" title="2.2 UDP接收数据"></a>2.2 UDP接收数据</h3><ul><li><p>接收数据的步骤</p><ul><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ul></li><li><p>构造方法</p><p>| 方法名                              | 说明                                            |<br>| —————————————————- | ———————————————————————- |<br>| DatagramPacket(byte[] buf, int len) | 创建一个DatagramPacket用于接收长度为len的数据包 |</p></li><li><p>相关方法</p><p>| 方法名            | 说明                                     |<br>| ————————- | ———————————————————— |<br>| byte[]  getData() | 返回数据缓冲区                           |<br>| int  getLength()  | 返回要发送的数据的长度或接收的数据的长度 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">      <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">      <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">      <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">      ds.receive(dp);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">      System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>,                                             dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-UDP通信程序练习"><a href="#2-3-UDP通信程序练习" class="headerlink" title="2.3 UDP通信程序练习"></a>2.3 UDP通信程序练习</h3><ul><li><p>案例需求</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</p><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP发送数据：</span></span><br><span class="line"><span class="comment">        数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//键盘录入数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="comment">//输入的数据是886，发送数据结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(s)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">            <span class="type">byte</span>[] bys = s.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length, InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP接收数据：</span></span><br><span class="line"><span class="comment">        因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭接收端</span></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-UDP三种通讯方式"><a href="#2-4-UDP三种通讯方式" class="headerlink" title="2.4 UDP三种通讯方式"></a>2.4 UDP三种通讯方式</h3><ul><li><p>单播</p><p>单播用于两个主机之间的端对端通信</p></li><li><p>组播</p><p>组播用于对一组特定的主机进行通信</p></li><li><p>广播</p><p>广播用于一个主机对整个局域网上所有主机上的数据通信</p></li></ul><h3 id="2-5-UDP组播实现"><a href="#2-5-UDP组播实现" class="headerlink" title="2.5 UDP组播实现"></a>2.5 UDP组播实现</h3><ul><li><p>组播地址：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">224.0.0.0</span> ~ <span class="number">239</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span></span><br><span class="line">其中<span class="number">224</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> ~ <span class="number">224</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">255</span> 为预留的组播地址</span><br></pre></td></tr></table></figure><p>组播地址分为几个范围，用于不同的用途：</p><ul><li><strong>永久组播地址</strong>：如224.0.0.0到224.0.0.255，这些地址被IANA分配给特定用途，如224.0.0.1用于所有主机的组播。</li><li><strong>本地管理组播地址</strong>：范围从239.0.0.0到239.255.255.255，用于本地网络管理，不用于Internet。</li><li><strong>全局组播地址</strong>：如224.0.1.0到238.255.255.255，这些地址可以用于Internet上的组播。</li><li><strong>链路本地组播地址</strong>：如224.0.0.0到224.0.0.255，只在本地链路上有效，不会被路由器转发。</li></ul></li><li><p>实现步骤</p><ul><li>发送端<ol><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包(DatagramPacket)</li><li>调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端Socket对象(MulticastSocket)</li><li>创建一个箱子,用于接收数据</li><li>把当前计算机绑定一个组播地址</li><li>将数据接收到箱子中</li><li>解析数据包,并打印数据</li><li>释放资源</li></ol></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClinetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello 组播&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="comment">// 2. 创建数据，并把数据打包(DatagramPacket)</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line">        <span class="comment">// 3. 调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建接收端Socket对象(MulticastSocket)</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 2. 创建一个箱子,用于接收数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 把当前计算机绑定一个组播地址,表示添加到这一组中.</span></span><br><span class="line">        ms.joinGroup(InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>));</span><br><span class="line">        <span class="comment">// 4. 将数据接收到箱子中</span></span><br><span class="line">        ms.receive(dp);</span><br><span class="line">        <span class="comment">// 5. 解析数据包,并打印数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6-UDP广播实现"><a href="#2-6-UDP广播实现" class="headerlink" title="2.6 UDP广播实现"></a>2.6 UDP广播实现</h3><ul><li><p>广播地址：255.255.255.255</p></li><li><p>实现步骤</p><ul><li>发送端<ol><li>创建发送端Socket对象(DatagramSocket)</li><li>创建存储数据的箱子,将广播地址封装进去</li><li>发送数据</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ol></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 1. 创建发送端Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"><span class="comment">// 2. 创建存储数据的箱子,将广播地址封装进去</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;广播 hello&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line"><span class="comment">// 3. 发送数据</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"><span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 2. 创建一个数据包，用于接收数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        <span class="comment">// 4. 解析数据包，并把数据在控制台显示</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line">        <span class="comment">// 5. 关闭接收端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-TCP通信程序"><a href="#3-TCP通信程序" class="headerlink" title="3. TCP通信程序"></a>3. TCP通信程序</h2><p><strong>使用IO流进行传输</strong></p><p><img src="images\it\TCP通信.png" alt="image-20240422100819450"></p><h3 id="3-1-TCP发送数据"><a href="#3-1-TCP发送数据" class="headerlink" title="3.1 TCP发送数据"></a>3.1 TCP发送数据</h3><ul><li><p>Java中的TCP通信</p><ul><li>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</li><li>Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</li></ul></li><li><p>构造方法</p><p>| 方法名                               | 说明                                           |<br>| —————————————————— | ——————————————————————— |<br>| Socket(InetAddress address,int port) | 创建流套接字并将其连接到指定IP指定端口号       |<br>| Socket(String host, int port)        | 创建流套接字并将其连接到指定主机上的指定端口号 |</p></li><li><p>相关方法</p><p>| 方法名                         | 说明                 |<br>| ——————————————— | —————————— |<br>| InputStream  getInputStream()  | 返回此套接字的输入流 |<br>| OutputStream getOutputStream() | 返回此套接字的输出流 |</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Socket对象</span></span><br><span class="line">        <span class="comment">//细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;aaa&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2TCP接收数据"><a href="#3-2TCP接收数据" class="headerlink" title="3.2TCP接收数据"></a>3.2TCP接收数据</h3><ul><li><p>构造方法</p><p>| 方法名                  | 说明                             |<br>| ———————————- | ———————————————— |<br>| ServletSocket(int port) | 创建绑定到指定端口的服务器套接字 |</p></li><li><p>相关方法</p><p>| 方法名          | 说明                           |<br>| ———————- | ——————————————— |<br>| Socket accept() | 监听要连接到此的套接字并接受它 |</p></li><li><p>注意事项</p><ol><li>accept方法是阻塞的,作用就是等待客户端连接</li><li>客户端创建对象并连接服务器,此时是通过三次握手协议,保证跟服务器之间的连接</li><li>针对客户端来讲,是往外写的,所以是输出流<br>针对服务器来讲,是往里读的,所以是输入流</li><li>read方法也是阻塞的</li><li>客户端在关流的时候,还多了一个往服务器写结束标记的动作</li><li>最后一步断开连接,通过四次挥手协议保证连接终止</li></ol></li><li><p>三次握手和四次挥手</p><ul><li><p>三次握手</p><p><img src="/img/07_TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="07_TCP三次握手"></p></li><li><p>四次挥手</p><p><img src="img/08_TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="08_TCP四次挥手"></p></li></ul></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象ServerSocker</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.监听客户端的链接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3TCP程序练习（传输中文）"><a href="#3-3TCP程序练习（传输中文）" class="headerlink" title="3.3TCP程序练习（传输中文）"></a>3.3TCP程序练习（传输中文）</h3><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Socket对象</span></span><br><span class="line">        <span class="comment">//细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;你好你好&quot;</span>.getBytes());<span class="comment">//12字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象ServerSocker</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.监听客户端的链接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = br.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-底层分析"><a href="#3-4-底层分析" class="headerlink" title="3.4 底层分析"></a>3.4 底层分析</h3><p><img src="images\it\TCP底层分析.png" alt="image-20240422102520408"></p><h3 id="3-5-三次握手和四次挥手"><a href="#3-5-三次握手和四次挥手" class="headerlink" title="3.5 三次握手和四次挥手"></a>3.5 三次握手和四次挥手</h3><p><img src="images\it\三次握手.png" alt="image-20240422102845260"></p><p><img src="images\it\四次挥手.png" alt="image-20240422102930502"></p><h2 id="4-综合练习"><a href="#4-综合练习" class="headerlink" title="4. 综合练习"></a>4. 综合练习</h2><h3 id="练习一：多发多收"><a href="#练习一：多发多收" class="headerlink" title="练习一：多发多收"></a>练习一：多发多收</h3><p>需求：</p><p>​    客户端：多次发送数据</p><p>​    服务器：接收多次接收数据，并打印</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：多次发送数据</span></span><br><span class="line">        <span class="comment">//服务器：接收多次接收数据，并打印</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Socket对象并连接服务端</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写出数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入您要发送的信息&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(str))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            os.write(str.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：多次发送数据</span></span><br><span class="line">        <span class="comment">//服务器：接收多次接收数据，并打印</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象绑定10000端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.等待客户端来连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取数据</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二：接收并反馈"><a href="#练习二：接收并反馈" class="headerlink" title="练习二：接收并反馈"></a>练习二：接收并反馈</h3><ul><li><p>案例需求</p><p>客户端：发送数据，接受服务器反馈</p><p>服务器：收到消息后给出反馈</p></li><li><p>案例分析</p><ul><li>客户端创建对象，使用输出流输出数据</li><li>服务端创建对象，使用输入流接受数据</li><li>服务端使用输出流给出反馈数据</li><li>客户端使用输入流接受反馈数据</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">       <span class="comment">// os.close();如果在这里关流,会导致整个socket都无法使用</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//仅仅关闭输出流.并写一个结束标记,对socket没有任何影响</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> accept.getInputStream();</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = is.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;看看我执行了吗?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(accept.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;你谁啊?&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">        is.close();</span><br><span class="line">        accept.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习三：上传练习（TCP协议）"><a href="#练习三：上传练习（TCP协议）" class="headerlink" title="练习三：上传练习（TCP协议）"></a>练习三：上传练习（TCP协议）</h3><ul><li><p>案例需求</p><p>客户端：数据来自于本地文件，接收服务器反馈</p><p>服务器：接收到的数据写入本地文件，给出反馈</p></li><li><p>案例分析</p><ul><li>创建客户端对象，创建输入流对象指向文件，每读一次数据就给服务器输出一次数据，输出结束后使用shutdownOutput()方法告知服务端传输结束</li><li>创建服务器对象，创建输出流对象指向文件，每接受一次数据就使用输出流输出到文件中，传输结束后。使用输出流给客户端反馈信息</li><li>客户端接受服务端的回馈信息</li></ul></li><li><p>相关方法</p><p>| 方法名                | 说明                               |<br>| ——————————- | ————————————————— |<br>| void shutdownInput()  | 将此套接字的输入流放置在“流的末尾” |<br>| void shutdownOutput() | 禁止用此套接字的输出流             |</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Socket对象，并连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取本地文件中的数据，并写到服务器当中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往服务器写出结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务器的回写数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象并绑定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.等待客户端来连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取数据并保存到本地文件中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;mysocketnet\\serverdir\\a.jpg&quot;</span>));</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="comment">//4.回写数据</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="练习四：文件名重复"><a href="#练习四：文件名重复" class="headerlink" title="练习四：文件名重复"></a>练习四：文件名重复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UUIDTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(str);<span class="comment">//9f15b8c356c54f55bfcb0ee3023fce8a</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Socket对象，并连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取本地文件中的数据，并写到服务器当中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往服务器写出结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务器的回写数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象并绑定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.等待客户端来连接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.读取数据并保存到本地文件中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="comment">//4.回写数据</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">        bw.write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习五：服务器改写为多线程"><a href="#练习五：服务器改写为多线程" class="headerlink" title="练习五：服务器改写为多线程"></a>练习五：服务器改写为多线程</h3><p>服务器只能处理一个客户端请求，接收完一个图片之后，服务器就关闭了。</p><p>优化方案一：</p><p>​    使用循环</p><p>弊端：</p><p>​    第一个用户正在上传数据，第二个用户就来访问了，此时第二个用户是无法成功上传的。</p><p>​    所以，使用多线程改进</p><p>优化方案二：</p><p>​    每来一个用户，就开启多线程处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Socket对象，并连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取本地文件中的数据，并写到服务器当中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往服务器写出结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务器的回写数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象并绑定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.等待客户端来连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启一条线程</span></span><br><span class="line">            <span class="comment">//一个用户就对应服务端的一条线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRunnable</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3.读取数据并保存到本地文件中</span></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bos.close();</span><br><span class="line">            <span class="comment">//4.回写数据</span></span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            bw.write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.释放资源</span></span><br><span class="line">           <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   socket.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习六：线程池改进"><a href="#练习六：线程池改进" class="headerlink" title="练习六：线程池改进"></a>练习六：线程池改进</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建Socket对象，并连接服务器</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取本地文件中的数据，并写到服务器当中</span></span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mysocketnet\\clientdir\\a.jpg&quot;</span>));</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(socket.getOutputStream());</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往服务器写出结束标记</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.接收服务器的回写数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//客户端：将本地文件上传到服务器。接收服务器的反馈。</span></span><br><span class="line">        <span class="comment">//服务器：接收客户端上传的文件，上传完毕之后给出反馈。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程池对象</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">3</span>,<span class="comment">//核心线程数量</span></span><br><span class="line">                <span class="number">16</span>,<span class="comment">//线程池总大小</span></span><br><span class="line">                <span class="number">60</span>,<span class="comment">//空闲时间</span></span><br><span class="line">                TimeUnit.SECONDS,<span class="comment">//空闲时间（单位）</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>),<span class="comment">//队列</span></span><br><span class="line">                Executors.defaultThreadFactory(),<span class="comment">//线程工厂，让线程池如何创建线程对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">//阻塞队列</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象并绑定端口</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2.等待客户端来连接</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启一条线程</span></span><br><span class="line">            <span class="comment">//一个用户就对应服务端的一条线程</span></span><br><span class="line">            <span class="comment">//new Thread(new MyRunnable(socket)).start();</span></span><br><span class="line">            pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>(socket));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyRunnable</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3.读取数据并保存到本地文件中</span></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;mysocketnet\\serverdir\\&quot;</span> + name + <span class="string">&quot;.jpg&quot;</span>));</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bos.close();</span><br><span class="line">            <span class="comment">//4.回写数据</span></span><br><span class="line">            <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream()));</span><br><span class="line">            bw.write(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.释放资源</span></span><br><span class="line">           <span class="keyword">if</span>(socket != <span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   socket.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据分析</title>
      <link href="/posts/f49c8269.html"/>
      <url>/posts/f49c8269.html</url>
      
        <content type="html"><![CDATA[<p>这个笔记我打算专门用来记录我在数据分析以及数据预处理遇到的知识点</p><h1 id="iloc与loc"><a href="#iloc与loc" class="headerlink" title="iloc与loc"></a>iloc与loc</h1><p>loc和iloc都是pandas工具中定位某一行的函数，loc是location的意思，而iloc中的 i 指的是Integer，二者的区别如下：</p><ul><li>loc：通过行标签名称索引行数据</li><li>iloc：通过行号索引行数据</li></ul><h2 id="示例数据"><a href="#示例数据" class="headerlink" title="示例数据"></a>示例数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),index=<span class="built_in">list</span>(<span class="string">&quot;ABCD&quot;</span>),columns=<span class="built_in">list</span>(<span class="string">&quot;wxyz&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    w   x   y   z</span><br><span class="line">A   0   1   2   3</span><br><span class="line">B   4   5   6   7</span><br><span class="line">C   8   9  10  11</span><br><span class="line">D  12  13  14  15</span><br></pre></td></tr></table></figure><h2 id="loc用法"><a href="#loc用法" class="headerlink" title="loc用法"></a>loc用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.loc[<span class="string">&quot;A&quot;</span>])</span><br><span class="line"><span class="comment">#w    0</span></span><br><span class="line"><span class="comment">#x    1</span></span><br><span class="line"><span class="comment">#y    2</span></span><br><span class="line"><span class="comment">#z    3</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[[<span class="string">&quot;A&quot;</span>]])</span><br><span class="line"><span class="comment">#   w  x  y  z</span></span><br><span class="line"><span class="comment">#A  0  1  2  3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []返回Series，[[]]返回DataFrame</span></span><br></pre></td></tr></table></figure><h2 id="iloc用法"><a href="#iloc用法" class="headerlink" title="iloc用法"></a>iloc用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(data.iloc[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#w    0</span></span><br><span class="line"><span class="comment">#x    1</span></span><br><span class="line"><span class="comment">#y    2</span></span><br><span class="line"><span class="comment">#z    3</span></span><br><span class="line"><span class="comment">#print(data.iloc[&quot;A&quot;])报错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.loc[[<span class="string">&quot;A&quot;</span>]])</span><br><span class="line"><span class="comment">#   w  x  y  z</span></span><br><span class="line"><span class="comment">#A  0  1  2  3</span></span><br><span class="line"><span class="comment">#print(data.loc[0])报错</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式1</span></span><br><span class="line">df.loc[:,<span class="number">0</span>:<span class="number">2</span>]<span class="comment">#可把loc理解为遍历字符串类型，0:2则表示标签为0,1,2三列</span></span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line">df.iloc[:,<span class="number">0</span>:<span class="number">3</span>]<span class="comment">#iloc遍历的数数字，python中0:3对应0,1,和2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.loc[df[<span class="string">&#x27;Purchase&#x27;</span>] == <span class="string">&#x27;CH&#x27;</span>, <span class="string">&#x27;Purchase&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;Purchase&#x27;</span>] == <span class="string">&#x27;MM&#x27;</span>, <span class="string">&#x27;Purchase&#x27;</span>] = <span class="number">1</span></span><br><span class="line">df[<span class="string">&#x27;Purchase&#x27;</span>] = df[<span class="string">&#x27;Purchase&#x27;</span>].replace(&#123;<span class="string">&#x27;CH&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;MM&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pd-query"><a href="#pd-query" class="headerlink" title="pd.query"></a>pd.query</h1><p>可以指定范围，这样更加方便为机器学习选择数据量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = data.query(<span class="string">&quot;x &lt; 2.5 &amp; x &gt; 2 &amp; y &lt; 1.5 &amp; y &gt; 1.0&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><ol><li><p>将时间戳转成自己指定的时间格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.to_datetime(data[<span class="string">&quot;time&quot;</span>],unit=<span class="string">&quot;s&quot;</span>)</span><br><span class="line"><span class="comment">#1970-01-08 05:06:14</span></span><br></pre></td></tr></table></figure></li><li><p>获取年月日，时分秒,周</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先获取时间索引</span><br><span class="line">date = pd.DatetimeIndex(time_value)</span><br><span class="line"></span><br><span class="line">再获取自己想要的</span><br><span class="line">date.year</span><br><span class="line">date.month</span><br><span class="line">hour</span><br><span class="line">    weekday</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">&#x27;day&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;time&#x27;</span>]).dt.day</span><br><span class="line">data[<span class="string">&#x27;weekday&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;time&#x27;</span>]).dt.weekday</span><br><span class="line">data[<span class="string">&#x27;hour&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;time&#x27;</span>]).dt.hour</span><br></pre></td></tr></table></figure><h1 id="agg和apply"><a href="#agg和apply" class="headerlink" title="agg和apply"></a>agg和apply</h1><p><code>agg()</code>函数（Aggregate）用于对数据进行聚合操作，例如计算均值、求和、最大值、最小值等统计指标。它可以应用于DataFrame或Series对象，并接受一个或多个聚合函数作为参数。以下是<code>agg()</code>函数的常见用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对DataFrame应用聚合函数</span></span><br><span class="line">df.agg(func)</span><br><span class="line">df.agg(&#123;column: func&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对Series应用聚合函数</span></span><br><span class="line">s.agg(func)</span><br></pre></td></tr></table></figure><p>其中，<code>df</code>表示DataFrame对象，<code>s</code>表示Series对象，<code>func</code>表示聚合函数，可以是内置函数（如<code>mean()</code>、<code>sum()</code>、<code>max()</code>、<code>min()</code>等），也可以是自定义函数。</p><p>使用<code>agg()</code>函数时，可以将多个聚合函数传递给它，并通过列表或字典的方式指定应用每个函数的列。例如，可以使用以下方式计算DataFrame的均值和总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.agg([<span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>])</span><br></pre></td></tr></table></figure><p>还可以通过字典的方式指定每个列应用的聚合函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy <span class="selector-tag">code</span></span><br><span class="line">df<span class="selector-class">.agg</span>(&#123;<span class="string">&#x27;列1&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>, <span class="string">&#x27;列2&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><code>apply()</code>函数用于对DataFrame或Series的每个元素应用自定义函数，以实现数据的转换、映射或其他操作。它可以应用于DataFrame的整个行或列，或者应用于Series的每个元素。以下是<code>apply()</code>函数的常见用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对DataFrame的行或列应用函数</span></span><br><span class="line">df.apply(func, axis=<span class="number">0</span>)  <span class="comment"># 对列应用函数</span></span><br><span class="line">df.apply(func, axis=<span class="number">1</span>)  <span class="comment"># 对行应用函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对Series的每个元素应用函数</span></span><br><span class="line">s.apply(func)</span><br></pre></td></tr></table></figure><p>其中，<code>df</code>表示DataFrame对象，<code>s</code>表示Series对象，<code>func</code>表示自定义函数。</p><p>使用<code>apply()</code>函数时，需要传递一个函数作为参数，该函数将应用于每个元素。可以使用lambda表达式定义匿名函数，也可以使用普通函数进行操作。</p><p>在<code>apply()</code>函数中，通过<code>axis</code>参数可以指定应用函数的方向，<code>axis=0</code>表示按列应用函数，<code>axis=1</code>表示按行应用函数。</p><p>需要注意的是，<code>apply()</code>函数在处理大规模数据时可能会较慢，因为它是逐个元素地进行操作。在某些情况下，可以考虑使用向量化操作或其他优化技术来提高性能。</p><p>综上所述，<code>agg()</code>函数用于对数据进行聚合操作，而<code>apply()</code>函数用于对每个元素应用自定义函数。它们在数据分析和转换中都有广泛的应用。</p><h1 id="表合并"><a href="#表合并" class="headerlink" title="表合并"></a>表合并</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1.merge(data2,how=<span class="string">&#x27;left&#x27;</span>, left_on=<span class="string">&#x27;id&#x27;</span>, right_on=<span class="string">&#x27;movie_id&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>merge()</code>函数还有其他一些参数可以进行更灵活的合并操作，例如<code>how</code>参数用于指定合并方式（inner、outer、left、right），<code>left_on</code>和<code>right_on</code>参数用于指定不同的列名进行连接等。</p></blockquote><h1 id="索引设置"><a href="#索引设置" class="headerlink" title="索引设置"></a>索引设置</h1><p><a href="https://blog.csdn.net/weixin_43593330/article/details/91863692">(77条消息) pandas 中读取和写入csv文件时候出现Unnamed:0的解决方案<em>unnamed: 0</em>我是天才很好的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = data.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">data.index += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="列重命名"><a href="#列重命名" class="headerlink" title="列重命名"></a>列重命名</h1><ol><li>```python<br>df = df.rename(columns={‘旧列名1’: ‘新列名1’, ‘旧列名2’: ‘新列名2’}, inplace=True)<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2</span>. ```python</span><br><span class="line">   df<span class="selector-class">.columns</span> = <span class="selector-attr">[<span class="string">&#x27;新列名1&#x27;</span>, <span class="string">&#x27;新列名2&#x27;</span>, <span class="string">&#x27;新列名3&#x27;</span>]</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="保存到csv…"><a href="#保存到csv…" class="headerlink" title="保存到csv…"></a>保存到csv…</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(<span class="string">&#x27;filename.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h1><ul><li><p>查看缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data[data[<span class="string">&#x27;runtime&#x27;</span>].isnull()]</span><br><span class="line">data.isna().<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure></li><li><p>REPLACE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = data.replace(to_replace=<span class="string">&quot;?&quot;</span>, value=np.nan)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除缺失值：</p><ul><li>使用<code>dropna()</code>函数删除包含缺失值的行或列。</li><li>可以使用<code>df.dropna(axis=0)</code>删除包含缺失值的行，或使用<code>df.dropna(axis=1)</code>删除包含缺失值的列。</li><li>注意，删除缺失值可能会导致数据丢失，只在缺失值对分析结果影响较小或可以忽略的情况下使用。</li></ul></li><li><p>插值：</p><ul><li>使用插值方法来根据已知数据点的值推断缺失值。</li><li>常见的插值方法包括线性插值、多项式插值、样条插值等。</li><li><code>pandas</code>中的<code>interpolate()</code>函数可以根据一定的插值算法填充缺失值。</li></ul></li><li><p>填充常量值：</p><ul><li><p>使用固定的常量值填充缺失值。</p></li><li><p>可以使用<code>fillna()</code>函数将缺失值填充为指定的常量值，例如0、-1等。</p></li><li><p>如果 <code>fillna()</code> 函数的 <code>inplace=True</code> 参数未生效，可能存在以下原因：</p><ol><li><p>使用了链式索引：在使用链式索引（chained indexing）时，<code>inplace=True</code> 可能不会生效。链式索引是指多次对同一数据进行索引操作，例如使用 <code>data.loc[...]</code>，然后再使用 <code>.fillna()</code>。这种操作可能会导致修改无法正确应用到原始数据上。</p><p>解决方法：避免使用链式索引，而是使用单一索引操作，或者使用 <code>.loc</code> 来完成索引和填充操作。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data<span class="selector-class">.loc</span><span class="selector-attr">[data[<span class="string">&#x27;id&#x27;</span>]</span> == <span class="number">370980</span>, <span class="string">&#x27;runtime&#x27;</span>] = data<span class="selector-class">.loc</span><span class="selector-attr">[data[<span class="string">&#x27;id&#x27;</span>]</span> == <span class="number">370980</span>, <span class="string">&#x27;runtime&#x27;</span>]<span class="selector-class">.fillna</span>(<span class="number">98</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol><li><p>列数据类型不是数值型：如果 <code>runtime</code> 列的数据类型不是数值型（如整数或浮点数），<code>fillna()</code> 函数可能无法正确填充值。</p><p>解决方法：使用 <code>astype()</code> 函数将数据类型转换为数值型。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy codedata<span class="selector-attr">[<span class="string">&#x27;runtime&#x27;</span>]</span> = data<span class="selector-attr">[<span class="string">&#x27;runtime&#x27;</span>]</span><span class="selector-class">.astype</span>(<span class="attribute">float</span>)</span><br><span class="line">data<span class="selector-class">.loc</span><span class="selector-attr">[data[<span class="string">&#x27;id&#x27;</span>]</span> == <span class="number">370980</span>, <span class="string">&#x27;runtime&#x27;</span>]<span class="selector-class">.fillna</span>(<span class="number">98</span>, inplace=True)</span><br></pre></td></tr></table></figure></li><li><p>数据被赋值给其他变量：在操作中，可能将数据赋值给其他变量，并对其进行修改，而不是直接修改原始数据。</p><p>解决方法：确保对原始数据直接进行操作，而不是对变量进行操作。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pythonCopy <span class="selector-tag">code</span></span><br><span class="line">data<span class="selector-class">.loc</span><span class="selector-attr">[data[<span class="string">&#x27;id&#x27;</span>]</span> == <span class="number">370980</span>, <span class="string">&#x27;runtime&#x27;</span>]<span class="selector-class">.fillna</span>(<span class="number">98</span>, inplace=True)</span><br></pre></td></tr></table></figure></li></ol><p>请注意，在填充操作中，要么使用 <code>inplace=True</code> 进行原地修改，要么将结果重新赋值给原始数据。如果以上方法仍然无法解决问题，请提供更多关于数据和操作的详细信息，以便更准确地找到问题的原因和解决方法。</p></li><li><p>填充统计值：</p><ul><li>使用均值、中位数、众数等统计值来填充缺失值。</li><li>可以使用<code>fillna()</code>函数将缺失值填充为对应列的均值、中位数、众数等。</li></ul></li><li><p>使用机器学习算法填充：</p><ul><li>使用机器学习算法，如回归模型、K近邻算法等，根据已知的特征值预测缺失值。</li></ul></li></ul><h1 id="explode"><a href="#explode" class="headerlink" title="explode"></a>explode</h1><p><a href="https://blog.csdn.net/yuxiaosmd/article/details/114647974">(74条消息) pandas100个骚操作五：使用 explode 实现 pandas 列转行的 2 个常用技巧_pandas explode_Python数据科学的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">film_production = data[<span class="string">&#x27;production_countries&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;|&#x27;</span>).explode().value_counts()</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.get_dummies(<span class="string">&#x27;|&#x27;</span>).<span class="built_in">sum</span>().nlargest(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h1 id="isin及其逆函数"><a href="#isin及其逆函数" class="headerlink" title="isin及其逆函数"></a>isin及其逆函数</h1><blockquote><p>如果想要获取或者删除想要特指的数，可以用isin</p><p>其反函数是 <code>~</code> 大波浪</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">country_counts_others = country_counts[~country_counts.index.isin(top_countries)]</span><br></pre></td></tr></table></figure><h1 id="flatten函数"><a href="#flatten函数" class="headerlink" title="flatten函数"></a>flatten函数</h1><blockquote><p>降维</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">y = director_top10.values.flatten()</span><br><span class="line"></span><br><span class="line">原始:</span><br><span class="line">[[<span class="number">28442552025</span>]</span><br><span class="line">[<span class="number">26807330936</span>]</span><br><span class="line">[<span class="number">25930141996</span>]</span><br><span class="line">[<span class="number">23086609676</span>]</span><br><span class="line">[<span class="number">23026826230</span>]</span><br><span class="line">[<span class="number">20078688142</span>]</span><br><span class="line">[<span class="number">19652943043</span>]</span><br><span class="line">[<span class="number">18464690132</span>]</span><br><span class="line">[<span class="number">18343111015</span>]</span><br><span class="line">[<span class="number">17415920425</span>]]</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">[<span class="number">28442552025</span> <span class="number">26807330936</span> <span class="number">25930141996</span> <span class="number">23086609676</span> <span class="number">23026826230</span> <span class="number">20078688142</span></span><br><span class="line"> <span class="number">19652943043</span> <span class="number">18464690132</span> <span class="number">18343111015</span> <span class="number">17415920425</span>]</span><br></pre></td></tr></table></figure><h1 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.drop(columns = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>], axis=<span class="number">1</span>)</span><br><span class="line">df= df.drop(columns = <span class="string">&#x27;column_name&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="get-dummies函数"><a href="#get-dummies函数" class="headerlink" title="get_dummies函数"></a>get_dummies函数</h1><p>参考链接：<a href="https://blog.csdn.net/weixin_44852067/article/details/122242856?ops_request_misc=%7B%22request%5Fid%22%3A%22168871879516800197027943%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=168871879516800197027943&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122242856-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=get_dummies&amp;spm=1018.2226.3001.4187">(74条消息) pandas get<em>dummies用法及代码示例_pandas.get_dummies</em>独影月下酌酒的博客-CSDN博客</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是<span class="literal">one</span> hot编码，将文本特征提取</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[data[<span class="string">&#x27;year&#x27;</span>].astype(<span class="built_in">int</span>) &gt;= <span class="number">1980</span>][<span class="string">&#x27;genres&#x27;</span>].<span class="built_in">str</span>.get_dummies(<span class="string">&#x27;|&#x27;</span>).<span class="built_in">sum</span>().nlargest(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[data[<span class="string">&#x27;year&#x27;</span>].astype(<span class="built_in">int</span>) &gt;= <span class="number">1980</span>].groupby(<span class="string">&#x27;year&#x27;</span>)[<span class="string">&#x27;genres&#x27;</span>].apply(<span class="keyword">lambda</span> x:x.<span class="built_in">str</span>.get_dummies(<span class="string">&#x27;|&#x27;</span>).<span class="built_in">sum</span>())</span><br></pre></td></tr></table></figure><h1 id="最值查找"><a href="#最值查找" class="headerlink" title="最值查找"></a>最值查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span>(),<span class="built_in">min</span>(),nlargest(),nsmallest()</span><br></pre></td></tr></table></figure><p>统计电影风格（genres）数量前五（Top5）的风格随时间（1980年至今）的变化趋势，用折线图的顺滑模式表示，然后x轴为年份，y轴为数量，并且电影风格genres列的格式大致为:Action|Adventure|Fantasy|Science Fiction</p><h1 id="cat函数"><a href="#cat函数" class="headerlink" title="cat函数"></a>cat函数</h1><p>在series中，做合并通常可以使用cat函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    c</span><br><span class="line"><span class="number">3</span>    d</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;a,b,c,d&#x27;</span></span><br><span class="line"><span class="comment"># 如果中间有nan，不特殊说明，通常直接忽略掉</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = pd.Series([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, np.nan, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;a,b,d&#x27;</span></span><br><span class="line"><span class="comment"># 通过指定na_rep参数，做连接时，nan被替换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.<span class="built_in">str</span>.cat(sep=<span class="string">&#x27;,&#x27;</span>, na_rep=<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;a,b,-,d&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = pd.Series([<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], index=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    c</span><br><span class="line"><span class="number">3</span>    d</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">3</span>    d</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">2</span>    c</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"><span class="comment"># 如果不指定join参数，则还是会按照list列表中的</span></span><br><span class="line"><span class="comment"># 顺序依次做连接</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.<span class="built_in">str</span>.cat(u)</span><br><span class="line"><span class="number">0</span>    ab</span><br><span class="line"><span class="number">1</span>    bd</span><br><span class="line"><span class="number">2</span>    ca</span><br><span class="line"><span class="number">3</span>    dc</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"><span class="comment"># 通过指定连接方式，join有left,right,inner,outer四种</span></span><br><span class="line"><span class="comment"># 连接方式，分别安装index对号连接</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.<span class="built_in">str</span>.cat(u, join=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"><span class="number">0</span>    aa</span><br><span class="line"><span class="number">1</span>    bb</span><br><span class="line"><span class="number">2</span>    cc</span><br><span class="line"><span class="number">3</span>    dd</span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="重复值"><a href="#重复值" class="headerlink" title="重复值"></a>重复值</h1><p><a href="https://www.jianshu.com/p/23c93e0f369a">https://www.jianshu.com/p/23c93e0f369a</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python中有一个快速删除重复值的函数</span></span><br><span class="line">data.drop_duplicate()</span><br></pre></td></tr></table></figure><h1 id="plt-legend"><a href="#plt-legend" class="headerlink" title="plt.legend()"></a>plt.legend()</h1><p><code>plt.legend()</code> 是 matplotlib 库中用于创建图例的函数。图例是一个说明性的标记，用于标识图中不同元素的含义，比如线条、点或其他图形的含义。它通常用于帮助读者理解图中的各个组成部分，并提供关键信息。</p><p><code>plt.legend()</code> 函数用于显示图例，并可以在图中的不同位置放置图例。它有多种用法，下面是一些常见的用法：</p><ol><li><p>基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">&#x27;Line 1&#x27;</span>)</span><br><span class="line">plt.plot(x, z, label=<span class="string">&#x27;Line 2&#x27;</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><p>在每个 <code>plt.plot()</code> 函数中，使用 <code>label</code> 参数为每条线条添加标签。然后调用 <code>plt.legend()</code> 函数，它会根据标签自动生成图例并将其显示在默认位置。</p></li><li><p>自定义图例位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">&#x27;Line 1&#x27;</span>)</span><br><span class="line">plt.plot(x, z, label=<span class="string">&#x27;Line 2&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在 <code>plt.legend()</code> 函数中使用 <code>loc</code> 参数可以指定图例的位置。常见的位置参数包括 <code>&#39;upper right&#39;</code>、<code>&#39;upper left&#39;</code>、<code>&#39;lower right&#39;</code>、<code>&#39;lower left&#39;</code> 和 <code>&#39;center&#39;</code> 等。</p></li><li><p>自定义图例样式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y, label=<span class="string">&#x27;Line 1&#x27;</span>)</span><br><span class="line">plt.plot(x, z, label=<span class="string">&#x27;Line 2&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>, fontsize=<span class="string">&#x27;small&#x27;</span>, fancybox=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>你可以使用其他参数来自定义图例的样式。例如，可以使用 <code>fontsize</code> 参数设置字体大小，使用 <code>fancybox</code> 参数创建一个带有圆角边框的图例框。</p></li></ol><p>请注意，<code>plt.legend()</code> 函数通常在绘制完所有需要显示在图例中的元素后调用，以确保所有标签都被包含在图例中。</p><h1 id="plt-figure"><a href="#plt-figure" class="headerlink" title="plt.figure()"></a>plt.figure()</h1><p><code>plt.figure()</code> 是 Matplotlib 库中用于创建新图形的函数。它返回一个 Figure 对象，代表了整个图形窗口或画布。</p><p><code>plt.figure()</code> 函数中可以设置一些参数来调整图形的属性，例如：</p><ul><li><code>figsize</code>：指定图形的大小，是一个元组，包含宽度和高度的值。例如，<code>figsize=(10, 6)</code> 表示图形宽度为 10，高度为 6。</li><li><code>dpi</code>：指定图形的分辨率，即每英寸包含的像素数。默认值为 100。</li><li><code>facecolor</code>：指定图形的背景颜色。</li><li><code>edgecolor</code>：指定图形的边框颜色。</li></ul><p>除了上述属性，<code>plt.figure()</code> 还可以接受其他参数，用于进一步定制图形的外观和行为。例如：</p><ul><li><code>num</code>：指定图形的编号，可以用于在多个图形之间进行切换。</li><li><code>clear</code>：如果设置为 True，则在创建图形之前清除当前图形窗口中的所有内容。</li></ul><p>在创建图形后，可以使用其他 Matplotlib 函数来绘制图形、设置标题、添加标签、调整轴等。最后，使用 <code>plt.show()</code> 函数将图形显示出来。</p><p>需要注意的是，<code>plt.figure()</code> 只是创建一个图形对象，并不会自动在图形窗口中显示图形。需要使用其他绘图函数（如 <code>plt.plot()</code>、<code>plt.bar()</code> 等）来绘制图形，并通过 <code>plt.show()</code> 来显示图形。</p><h1 id="plt-xticks"><a href="#plt-xticks" class="headerlink" title="plt.xticks()"></a>plt.xticks()</h1><p><code>plt.xticks()</code> 是 Matplotlib 库中用于设置 x 轴刻度的函数。它可以用于自定义 x 轴上的刻度位置和标签。</p><p><code>plt.xticks()</code> 函数的常用参数包括：</p><ul><li><code>ticks</code>：指定 x 轴刻度的位置，可以是一个包含刻度位置的列表或数组。</li><li><code>labels</code>：指定 x 轴刻度的标签，可以是一个包含刻度标签的列表或数组。</li><li><code>rotation</code>：指定刻度标签的旋转角度，用于调整标签的方向。例如，<code>rotation=90</code> 表示将标签逆时针旋转 90 度。</li><li><code>fontsize</code>：指定刻度标签的字体大小。</li><li><code>fontweight</code>：指定刻度标签的字体粗细。</li><li><code>ha</code>：指定刻度标签的水平对齐方式，可选值包括 <code>&#39;center&#39;</code>、<code>&#39;right&#39;</code>、<code>&#39;left&#39;</code>，用于调整标签在刻度位置上的对齐方式。</li></ul><p>使用 <code>plt.xticks()</code> 可以根据需要灵活地设置 x 轴刻度的位置和标签，以满足不同的绘图需求。例如，可以将刻度位置设置为一组特定的数值，然后将刻度标签设置为对应的文本，或者根据数据动态生成刻度标签等。</p><p>需要注意的是，<code>plt.xticks()</code> 只是设置 x 轴刻度的显示方式，并不会自动调整轴的范围。如果需要调整轴的范围，可以使用 <code>plt.xlim()</code> 函数。</p><h1 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h1><p>除了<code>nlargest</code>函数外，还有以下几个与之类似的函数：</p><ol><li><code>head(n)</code>: 返回DataFrame或Series中的前n行（或元素），按索引顺序排列。用法示例：<code>df.head(5)</code> 或 <code>series.head(10)</code>。</li><li><code>nsmallest(n, column)</code>: 返回DataFrame或Series中指定列(column)最小的n行（或元素），按升序排列。用法示例：<code>df.nsmallest(3, &#39;column_name&#39;)</code> 或 <code>series.nsmallest(5)</code>。</li><li><code>tail(n)</code>: 返回DataFrame或Series中的后n行（或元素），按索引逆序排列。用法示例：<code>df.tail(5)</code> 或 <code>series.tail(10)</code>。</li><li><code>nlargest(n, column)</code>: 返回DataFrame或Series中指定列(column)最大的n行（或元素），按降序排列。用法示例：<code>df.nlargest(3, &#39;column_name&#39;)</code> 或 <code>series.nlargest(5)</code>。</li></ol><p>这些函数可以根据指定的条件或列，返回DataFrame或Series中最大或最小的n个行（或元素），方便进行数据的筛选和排序。</p><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>在Python中，与<code>&amp;</code>类似的位运算符和逻辑运算符有以下几种：</p><ol><li><code>|</code> (按位或)：执行按位或操作，将两个操作数的对应位进行或运算，并返回结果。对于每一位，只要两个操作数的对应位中有一个为1，结果位就为1，否则为0。</li><li><code>^</code> (按位异或)：执行按位异或操作，将两个操作数的对应位进行异或运算，并返回结果。对于每一位，只有当两个操作数的对应位不相同时，结果位才为1，否则为0。</li><li><code>~</code> (按位取反)：执行按位取反操作，将操作数的每一位取反，并返回结果。对于每一位，0变为1，1变为0。</li><li><code>&amp;&amp;</code> (逻辑与)：执行短路逻辑与操作，当左侧的表达式为True时，才会计算并返回右侧的表达式的值；否则，直接返回False。</li><li><code>||</code> (逻辑或)：执行短路逻辑或操作，当左侧的表达式为False时，才会计算并返回右侧的表达式的值；否则，直接返回True。</li><li>作为逻辑运算符，<code>&amp;</code>执行逻辑与操作。它将两个布尔表达式进行与运算，并返回结果。只有当两个表达式都为True时，结果为True；否则，结果为False。</li></ol><h1 id="groupby函数"><a href="#groupby函数" class="headerlink" title="groupby函数"></a>groupby函数</h1><p>在 Pandas 中，<code>groupby()</code> 方法之后可以使用多种方法对分组后的数据进行操作和计算。一些常用的方法包括：</p><ul><li>聚合函数：例如 <code>sum()</code>、<code>mean()</code>、<code>count()</code>、<code>max()</code>、<code>min()</code> 等，用于对分组后的数据进行统计计算。</li><li>过滤函数：例如 <code>filter()</code>，用于基于某些条件筛选分组。</li><li>变换函数：例如 <code>transform()</code>，用于对每个分组应用转换操作并返回与原始数据相同形状的新数据。</li><li>应用函数：例如 <code>apply()</code>，允许自定义函数应用于每个分组。</li></ul><p>除了上述方法，还可以使用 <code>agg()</code> 方法对不同的列应用不同的聚合函数，使用 <code>size()</code> 方法计算每个分组的大小，使用 <code>first()</code>、<code>last()</code> 方法获取每个分组的第一个或最后一个值等。</p><h1 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h1><p>在 Python 中，可以使用 Pandas 库的 <code>pivot_table()</code> 函数来创建透视表。透视表是一种数据汇总和分析的工具，它可以根据给定的行和列索引对数据进行聚合和统计。</p><p><code>pivot_table()</code> 函数的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pivot_table(data, values=<span class="literal">None</span>, index=<span class="literal">None</span>, columns=<span class="literal">None</span>, aggfunc=<span class="string">&#x27;mean&#x27;</span>, fill_value=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>其中，参数的含义如下：</p><ul><li><code>data</code>：要进行透视的原始数据集，通常是一个 DataFrame。</li><li><code>values</code>：要聚合的数值列，可以是单个列名或包含多个列名的列表。</li><li><code>index</code>：透视表的行索引，可以是单个列名或包含多个列名的列表。</li><li><code>columns</code>：透视表的列索引，可以是单个列名或包含多个列名的列表。</li><li><code>aggfunc</code>：聚合函数，用于指定对数值列进行聚合的方法，默认为 <code>&#39;mean&#39;</code>（平均值）。其他常用的聚合函数包括 <code>&#39;sum&#39;</code>（求和）、<code>&#39;count&#39;</code>（计数）、<code>&#39;max&#39;</code>（最大值）、<code>&#39;min&#39;</code>（最小值）等。</li><li><code>fill_value</code>：用于填充缺失值的默认值。</li></ul><p>通过指定 <code>index</code>、<code>columns</code> 和 <code>values</code>，可以根据这些列进行分组和聚合，生成透视表。聚合函数会对指定的数值列进行计算，最终生成汇总的结果。</p><h1 id="顺滑模式"><a href="#顺滑模式" class="headerlink" title="顺滑模式"></a>顺滑模式</h1><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scipy.interpolate.make_interp_spline``scipy.interpolate`是SciPy 库中模块的函数。它用于三次样条插值，这是一种用平滑曲线对数据点进行插值的方法。在代码中使用此函数的目的是根据相应的 x 值 ( )为五个不同数据集 ( `y1`、`y2`、`y3`、`y4`和) 生成平滑曲线（样条线） 。`y5``x</span><br></pre></td></tr></table></figure><p>让我们一步步分解代码：</p><ol><li><code>x_smooth = np.linspace(int(x.min()), int(x.max()), 400)</code>：此行创建一个新数组<code>x_smooth</code>，其中包含原始 x 值 ( ) 的最小值和最大值之间的 400 个均匀间隔的点<code>x</code>。NumPy 中的函数<code>linspace</code>用于此目的。</li><li><code>y_smooth1 = make_interp_spline(x, y1)(x_smooth)</code>：该行使用该函数为数据集<code>make_interp_spline</code>创建样条插值<code>y1``x</code>。结果是<code>y_smooth1</code>在新的 x 值（<code>`x_smooth</code>）。该<code>make_interp_spline</code>函数返回一个可调用函数，可用于评估</li><li>同样，接下来的四行 ( <code>y_smooth2</code>, <code>y_smooth3</code>, <code>y</code>y_smooth4<code>,</code>y_smooth5<code>) 对数据集执行相同的样条插值``y2</code>, <code>y3</code>, <code>y4</code>, 和<code>y5</code>，分别评估样条线<code>x_smooth</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数分省赛</title>
      <link href="/posts/f2be9217.html"/>
      <url>/posts/f2be9217.html</url>
      
        <content type="html"><![CDATA[<p>闭包</p>]]></content>
      
      
      <categories>
          
          <category> 工作室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库编程篇</title>
      <link href="/posts/b4516458.html"/>
      <url>/posts/b4516458.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-编程基础"><a href="#1-编程基础" class="headerlink" title="1 编程基础"></a>1 编程基础</h1><h2 id="1-1-用户变量"><a href="#1-1-用户变量" class="headerlink" title="1-1 用户变量"></a>1-1 用户变量</h2><p>SQL代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#创建用户变量name并赋值为“王林”。</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@NAME</span><span class="operator">=</span><span class="string">&#x27;王林&#x27;</span>;   </span><br><span class="line"></span><br><span class="line">#创建用户变量user1并赋值为<span class="number">1</span>，user2赋值为<span class="number">2</span>，user3赋值为<span class="number">3</span>。</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@user1</span><span class="operator">=</span><span class="number">1</span>, <span class="variable">@user2</span><span class="operator">=</span><span class="number">2</span>, <span class="variable">@user3</span><span class="operator">=</span><span class="number">3</span>; </span><br><span class="line">   </span><br><span class="line">#创建用户变量user4，它的值为user3的值加<span class="number">1</span>。</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@user4</span><span class="operator">=</span><span class="variable">@user3</span><span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#在一个用户变量被创建后，它可以以一种特殊形式的表达式用于其他<span class="keyword">SQL</span>语句中。变量名前面也必须加上符号@。</span><br><span class="line">#创建并查询用户变量name的值。</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@NAME</span><span class="operator">=</span><span class="string">&#x27;王林&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@NAME</span>;</span><br><span class="line"></span><br><span class="line">#变量应用</span><br><span class="line">#查询Book表中图书编号为TP302<span class="operator">/</span><span class="number">057</span>的书名，并存储在变量b_name中。</span><br><span class="line"> <span class="keyword">SET</span> <span class="variable">@b_name</span><span class="operator">=</span></span><br><span class="line">(<span class="keyword">SELECT</span> bookname <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> bookcode <span class="operator">=</span> <span class="string">&#x27;TP302/057&#x27;</span>); </span><br><span class="line"></span><br><span class="line">#查询Book表中名字等于中b_name值的图书信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Book  <span class="keyword">WHERE</span> bookname<span class="operator">=</span><span class="variable">@b_name</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2-系统变量"><a href="#1-2-系统变量" class="headerlink" title="1-2 系统变量"></a>1-2 系统变量</h2><p>SQL参考</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获得现在使用的MySQL版本。</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@VERSION</span> ;</span><br><span class="line"></span><br><span class="line">#获得系统当前时间。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h1 id="2-内置函数"><a href="#2-内置函数" class="headerlink" title="2 内置函数"></a>2 内置函数</h1><h2 id="2-1-数学函数"><a href="#2-1-数学函数" class="headerlink" title="2-1 数学函数"></a>2-1 数学函数</h2><p>SQL参考</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#数学函数</span><br><span class="line">#最大值与最小值函数</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@max_num</span><span class="operator">=</span>GREATEST(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@max_num</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@min_num</span><span class="operator">=</span>LEAST(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@min_num</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#随机函数</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@num1</span> <span class="operator">=</span> RAND()<span class="operator">*</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num1</span> ;</span><br><span class="line"></span><br><span class="line">#圆周率</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@num2</span> <span class="operator">=</span> PI();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@num2</span> ;</span><br><span class="line"></span><br><span class="line">#绝对值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-1</span>) <span class="keyword">AS</span> NUM </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-字符串函数"><a href="#2-2-字符串函数" class="headerlink" title="2-2 字符串函数"></a>2-2 字符串函数</h2><p>SQL代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#字符串函数</span><br><span class="line">#字符串拼接</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;必胜&#x27;</span>) <span class="keyword">AS</span> str </span><br><span class="line">#字符串截取</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>) <span class="keyword">AS</span> str</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>) <span class="keyword">AS</span> str</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>) <span class="keyword">AS</span> str</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="keyword">AS</span> str</span><br><span class="line">#案例</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@STR</span><span class="operator">=</span><span class="string">&#x27;ABCDEFG&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="variable">@STR</span>,<span class="number">2</span>),<span class="keyword">RIGHT</span>(<span class="variable">@STR</span>,<span class="number">3</span>),<span class="built_in">SUBSTRING</span>(<span class="variable">@STR</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">#字符串格式化</span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(RAND()<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>) <span class="keyword">AS</span> num</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-日期函数"><a href="#2-3-日期函数" class="headerlink" title="2-3 日期函数"></a>2-3 日期函数</h2><p>SQL代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#日期函数</span><br><span class="line">#当前时间</span><br><span class="line"><span class="keyword">SELECT</span> NOW() <span class="keyword">AS</span> str </span><br><span class="line"></span><br><span class="line">#获取当前天数，小时等</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW()),DAYOFMONTH(NOW()),<span class="keyword">HOUR</span>(NOW())</span><br><span class="line"></span><br><span class="line">#时间相加</span><br><span class="line"><span class="keyword">SELECT</span> ADDTIME(NOW(),<span class="string">&#x27;2:00:00&#x27;</span>) <span class="keyword">AS</span> str </span><br></pre></td></tr></table></figure><h1 id="3-存储过程"><a href="#3-存储过程" class="headerlink" title="3 存储过程"></a>3 存储过程</h1><h2 id="3-1-简单存储过程"><a href="#3-1-简单存储过程" class="headerlink" title="3-1 简单存储过程"></a>3-1 简单存储过程</h2><p>创建存储过程</p><p>SQL代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#编写一个存储过程，实现的功能是删除一个指定用户姓名的用户信息。</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  sp_del_member(<span class="keyword">IN</span> xm  <span class="type">CHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Members <span class="keyword">WHERE</span> 姓名<span class="operator">=</span>xm;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;  </span><br></pre></td></tr></table></figure><p>关于结束符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span>  sp_del_member(<span class="keyword">IN</span> xm  <span class="type">CHAR</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Members <span class="keyword">WHERE</span> 姓名<span class="operator">=</span>xm;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;  </span><br></pre></td></tr></table></figure><p>查看存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看所有的存储过程状态</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS</span><br><span class="line">#查看某个存储过程的详细信息</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_del_member</span><br></pre></td></tr></table></figure><p>调用存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#调用sp_del_member存储过程，删除“李强”的用户信息。</span><br><span class="line"><span class="keyword">CALL</span> sp_del_member(<span class="string">&#x27;李强&#x27;</span>);</span><br></pre></td></tr></table></figure><p>删除存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#删除存储过程sp_del_member</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> sp_del_member;</span><br></pre></td></tr></table></figure><h2 id="3-2-复杂存储过程"><a href="#3-2-复杂存储过程" class="headerlink" title="3-2 复杂存储过程"></a>3-2 复杂存储过程</h2><h3 id="3-2-1-局部变量"><a href="#3-2-1-局部变量" class="headerlink" title="3-2-1 局部变量"></a>3-2-1 局部变量</h3><p>SQL代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#声明一个整型变量和两个字符变量。</span><br><span class="line">#局部变量只能在<span class="keyword">BEGIN</span>…<span class="keyword">END</span>语句块中声明</span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> str1, str2 <span class="type">VARCHAR</span>(<span class="number">6</span>);</span><br><span class="line">#局部变量赋值</span><br><span class="line"><span class="keyword">SET</span> num<span class="operator">=</span><span class="number">1</span>, str1<span class="operator">=</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#在存储过程体中将Book表中的书名为“计算机应用基础”的作者姓名和出版社的值</span><br><span class="line">#分别赋给变量name和publish,并输出出版社变量值</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_vtest (<span class="keyword">OUT</span> p <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> v_name,v_publish <span class="type">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">SELECT</span> author,publisher <span class="keyword">INTO</span> v_name, v_publish <span class="keyword">FROM</span> Book  <span class="keyword">WHERE</span> bookname<span class="operator">=</span> <span class="string">&#x27;计算机应用基础&#x27;</span>;    </span><br><span class="line">    <span class="keyword">SET</span> p <span class="operator">=</span> v_publish;</span><br><span class="line"><span class="keyword">END</span> </span><br><span class="line">$$</span><br><span class="line">DELIMITER ; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_vtest(<span class="variable">@p</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@p</span>;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-语句结构"><a href="#3-2-2-语句结构" class="headerlink" title="3-2-2 语句结构"></a>3-2-2 语句结构</h3><h4 id="3-2-2-1-判断结构赏析"><a href="#3-2-2-1-判断结构赏析" class="headerlink" title="3-2-2-1 判断结构赏析"></a>3-2-2-1 判断结构赏析</h4><p>案例1-两数相比</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_compare</span><br><span class="line">(<span class="keyword">IN</span> K1 <span class="type">INTEGER</span>, <span class="keyword">IN</span> K2 <span class="type">INTEGER</span>, <span class="keyword">OUT</span> K3 <span class="type">CHAR</span>(<span class="number">6</span>) )</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF K1<span class="operator">&gt;</span>K2 <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> K3<span class="operator">=</span> <span class="string">&#x27;大于&#x27;</span>;</span><br><span class="line">ELSEIF K1<span class="operator">=</span>K2 <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> K3<span class="operator">=</span> <span class="string">&#x27;等于&#x27;</span>;</span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line"><span class="keyword">SET</span> K3<span class="operator">=</span> <span class="string">&#x27;小于&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_compare(<span class="number">3</span>, <span class="number">6</span>, <span class="variable">@K</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@K</span>;</span><br></pre></td></tr></table></figure><p>案例2-</p><p>形态1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_updown1(<span class="keyword">IN</span> str <span class="type">VARCHAR</span>(<span class="number">1</span>), <span class="keyword">OUT</span> direct <span class="type">VARCHAR</span>(<span class="number">4</span>) )</span><br><span class="line">   <span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">CASE</span> str</span><br><span class="line"> <span class="keyword">WHEN</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;上升&#x27;</span>;</span><br><span class="line"> <span class="keyword">WHEN</span> <span class="string">&#x27;D&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;下降&#x27;</span>;</span><br><span class="line"> <span class="keyword">ELSE</span>  <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;不变&#x27;</span>;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">   <span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_updown1(<span class="string">&#x27;s&#x27;</span>,<span class="variable">@d</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@d</span>;</span><br></pre></td></tr></table></figure><p>形态2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_updown2(<span class="keyword">IN</span> str <span class="type">VARCHAR</span>(<span class="number">1</span>), <span class="keyword">OUT</span> direct <span class="type">VARCHAR</span>(<span class="number">4</span>) )</span><br><span class="line">   <span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">CASE</span> </span><br><span class="line"> <span class="keyword">WHEN</span> str <span class="operator">=</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;上升&#x27;</span>;</span><br><span class="line"> <span class="keyword">WHEN</span> str <span class="operator">=</span> <span class="string">&#x27;D&#x27;</span> <span class="keyword">THEN</span> <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;下降&#x27;</span>;</span><br><span class="line"> <span class="keyword">ELSE</span>  <span class="keyword">SET</span> direct <span class="operator">=</span><span class="string">&#x27;不变&#x27;</span>;</span><br><span class="line">     <span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">   <span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER; </span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_updown2(<span class="string">&#x27;s&#x27;</span>,<span class="variable">@d</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@d</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-2-循环结构"><a href="#3-2-2-2-循环结构" class="headerlink" title="3-2-2-2 循环结构"></a>3-2-2-2 循环结构</h4><p>案例1-  WHILE …DO</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#WHILE ...DO循环结构</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_while()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DECLARE</span> v1 <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">5</span>;</span><br><span class="line">   WHILE  v1 <span class="operator">&gt;</span> <span class="number">0</span>  DO</span><br><span class="line">         <span class="keyword">SET</span> v1 <span class="operator">=</span> v1<span class="number">-1</span>;</span><br><span class="line">         <span class="keyword">SELECT</span> v1;</span><br><span class="line">   <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_while()</span><br></pre></td></tr></table></figure><p>案例2-REPEAT…UNTIL - 类似do…while结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#REPEAT...UNTIL <span class="operator">-</span> 类似do...while结构</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_repeat()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">DECLARE</span> v1 <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">5</span>;</span><br><span class="line">   REPEAT</span><br><span class="line">      <span class="keyword">SET</span> v1<span class="operator">=</span>v1<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">SELECT</span> v1;      </span><br><span class="line">   UNTIL v1<span class="operator">&lt;</span><span class="number">1</span></span><br><span class="line">   <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_repeat();</span><br></pre></td></tr></table></figure><p>案例3 数据库存储结构独特结构：LOOP…LEAVE 类似 for…break…continue</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#数据库存储结构独特结构：LOOP...LEAVE 类似 for...break...continue</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_sum(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> v_sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  #label是做一个标识，写法是必须在后面带冒号“label:”方便后面写leave，iterate;</span><br><span class="line">  label:LOOP</span><br><span class="line">    IF n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">      LEAVE label;</span><br><span class="line">    <span class="keyword">END</span> IF;    </span><br><span class="line">    <span class="keyword">SET</span> v_sum <span class="operator">=</span> v_sum <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> LOOP label;</span><br><span class="line">  <span class="keyword">SELECT</span> v_sum;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> sp_sum(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>iterate 可以当做continue来使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#数据库存储结构独特结构：LOOP...LEAVE 类似 for...break...continue</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_sum(<span class="keyword">IN</span> n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> v_sum <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">  #label是做一个标识，写法是必须在后面带冒号“label:”方便后面写leave，iterate;</span><br><span class="line">  label:LOOP</span><br><span class="line">    IF n <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">       LEAVE label;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    IF n<span class="operator">%</span><span class="number">2</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">THEN</span></span><br><span class="line">  <span class="keyword">SET</span> n <span class="operator">=</span> n<span class="number">-1</span>;</span><br><span class="line">  ITERATE label;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">SET</span> v_sum <span class="operator">=</span> v_sum <span class="operator">+</span> n;</span><br><span class="line">    <span class="keyword">SET</span> n <span class="operator">=</span> n <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> LOOP label;</span><br><span class="line">  <span class="keyword">SELECT</span> v_sum;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-业务案例赏析"><a href="#3-2-3-业务案例赏析" class="headerlink" title="3-2-3 业务案例赏析"></a>3-2-3 业务案例赏析</h3><p>案例1-修改销售价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#根据用户姓名和书名查询订单，如果订购册数小于<span class="number">5</span>本不打折，</span><br><span class="line">#订购册数在<span class="number">5</span><span class="number">-10</span>本之间，订购单价打九折，订购册数大于<span class="number">10</span>本，订购单价打八折。</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> </span><br><span class="line">sp_updateSellPrice(<span class="keyword">IN</span> m_name  <span class="type">CHAR</span>(<span class="number">10</span>), <span class="keyword">IN</span> b_name <span class="type">VARCHAR</span>(<span class="number">40</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span>  v_bookcode <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">DECLARE</span>  v_mcode <span class="type">CHAR</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">DECLARE</span>  v_amount TINYINT;</span><br><span class="line"><span class="keyword">SELECT</span> mcode <span class="keyword">INTO</span> v_mcode  <span class="keyword">FROM</span> <span class="keyword">member</span></span><br><span class="line"><span class="keyword">WHERE</span>  NAME<span class="operator">=</span>m_name;</span><br><span class="line"><span class="keyword">SELECT</span> bookcode <span class="keyword">INTO</span> v_bookcode  <span class="keyword">FROM</span> Book <span class="keyword">WHERE</span>  bookname<span class="operator">=</span>b_name;</span><br><span class="line"><span class="keyword">SELECT</span> amount <span class="keyword">INTO</span> v_amount <span class="keyword">FROM</span> sell </span><br><span class="line"><span class="keyword">WHERE</span> mcode<span class="operator">=</span>v_mcode <span class="keyword">AND</span> bookcode<span class="operator">=</span>v_bookcode;</span><br><span class="line"><span class="keyword">SELECT</span> v_bookcode,v_mcode,v_amount;</span><br><span class="line"></span><br><span class="line">IF v_amount<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">AND</span> v_amount<span class="operator">&lt;=</span><span class="number">10</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">UPDATE</span> sell <span class="keyword">SET</span> price<span class="operator">=</span>price<span class="operator">*</span><span class="number">0.9</span> </span><br><span class="line"><span class="keyword">WHERE</span> mcode<span class="operator">=</span>v_mcode <span class="keyword">AND</span> bookcode<span class="operator">=</span>v_bookcode;</span><br><span class="line">ELSEIF v_amount<span class="operator">&gt;</span><span class="number">10</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">UPDATE</span> sell <span class="keyword">SET</span> price<span class="operator">=</span>price<span class="operator">*</span><span class="number">0.8</span>    </span><br><span class="line"><span class="keyword">WHERE</span> mcode<span class="operator">=</span>v_mcode <span class="keyword">AND</span> bookcode<span class="operator">=</span>v_bookcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-4-中级考试案例"><a href="#3-2-4-中级考试案例" class="headerlink" title="3-2-4 中级考试案例"></a>3-2-4 中级考试案例</h3><p>案例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insertProc(<span class="keyword">IN</span> p <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> var <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> var <span class="operator">=</span> p<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">CASE</span> var</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">21</span>);</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(<span class="number">22</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br><span class="line"></span><br><span class="line">#有存储过程创建如上，语句<span class="keyword">CALL</span> insertProc(<span class="number">0</span>)插入B表中的值是？</span><br><span class="line"><span class="keyword">CALL</span> insertProc(<span class="number">0</span>); </span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc()</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> var <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> var <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">WHILE var <span class="operator">&lt;</span> <span class="number">4</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> B <span class="keyword">VALUES</span>(var);</span><br><span class="line"><span class="keyword">SET</span> var <span class="operator">=</span> var <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER;</span><br><span class="line">#关于上述存储过程，执行<span class="keyword">insert</span>语句几次？</span><br></pre></td></tr></table></figure><h1 id="4-存储函数"><a href="#4-存储函数" class="headerlink" title="4 存储函数"></a>4 存储函数</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>参考代码1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#创建一个存储函数，它返回Book表中图书数目作为结果。</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun_bookCount()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INTEGER</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">     <span class="keyword">RETURN</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Book);</span><br><span class="line">  <span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>参考代码2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#创建一个存储函数，返回Book表中某本书的作者姓名。</span><br><span class="line">DELIMITER $$</span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun_bookAuthor(b_name <span class="type">VARCHAR</span>(<span class="number">40</span>))</span><br><span class="line">   <span class="keyword">RETURNS</span> <span class="type">CHAR</span>(<span class="number">10</span>)</span><br><span class="line">     <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> res_author <span class="type">CHAR</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">SELECT</span> author <span class="keyword">INTO</span> res_author <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> bookname<span class="operator">=</span> b_name;</span><br><span class="line"><span class="keyword">RETURN</span> res_author;</span><br><span class="line">     <span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS;</span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> fun_bookCount();</span><br><span class="line"><span class="keyword">SELECT</span> fun_bookAuthor(<span class="string">&#x27;网页设计&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> fun_bookCount;</span><br></pre></td></tr></table></figure><h1 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5 触发器"></a>5 触发器</h1><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#当删除表book表中某图书的信息时，同时将sell表中与该图书有关的数据全部删除</span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t_book_del AFTER <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> Book <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> sell <span class="keyword">WHERE</span> bookcode<span class="operator">=</span>old.bookcode;</span><br><span class="line">  <span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ; </span><br><span class="line"></span><br><span class="line">#现在验证一下触发器的功能：</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> bookcode <span class="operator">=</span> <span class="string">&#x27;TP23/6625&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#使用<span class="keyword">SELECT</span>语句查看Sell表中的情况：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sell <span class="keyword">WHERE</span> bookcode <span class="operator">=</span> <span class="string">&#x27;TP23/6625&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><ul><li>触发时间:    AFTER BEFORE</li><li>触发事件:    insert update delete</li></ul><h2 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><p>参考代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> trigger_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
